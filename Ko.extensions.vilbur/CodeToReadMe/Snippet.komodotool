{
  "keyboard_shortcut": "", 
  "name": "Snippet", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "if( typeof ko.extensions.vilbur.CodeToReadMe === 'undefined'  )", 
    "\tko.extensions.vilbur.CodeToReadMe = {};", 
    "", 
    "", 
    "/** MarkdownDocumentator", 
    " */", 
    "ko.extensions.vilbur.CodeToReadMe.Snippet = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction Snippet(){", 
    "", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('Snippet.js').clear(false).off(false).header(true);", 
    "", 
    "\t\tvar snippets = [];", 
    "", 
    "\t\t/** convert", 
    "\t\t */", 
    "\t\tthis.DocBlock = function(DocBlocks)", 
    "\t\t{", 
    "\t\t\tif( DocBlocks.constructor.name !== \"Array\" )", 
    "\t\t\t\tDocBlocks = [DocBlocks];", 
    "", 
    "\t\t\t/** setSnippet", 
    "\t\t\t */", 
    "\t\t\tvar setSnippet = function(DocBlock)", 
    "\t\t\t{", 
    "\t\t\t\tif( ! DocBlock )", 
    "\t\t\t\t\treturn;", 
    "\t\t\t\tLogger.info(DocBlock.get(), 'Snippet: '+'setSnippet');", 
    "", 
    "\t\t\t\t/** create Table", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getTable = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar table\t= [];", 
    "\t\t\t\t\tvar params\t= DocBlock.get('param');", 
    "", 
    "\t\t\t\t\tvar addFinctionNameRow = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar params_string = (function()", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\treturn params.length===0 ? '' :  params.map(function(param){", 
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn param.default\t!==''\t? '[' +param.name+ ']'\t: param.name;", 
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}).join(', ');", 
    "\t\t\t\t\t\t})();", 
    "\t\t\t\t\t\t//Logger.info(params_string, 'params_string');", 
    "\t\t\t\t\t\tvar whitespace\t= params.length ? ' ' :'';", 
    "\t", 
    "\t\t\t\t\t\t/* SET ROW ITEMS */", 
    "\t\t\t\t\t\ttable.push([", 
    "\t\t\t\t\t\t\t\t\t  ' __'+DocBlock.get('function').name+'__('+whitespace+params_string+whitespace+')',", 
    "\t\t\t\t\t\t\t\t\t  '[[%tabstop:'+DocBlock.get('summary.lines')+']]']", 
    "\t\t\t\t\t\t\t\t\t );", 
    "\t", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\tvar addHeaderSeparator = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\ttable.push([':---',':---']);", 
    "\t\t\t\t\t}; ", 
    "\t\t\t\t\tvar addParametersRows = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tif( params )", 
    "\t\t\t\t\t\t\tparams.map(function(param){", 
    "\t\t\t\t\t\t\t\tvar param_type\t= param.type\t==='void'\t? '[[%tabstop:string]]'\t: param.type;", 
    "\t\t\t\t\t\t\t\tvar param_name\t= param.default\t!==''\t? '[ ' +param.name+'='+param.default+ ' ]'\t: param.name;", 
    "\t\t\t\t\t\t\t\tvar param_description\t= param.description\t===''\t? '[[%tabstop:]]'\t: param.description;", 
    "\t\t\t\t\t\t\t\t/* SET ROW ITEMS */", 
    "\t\t\t\t\t\t\t\ttable.push([", 
    "\t\t\t\t\t\t\t\t\t\t\t\t'`@param '+param_type+'` '+param_name+''  ,", 
    "\t\t\t\t\t\t\t\t\t\t\t\tparam_description", 
    "\t\t\t\t\t\t\t\t\t\t\t]);", 
    "\t\t\t\t\t\t\t});", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t/** join table", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar joinTable = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\t/** functionName", 
    "\t\t\t\t\t\t */", 
    "\t\t\t\t\t\tvar rows = (function()", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\tvar rows\t= [];", 
    "\t\t\t\t\t\t\tfor(var r=0; r<table.length;r++)", 
    "\t\t\t\t\t\t\t\t//if(  r!=1 )", 
    "\t\t\t\t\t\t\t\t\trows.push( '|'+ table[r].join('\t|') + '\t|' );", 
    "\t\t\t\t\t\t\t\t//else", 
    "\t\t\t\t\t\t\t\t\t//rows.push('|'+ table[r]);", 
    "\t", 
    "\t", 
    "\t\t\t\t\t\t\t//if( rows[rows.length-1].match(/.*[\\|\\]]\\s+\\|$/gi) )         // if last columns is empty", 
    "\t\t\t\t\t\t\t\t//rows[rows.length-1] = rows[rows.length-1] + '|'; // add extra pipe after last row, prevent missing empty column", 
    "\t", 
    "\t\t\t\t\t\t\treturn rows;", 
    "\t", 
    "\t\t\t\t\t\t})();", 
    "\t", 
    "\t\t\t\t\t\tLogger.info(rows, 'Snippet: '+'rows');", 
    "\t", 
    "\t\t\t\t\t\treturn rows.join('\\n');\t\t\t\t\t", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t", 
    "\t\t\t\t\taddFinctionNameRow();", 
    "\t\t\t\t\taddHeaderSeparator();\t\t\t\t", 
    "\t\t\t\t\taddParametersRows();\t\t\t\t\t", 
    "\t\t\t\t\t", 
    "\t\t\t\t\treturn joinTable();", 
    "\t\t\t\t};", 
    "\t\t\t\tvar getDescription = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar description\t= DocBlock.get('description'); ", 
    "\t\t\t\t\t", 
    "\t\t\t\t\treturn description ? '\\n>' + description.lines.join('  ') : ''; ", 
    "\t\t\t\t}; ", 
    "\t\t\t\tvar getHorizonalRule = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\treturn '\\n\\n##  ';", 
    "\t\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\t\tsnippets.push( getTable() + getDescription() + getHorizonalRule() );", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var d=0; d<DocBlocks.length;d++)", 
    "\t\t\t\tsetSnippet(DocBlocks[d]);", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** insert fake snippet", 
    "\t\t */", 
    "\t\tthis.insert = function()", 
    "\t\t{", 
    "\t\t\tvar fake_snippet = {", 
    "\t\t\t\thasAttribute: function(name) {", 
    "\t\t\t\t\treturn name in this;", 
    "\t\t\t\t},", 
    "\t\t\t\tgetStringAttribute: function(name) {", 
    "\t\t\t\t\treturn this[name];", 
    "\t\t\t\t},", 
    "\t\t\t\tname:\t\"name snippet\",", 
    "\t\t\t\tindent_relative: \"true\",", 
    "\t\t\t\tvalue:\tsnippets.join(\"\\n\\n\") + '\\n' // add extra enter on end of tables, it prevents reduntant last column in last table", 
    "\t\t\t};", 
    "\t\t\tko.projects.snippetInsert(fake_snippet);", 
    "\t\t};", 
    "", 
    "\t}", 
    "", 
    "\treturn Snippet;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}