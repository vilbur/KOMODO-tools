{
  "keyboard_shortcut": "", 
  "name": "OPEN path laravel view", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "", 
    "function openIncludePath() {", 
    "\tvar current_fileName = ko.views.manager.currentView.koDoc.file.path.split(/(\\\\|\\/)/g).pop()", 
    "\tvar lang = ko.views.manager.currentView.languageObj.name;", 
    "", 
    "\tif ( lang=='PHP' || lang=='LaravelBlade' ) {", 
    "\t\topenIncludeView_PHP();", 
    "\t}", 
    "}", 
    "", 
    "", 
    "function getSelectedText() {", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\t/*    GET SELECTED TEXT    */", 
    "\tvar selectedText = scimoz.selText;", 
    "\t/*     IF TEXT IS SELECTED    */", 
    "", 
    "\tif ( selectedText == '') {", 
    "\t\tselectString();", 
    "\t\tvar selectedText = scimoz.selText;", 
    "\t}", 
    "", 
    "\tvar regex_string = /['\"](.*)['\"]/gi;", 
    "\tvar match =  regex_string.exec(selectedText);", 
    "\t//alert (match)", 
    "\tif( match != null ){", 
    "\t\tif( typeof match[1]!= 'undefined' ){", 
    "\t\t\treturn match[1];", 
    "\t\t};", 
    "", 
    "\t}", 
    "\treturn selectedText;", 
    "}", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "", 
    "function openIncludeView_PHP() {", 
    "\t/*    GET SELECTED TEXT    */", 
    "\tvar selectedText = getSelectedText();", 
    "\tvar laravel_path = getLaravelPath();", 
    "\tvar include_file_path =  selectedText.replace(/\\./g, '\\\\') + '.blade.php'  ;", 
    "\tvar inc_file_path = ( laravel_path + '\\\\resources\\\\views\\\\' + include_file_path ).replace(/\\\\/g, '\\\\\\\\');", 
    "\tko.open.URI( inc_file_path )", 
    "}", 
    "", 
    "function mergeFilePathAndIncludePath( filepath, includePath ) {", 
    "\tvar filepath_split = filepath.split(/\\\\|\\\\\\\\/);", 
    "\tvar includePath_split = includePath.split(/\\//);", 
    "\t\tfilepath_split.pop();", 
    "\tvar include_path_new = [];", 
    "\tfor (i = 0; i < includePath_split.length; i++) {", 
    "\t\tvar item = includePath_split[i];", 
    "\t\tif ( item=='..') {", 
    "\t\t\tfilepath_split.pop();", 
    "", 
    "\t\t}else {", 
    "", 
    "\t\t\tinclude_path_new.push(item)", 
    "\t\t}", 
    "\t}", 
    "\tvar full_include_path = filepath_split.concat( include_path_new );", 
    "\treturn  full_include_path.join('\\\\');", 
    "}", 
    "", 
    "function getLaravelPath() {", 
    "\tvar current_file_path = ko.views.manager.currentView.koDoc.file.path;", 
    "\tvar file_split =  current_file_path.split(/laravel\\\\/g);", 
    "\tvar laravel_path = file_split.shift()+'laravel\\\\';", 
    "\tvar project_name = file_split.pop().split('\\\\').filter( function(v){return v!==''}).shift();", 
    "\treturn laravel_path + project_name;", 
    "}", 
    "", 
    "function getDotsFromArray(array) {", 
    "\tvar dotsArray = [];", 
    "\tfor (i = 0; i < array.length; i++) {", 
    "\t\tif ( array[i] == '..') {", 
    "\t\t\tdotsArray.push( array[i]);", 
    "\t\t}", 
    "\t}", 
    "\treturn dotsArray;", 
    "}", 
    "", 
    "function removeDotsFromArray(array) {", 
    "\tvar dotsArray = [];", 
    "\tfor (i = 0; i < array.length; i++) {", 
    "\t\tif ( array[i] != '..') {", 
    "\t\t\tdotsArray.push( array[i]);", 
    "\t\t}", 
    "\t}", 
    "\treturn dotsArray;", 
    "}", 
    "", 
    "function selectString() {", 
    "\tif ( komodo.view ) { komodo.view.setFocus(); }", 
    "\t_part = komodo.findPart('macro', 'SELECT string')", 
    "", 
    "\tif (!_part ) {alert(\"Couldn't find a macro called 'SELECT string' when executing macro.\"); return", 
    "\t}", 
    "\tko.projects.invokePart(_part );", 
    "}", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "", 
    "function selectLongWorld() {", 
    "\tif ( komodo.view ) { komodo.view.setFocus(); }", 
    "\t_part = komodo.findPart('macro', 'selectLongWord')", 
    "", 
    "\tko.projects.invokePart(_part );", 
    "}", 
    "openIncludePath();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": 1, 
  "type": "macro"
}