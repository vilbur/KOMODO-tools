{
  "keyboard_shortcut": "Alt+Shift+T", 
  "name": "Logger_v3", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/* Control of Komodo console log", 
    " * WRAPPER FOR require(\"ko/console\") http://docs.komodoide.com/SDK/api/commonjs/console#ko-console", 
    " *", 
    " * EXAMPLES AND TESTS ARE ON END OF FILE", 
    " *", 
    " * TODO:", 
    " * \t1) LOG FUNCTIONS", 
    " * \t\tA) log fn and parameters passed in E.G: Logger.info(arguments, 'fooFnName()') >>> @fn fooFnName() ['param1', 'param2']", 
    " *\t\tB) log return value E.G: Logger.info(return_var, 'fooFnName()') >>> fooFnName() @return  'value'", 
    " *", 
    " *\t2) LOG variable E.G:  @var var_name = 'value'", 
    " *", 
    "*/", 
    "/**", 
    " * Alias for extension", 
    " */", 
    "/** Logger", 
    "*/", 
    "//function LoggerX(){", 
    "//\talert( \"Logger()\" );", 
    "//}", 
    "", 
    "/** Logger_v3", 
    " */", 
    "ko.extensions.Logger_v3 = (function() {", 
    "", 
    "\t/*----   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\tvar console\t= require('ko/console');", 
    "\t//var splitter\t= ' ------------------------------------------------------------- '; // spliter used for splittin lines of log", 
    "\t//var splitter_empty\t= '                                                             ';", 
    "\tvar splitter_short\t= ' ------------ '; // spliter used for splittin lines of log", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction Logger_v3( parentObj, _logOn_init=null ){", 
    "", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\t/*--------   PUBLIC PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.name\t= typeof parentObj === 'object' ? parentObj.constructor.name : parentObj;", 
    "\t\tthis.logger_on\t= true;\t// Logger_v2_old is ON or OFF", 
    "\t\tthis.disabled\t= false;\t// Logger_v2_old is ON or OFF", 
    "\t\tthis.mode\t= 'info';\t// mode of Logger_v2_old 'info|warn|error'", 
    "\t\tthis.parent\t= true;", 
    "", 
    "\t\t/** @var\tobject\tparams passed to require('ko/console') */", 
    "\t\tthis.params = { '_logger': {", 
    "\t\t\t\t'message':\tnull,", 
    "\t\t\t\t'label':\t'',", 
    "\t\t\t\t'forced':\tfalse,", 
    "\t\t\t\t//'parent':\ttrue", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\t/*--------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** setParams", 
    "\t\t */", 
    "\t\tthis.setParams = function( _message=null, _label='' ) {", 
    "\t\t\tthis.params._logger.message\t= _message;", 
    "\t\t\tthis.params._logger.label\t= getLabel(_label);", 
    "\t\t};", 
    "\t\t/** getLabel", 
    "\t\t*/", 
    "\t\tfunction getLabel(_label){", 
    "\t\t\treturn _this.parent && _this._label ? _this.name+'.'+_label : _label;", 
    "\t\t}", 
    "\t\t/** reset main proprieties before next message", 
    "\t\t */", 
    "\t\tfunction _resetParams(){", 
    "\t\t\t_this.params._logger.message\t= null;", 
    "\t\t\t_this.params._logger.label\t= '';", 
    "\t\t\t_this.params._logger.forced \t= false;", 
    "\t\t\t_this.mode\t= 'info';", 
    "\t\t}", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.info = function(_message, label=''){", 
    "\t\t\tthis.setParams(_message, label);", 
    "\t\t\treturn _showLog('info');", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.warn = function(_message, label=''){", 
    "\t\t\tthis.setParams(_message, label);", 
    "\t\t\treturn _showLog('warn');", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.error = function(_message, label=''){", 
    "\t\t\tthis.setParams(_message, label);", 
    "\t\t\treturn _showLog('error');", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.on = function(logger_on=true ){", 
    "\t\t\treturn _setLoggerOn(logger_on);", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t * @return object  this", 
    "\t\t */", 
    "\t\tthis.off = function(logger_on=true ){", 
    "\t\t\treturn _setLoggerOn( logger_on === true ? false : true );", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.force = function(force_on=true){", 
    "\t\t\t_setForceOn(force_on);", 
    "\t\t\treturn this.params._logger.message ? _showLog() : _this;", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.fn = function(fnName, params=[] ){", 
    "\t\t\talert( \"Logger_v3.fn() used in\\n\" + fnName + '()' );", 
    "\t\t\t//var delimeter = params.length > 0 ? '\\n' : '';", 
    "\t\t\t////var delimeter = '';", 
    "\t\t\t//var function_code = eval('this.f = function '+fnName+'('+delimeter+stringifyParametersFlat(params)+delimeter+'){'+", 
    "\t\t\t//\t\t\t\tstringifyParameters(params)+", 
    "\t\t\t//\t\t\t'}');", 
    "\t\t\t////console.info( eval(function_code) );", 
    "\t\t\t//_showLog( function_code  );", 
    "\t\t\t//return this;", 
    "\t\t};", 
    "\t\t/** Logger", 
    "\t\t */", 
    "\t\tthis.clear = function(toggle=true) {", 
    "", 
    "\t\t\tif( toggle !== true ) return this;", 
    "", 
    "\t\t\tvar consoleWidget = document.getElementById('console-widget');", 
    "\t\t\tif(consoleWidget)", 
    "\t\t\t\tif(consoleWidget.contentWindow.document.getElementById('output'))", 
    "\t\t\t\t\tconsoleWidget.contentWindow.document.getElementById('output').innerHTML = '';", 
    "", 
    "\t\t\tconsole.info ( '>>>>> '+ this.name +' <<<<<' );", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** set logOn_init log message on\\off GLOBALY", 
    "\t\t*/", 
    "\t\tthis.logOnInit = function(_logOn_init){", 
    "\t\t\tif( _logOn_init !== null )", 
    "\t\t\t\tLogger_v3.prototype.logOn_init = _logOn_init;", 
    "", 
    "\t\t\tif( Logger_v3.prototype.logOn_init === true )", 
    "\t\t\t\tconsole.info(  '~~~~~ '+ this.name +' <<<<<' );", 
    "\t\t\t\t//_showLog('info', this);", 
    "\t\t\treturn this;", 
    "\t   };", 
    "", 
    "", 
    "\t\t/** set header log message on\\off GOBALY", 
    "\t\t*/", 
    "\t\tthis.header = function(_header_on=false){", 
    "\t\t\t//if( typeof _header_on === 'undefined' )", 
    "\t\t\t//\tLogger_v3.prototype.header_on = false;", 
    "\t\t\t//else if( Logger_v3.prototype.header_on !== _header_on )", 
    "\t\t\t\tLogger_v3.prototype.header_on = _header_on;", 
    "\t\t\t\t//require('ko/console').info( this.name + '.header('+Logger_v3.prototype.header_on+')');", 
    "\t\t\t//\tLogger_v3.prototype.header_\ton = _header_on;", 
    "\t\t\t//require('ko/console').info('HEADER');", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t */", 
    "", 
    "\t\tthis.alert = function (){", 
    "\t\t\tvar console_el = document.getElementById('console-widget').contentWindow;", 
    "\t\t\t////var content = console_el.document.getElementById('output').innerHTML;", 
    "\t\t\tvar output_el\t= console_el.document.getElementById('output');", 
    "\t\t\tvar output\t= output_el.innerHTML;", 
    "\t\t\talert( output );", 
    "\t\t};", 
    "\t\t/** showLog_Disabled", 
    "\t\t*/", 
    "\t\tthis.showLog_Disabled = function (fn_name=''){", 
    "", 
    "\t\t\tvar index_of_logger_name = Logger_v3.prototype.disabled.indexOf(this.name);", 
    "\t\t\tif( index_of_logger_name >= 0 ){", 
    "\t\t\t\tfn_name = (fn_name!=='' && fn_name!==this.name) ? splitter_empty+'\\n\\t\\t\\t\\t\\t\\t\\t'+ fn_name+'()' : ''; // function name in message", 
    "\t\t\t\tconsole.warn( '>>>>> Logger DISABLED in: ' +this.name +'()'+ fn_name +splitter_empty+'\\n\\nDisabled Loggers = '+ JSON.stringify( Logger_v3.prototype.disabled, null, 4) );", 
    "\t\t\t\tdelete Logger_v3.prototype.disabled[index_of_logger_name];", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\t/*--------   PRIVATE METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** _showLog", 
    "\t\t*/", 
    "\t\tfunction _showLog(_mode=null){", 
    "\t\t\tmode\t= _mode ? _mode : _this.mode;", 
    "", 
    "\t\t\t/* ALLOW FORCED MESSAGES EVEN IF logger off */", 
    "\t\t\tif(\t_this.logger_on\t=== true || _this.params._logger.forced === true || mode === 'warn' || mode === 'error' ){", 
    "\t\t\t\t//_removeFunctionsFromObject(); // ACHIVED VIA LESS", 
    "\t\t\t\t_showLog_Header();", 
    "\t\t\t\tconsole[mode]( _this.params );", 
    "\t\t\t\t_resetParams();", 
    "\t\t\t}", 
    "\t\t\treturn _this;", 
    "\t\t}", 
    "", 
    "\t\t///** _removeObjectFunctions // DISABLED - ACHIVED VIA LESS", 
    "\t\t//*/", 
    "\t\t//function _removeFunctionsFromObject(){", 
    "\t\t//\tif(typeof _this.params._logger.message === 'object' && _this.params._logger.message.constructor.name )", 
    "\t\t//\t\tfor ( var key in _this.params._logger.message ){", 
    "\t\t//\t\t\tif( typeof _this.params._logger.message[key] === 'function' )", 
    "\t\t//\t\t\t\tdelete _this.params._logger.message[key];", 
    "\t\t//\t\t}", 
    "\t\t//}", 
    "\t\t/** _showLog_Header", 
    "\t\t*/", 
    "\t\tfunction _showLog_Header(){", 
    "\t\t\t//var fakeClass = {};", 
    "\t\t\tif( Logger_v3.prototype.last_used !== _this.name ){", 
    "\t\t\t\tLogger_v3.prototype.last_used = _this.name;", 
    "\t\t\t\tif (Logger_v3.prototype.header_on === true )", 
    "\t\t\t\t\tconsole.info( splitter_short + _this.name + splitter_short );", 
    "\t\t\t\t\t//fakeClass\t= evalFakeClass('_header');", 
    "\t\t\t\t\t//fakeClass['_'] =splitter_short + _this.name + splitter_short;", 
    "\t\t\t}", 
    "\t\t}", 
    "", 
    "\t\t/** _setLoggerOn", 
    "\t\t*/", 
    "\t\tfunction _setLoggerOn( logger_on ){", 
    "\t\t\t//console.info('_setLoggerOn '+logger_on);", 
    "\t\t\t_this.logger_on \t= logger_on;", 
    "\t\t\treturn _this;", 
    "\t\t}", 
    "", 
    "\t\t/** _setForceOn", 
    "\t\t*/", 
    "\t\tfunction _setForceOn( force_on ){", 
    "\t\t\t_this.params._logger.forced\t= _this.logger_on===false && force_on ? true : false ;", 
    "\t\t\treturn _this;", 
    "\t\t}", 
    "", 
    "\t\t/*----   EXECUTE DEFAULT METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.logOnInit(_logOn_init);", 
    "\t\t//this.setOptions();", 
    "\t}", 
    "", 
    "\t/*----   PROTOTYPE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t//Logger_v3.prototype.header_on\t= null;", 
    "\tLogger_v3.prototype.disabled\t= [];", 
    "\tLogger_v3.prototype.logOn_init\t= null;", 
    "\t/*--------   PROTOTYPE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/** disable log message on\\off GLOBALY for every instance", 
    "\t */", 
    "\tLogger_v3.prototype.disable = function(disabled_in){", 
    "\t\tif (disabled_in)", 
    "\t\t\tLogger_v3.prototype.disabled.push(this.name);", 
    "\t\telse", 
    "\t\t\talert( \"Logger_v3.disabled() - Parameter is not Defined\" );", 
    "\t\t\t//delete Logger_v3.prototype.disabled[this.name];", 
    "\t\tthis.showLog_Disabled(disabled_in);", 
    "\t\treturn this;", 
    "\t};", 
    "", 
    "\t/*--------   END   -------------------------------------------------------------------------------------------------*/", 
    "\treturn Logger_v3;", 
    "})();", 
    "", 
    "", 
    "/*---------------------------------------------------------------------------------------------------------\t*/", 
    "/*\t*/", 
    "/*        TESTS\t*/", 
    "/*\t*/", 
    "/*---------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "/*--------   TestLoggerChild_A   -------------------------------------------------------------------------------------------------*/", 
    "ko.extensions.TestLoggerChild_A = (function() {", 
    "\tfunction TestLoggerChild_A(){", 
    "\t\tvar Logger_v3\t=  new ko.extensions.Logger_v3(this, false);", 
    "\t\tvar TestLoggerChild_A_sub\t=  new ko.extensions.TestLoggerChild_A_sub();\t// logs are divided by Logger.name in 'header' E.G: \" ------------ TestLoggerChild_A ------------ \"", 
    "\t\tthis.name\t= 'TestLoggerChild_A';", 
    "", 
    "\t\tthis.childMethod = function(){", 
    "\t\t\tLogger_v3.info('TestLoggerChild_A.childMethod()','Test');", 
    "\t\t\tTestLoggerChild_A_sub.childMethod()", 
    "\t\t};", 
    "\t\t//Logger_v3.info('TestLoggerChild_A','Test');", 
    "\t\tLogger_v3.info(this, 'TestLoggerChild_A');", 
    "\t\tTestLoggerChild_A_sub.childMethod();", 
    "\t}", 
    "\treturn TestLoggerChild_A;", 
    "})();", 
    "", 
    "/*--------   TestLoggerChild_A   -------------------------------------------------------------------------------------------------*/", 
    "ko.extensions.TestLoggerChild_A_sub = (function() {", 
    "\tfunction TestLoggerChild_A_sub(){", 
    "\t\tvar Logger_v3\t=  new ko.extensions.Logger_v3(this, false);", 
    "\t\tthis.name\t= 'TestLoggerChild_A_sub';", 
    "\t\tthis.childMethod = function(){", 
    "\t\t\tLogger_v3.info(this,'TestLoggerChild_A_sub.childMethod()');", 
    "\t\t};", 
    "\t}", 
    "\treturn TestLoggerChild_A_sub;", 
    "})();", 
    "", 
    "/*--------   TestLoggerParent   -------------------------------------------------------------------------------------------------*/", 
    "ko.extensions.TestLoggerParent = (function() {", 
    "\tfunction TestLoggerParent(){", 
    "\t\tvar Logger_v3 =  new ko.extensions.Logger_v3(this, false)\t// new Logger class, log on init == false", 
    "\t\t//.logOnInit(true);\t// log on init == true", 
    "\t\t//.info('First Message');", 
    "\t\tthis.string_short\t= 'Lorem Ipsum is simply dummy text';", 
    "\t\tthis.string_long\t= 'Lorem Ipsum is simply dummy text of the prink.Lorem Ipsum is simply dummy text.';", 
    "\t\tthis.intArray\t= [ 1, 2, 3, 'i_a4','i_a1', 'i_a2' ];", 
    "\t\tthis.testObject\t= {'string_short': this.string_short, 'string_long': this.string_long, 'boolean':true, subobj: {'subobj_key':'subobj_value'}, array: this.intArray};", 
    "\t\tthis.testArray\t= ['item_a1', 'item_a2', 'item_a3', 'item_a4', 'item_a5', 'item_a6', this.testObject, this.intArray];", 
    "\t\tthis.testObject.constructor.name = 'testObject';", 
    "", 
    "\t\tLogger_v3.clear()\t// clear log: \">>>>> TestLoggerParent <<<<<\"", 
    "\t\t//.info('Message Info()')   \t// log: \"Message Info()\"", 
    "\t\t.header(true) \t// turn log on \" ------------ TestLoggerParent ------------ \"", 
    "\t\t//.header(false)\t// Turn Header Logger.name off", 
    "\t\t//.info(true, 'Boolean')\t// log: 999", 
    "\t\t.info(this.string_short, 'Short string')\t// log: 999", 
    "\t\t//.info(this.string_long, 'Long string')\t// log: 999", 
    "\t\t//.info(333, 'Test_variable')\t// log: 999", 
    "\t\t//.info(999)    \t// log: 999", 
    "\t\t.info(this.intArray)     \t// log: [0: \"item_a1\", 1: \"item_a2\", 2: \"item_a3\", 3: \"item_a4\", ..]", 
    "\t\t//.info(this.testArray, 'testArray')\t// log: [0: \"item_a1\", 1: \"item_a2\", 2: \"item_a3\", 3: \"item_a4\", ..]", 
    "\t\t.info(this.testObject)\t// log: {key1: \"objValue1 .., key2: \"objValue2 .., subobj: Object}", 
    "\t\t//.info(this.testObject, 'testObject')\t// log: {key1: \"objValue1 .., key2: \"objValue2 .., subobj: Object}", 
    "\t\t//.off()   \t// Turn Logger off", 
    "\t\t//.force().info('SHOWN EVEN OFF', 'INFO FORCED')\t// log: \"FORCED Message - SHOWN EVEN OFF\"", 
    "\t\t//.warn('SHOWN EVEN OFF', 'WARN')\t// log: \"WARN Message - SHOWN EVEN OFF\"", 
    "\t\t//.error('SHOWN EVEN OFF', 'ERROR')\t// log: \"ERROR Message - SHOWN EVEN OFF\"", 
    "", 
    "\t\t/* child class containing another instance of Logger */", 
    "\t\t//var TestLoggerChild_A =  new ko.extensions.TestLoggerChild_A();\t// logs are divided by Logger.name in 'header' E.G: \" ------------ TestLoggerChild_A ------------ \"", 
    "", 
    "\t\tthis.loggerDisable = function(){", 
    "\t\t//\tLogger_v3.disable('this.loggerDisable')    // log:", 
    "\t\t//\t.info('INFO\tSHOWN', 'Logger DISABLED')\t// log: \"FORCED Message - SHOWN EVEN OFF\"", 
    "\t\t//\t.warn('WARN\tSHOWN', 'Logger DISABLED')\t// log: \"WARN SHOWN EVEN if Logger DISABLED\"", 
    "\t\t//\t.error('ERROR\tSHOWN', 'Logger DISABLED');\t// log: \"ERROR Message - SHOWN EVEN OFF\"", 
    "\t\t};", 
    "\t\tthis.loggerDisable();", 
    "", 
    "\t\t///** testForce", 
    "\t\t// */", 
    "\t\tthis.testForce = function() {", 
    "\t\t//\tLoggervar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(true ) : require('ko/console');", 
    "\t\t_v3.clear()", 
    "\t\t//\tLogger_v3.info('shown', 'NORMAL');", 
    "\t\t//\tLogger_v3.off().info('message', 'NOT SHOWN');", 
    "\t\t//\tLogger_v3.info('message', 'FORCED').force();", 
    "\t\t//\tLogger_v3.info('message', 'NORMAL');", 
    "\t\t};", 
    "\t\t//this.testForce();", 
    "\t}", 
    "\treturn TestLoggerParent;", 
    "})();", 
    "/* RUN TEST */", 
    "//var TestLoggerParent\t= new ko.extensions.TestLoggerParent();", 
    "//", 
    "//var testArray\t= ['item_a1', 'item_a2', 'item_a3', 'item_a4', 'item_a5', 'item_a6', this.testObject, this.intArray];", 
    "//", 
    "//var Logger_v3 =  new ko.extensions.Logger_v3(this, false)", 
    "//Logger_v3.clear().info(testArray, 'testArray')"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}