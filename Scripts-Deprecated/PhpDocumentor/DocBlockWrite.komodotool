{
  "keyboard_shortcut": "", 
  "name": "DocBlockWrite", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " */", 
    "ko.extensions.DocBlockWrite = (function()", 
    "{", 
    "\t/*", 
    "\t\tCONSTRUCT", 
    "\t*/", 
    "\tfunction DocBlockWrite()", 
    "\t{", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('DocBlockWrite.js').off(false);", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar currentPos\t= scimoz.currentPos;", 
    "\t\tvar doc_block_tags\t= [];", 
    "\t\tvar lines\t= [];", 
    "\t\tvar doc_block_string;", 
    "\t\tvar DocBlock;", 
    "\t\t/*--------   PUBLIC PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*--------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** write", 
    "\t\t */", 
    "\t\tthis.write = function(_DocBlock)", 
    "\t\t{", 
    "\t\t\tLogger.info(_DocBlock.tags, 'DocBlockWrite.write()');", 
    "\t\t\tDocBlock\t= _DocBlock;", 
    "\t\t\tdoc_block_tags\t= _getDockBlockTags();", 
    "\t\t\tdoc_block_string\t= _getDocBlockString();", 
    "\t\t\tinsertSnippet(doc_block_string);", 
    "", 
    "\t\t};", 
    "\t\t/*--------   PRIVATE METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/**", 
    "\t\t *\tSTUCTURE OF doc_block_tags object", 
    "\t\t *", 
    "\t\t * var doc_block_tags = [", 
    "\t\t *\t'summary':[ This line of summary of Doc Block ],       // one line comment item", 
    "\t\t * \t'description':[                                        // multiline comment, array of line strings", 
    "\t\t * \t\t'This is first line of description',", 
    "\t\t * \t\t'this is second line of description'", 
    "\t\t * \t],", 
    "\t\t * \t'@param':[                                             // multiple @tag line objects", 
    "\t\t * \t\t{tag:@param, type:string, name:param_1},", 
    "\t\t * \t\t{tag:@param, type:string, name:param_2}", 
    "\t\t * \t],", 
    "\t\t * \t'@return':[                                            // single @tag object for return", 
    "\t\t * \t\t{tag:@return, type:string, description:'foo'}", 
    "\t\t * \t]", 
    "\t\t * ]", 
    "\t\t *", 
    "\t\t * @return\tmultiarray\tof objects representing DocBlock", 
    "\t\t */", 
    "\t\tfunction _getDockBlockTags()", 
    "\t\t{", 
    "", 
    "\t\t\tvar doc_block_tags\t= [];", 
    "\t\t\tvar tag_keys\t= Object.keys(DocBlock.tags);", 
    "\t\t\tLogger.info(tag_keys, '_getDockBlockTags.tag_keys');", 
    "", 
    "\t\t\tfor(t=0; t<tag_keys.length;t++) {", 
    "\t\t\t\tvar tag\t= tag_keys[t];", 
    "\t\t\t\tvar tag_data\t= DocBlock.tags[tag];", 
    "", 
    "\t\t\t\tif (tag.match(/summary|description/gi) !== null )", 
    "\t\t\t\t\tdoc_block_tags.push(tag_data);", 
    "\t\t\t\telse", 
    "\t\t\t\t\tdoc_block_tags.push( _getObjetValues(tag_data) );", 
    "\t\t\t\t\t//doc_block_tags.push( _getObjetValues(tag_data) );", 
    "\t\t\t\t\t//doc_block_tags = doc_block_tags.concat( _getObjetValues(tag_data) );", 
    "\t\t\t}", 
    "\t\t\tLogger.info(doc_block_tags, 'DocBlockWrite.doc_block_tags');", 
    "\t\t\treturn doc_block_tags;", 
    "\t\t};", 
    "", 
    "\t\t/** _getObjetValues", 
    "\t\t*/", 
    "\t\tfunction _getObjetValues(tag_data)", 
    "\t\t{", 
    "\t\t\treturn tag_data.map(function(tag_obj){", 
    "\t\t\t\treturn Object.keys(tag_obj).map(function(key){return tag_obj[key];});", 
    "\t\t\t});", 
    "\t\t}", 
    "", 
    "\t\t/** join tag blocks to docBlock string", 
    "\t\t *", 
    "\t\t * @return\tstring of tag block", 
    "\t\t*/", 
    "\t\tfunction _getDocBlockString()", 
    "\t\t{", 
    "\t\t\treturn doc_block_tags.map(function(tag_block){", 
    "\t\t\t\treturn _joinTagLines(tag_block);", 
    "\t\t\t}).join('\\n* \\n');", 
    "\t\t}", 
    "", 
    "\t\t/** join multiple tags of SAME type to block", 
    "\t\t *", 
    "\t\t * E.G:\t@param type param1 first  parameter", 
    "\t\t * \t@param type param2 second parameter", 
    "\t\t *", 
    "\t\t * @return\tstring\tblock of lines per tag", 
    "\t\t */", 
    "\t\tfunction _joinTagLines(tag_block)", 
    "\t\t{", 
    "\t\t\treturn tag_block.map(function(tag_line){", 
    "\t\t\t\treturn _joinTagWords(tag_line);", 
    "\t\t\t}).join('\\n');", 
    "\t\t}", 
    "", 
    "\t\t/** join words of tag line", 
    "\t\t *", 
    "\t\t * E.G: @param type param1 these words are joined", 
    "\t\t *", 
    "\t\t * @return\tstring\ttag line", 
    "\t\t*/", 
    "\t\tfunction _joinTagWords(tag_line)", 
    "\t\t{", 
    "\t\t\treturn '* ' + (typeof tag_line === 'object' ? tag_line.join('\\t') : tag_line);", 
    "\t\t}", 
    "", 
    "\t\t/** getIndentation", 
    "\t\t*/", 
    "\t\tfunction getIndentation()", 
    "\t\t{", 
    "\t\t\tvar line_start_pos\t= scimoz.positionFromLine(scimoz.lineFromPosition(currentPos));", 
    "\t\t}", 
    "\t\t/** insertSnippet", 
    "\t\t*/", 
    "\t\tfunction insertSnippet(doc_block_string)", 
    "\t\t{", 
    "", 
    "\t\t\tvar fakeSnippet = {", 
    "\t\t\t\t\thasAttribute: function(name) {", 
    "\t\t\t\t\t\treturn name in this;", 
    "\t\t\t\t\t},", 
    "\t\t\t\t\tgetStringAttribute: function(name) {", 
    "\t\t\t\t\t\treturn this[name];", 
    "\t\t\t\t\t},", 
    "\t\t\t\t\tindent_relative: \"true\",", 
    "\t\t\t\t\tname:\t\"autoquote snippet\",", 
    "\t\t\t\t\tvalue:\t'/*' + doc_block_string +'\\n*/'", 
    "\t\t\t\t};", 
    "\t\t\tko.projects.snippetInsert(fakeSnippet);", 
    "", 
    "\t\t}", 
    "\t}", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn DocBlockWrite;", 
    "})();", 
    "", 
    "", 
    "//var Logger\t= new ko.extensions.Logger_v3('DocBlockWrite.js').clear('');", 
    "//", 
    "//", 
    "//var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "//if(current_filename === 'TestPhpDoc.js'){", 
    "//", 
    "//\tvar DockBlockX = new ko.extensions.ParseDocBlock(", 
    "//\t\t'\t/** Summary Lorem ipsum luctus habitasse ac aenean donec ultrices maecenas arcu.'+", 
    "//\t\t'\\n\t*'+", 
    "//\t\t'\\n\t* A Description Lorem ipsum luctus habitasse ac aenean'+", 
    "//\t\t'\\n\t*\tB donec ultrices maecenas arcu, risus primis sodales'+", 
    "//\t\t'\\n\t*\tC urna feugiat platea ultrices maecenas arcu.'+", 
    "//\t\t'\\n\t* \t'+", 
    "//\t\t'\\n\t* @param\tstring\t$param1\tparameter to function'+", 
    "//\t\t'\\n\t* @param\tboolean\t$param2\ttrue\\false parameter to function'+", 
    "//\t\t'\\n\t*'+", 
    "//\t\t'\\n\t* @return string multiplied param1'+", 
    "//\t\t'\\n\t*'+", 
    "//\t\t'\\n\t* @example ko.extensions.TestPhpDoc(\"foo@String\", true)'+", 
    "//\t\t'\\n\t* '+", 
    "//\t\t'\\n\t*/'", 
    "//\t);", 
    "//", 
    "//", 
    "//\t//Logger.info(DockBlockX);", 
    "//", 
    "//\tvar DocBlockWrite\t= new ko.extensions.DocBlockWrite();", 
    "//\tDocBlockWrite.write(DockBlockX);", 
    "//}"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}