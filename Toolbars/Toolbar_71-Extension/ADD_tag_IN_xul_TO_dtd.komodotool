{
  "keyboard_shortcut": "", 
  "name": "ADD <tag> IN *.xul  TO *.dtd", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "trigger_enabled": false, 
  "value": [
    "", 
    "var koEditor\t= require(\"ko/editor\");", 
    "var koFile\t= require(\"ko/file\");", 
    "", 
    "var file_current_path\t= ko.views.manager.currentView.koDoc.file.path;", 
    "var file_current_dir\t= koFile.dirname(file_current_path);", 
    "var file_current_basename\t= koFile.basename(file_current_path);", 
    "", 
    "var file_current_extension\t= file_current_basename.split(/\\./g).pop().toLowerCase();", 
    "var file_current_name\t= file_current_basename.split(/\\./g).shift();", 
    "", 
    "if( file_current_extension!=='xul' )", 
    "{", 
    "\talert( 'Current file is not *.xul' ); ", 
    "\treturn; ", 
    "}", 
    "", 
    "", 
    "/** Search file or dir in path backwards", 
    " * ", 
    " * @example fileSearch( 'C:\\dir\\subdir', 'file.txt' )\tSearch 'file.txt' in 'C:\\dir\\subdir', C:\\dir' and 'C:\\'", 
    " * @example fileSearch( 'C:\\dir\\subdir', /.txt/g )\tSearch '.txt' files ", 
    " * ", 
    " * @param\tstring\tpath\tPath where to search ", 
    " * @param\tstring|RegEx\tsearch\tFile or dir to search", 
    " *", 
    " * @return\tstring|null\tPath where of found OR null if not found", 
    " */", 
    "var fileSearch = function( path, search )", 
    "{", 
    "\tvar koFile\t= require(\"ko/file\"); ", 
    "\tvar path_split\t= path.split('\\\\');", 
    "\tvar found_path\t= null;", 
    "\t", 
    "\tif( search.constructor.name !== 'RegExp' )", 
    "\t\tsearch = new RegExp(search, 'gi');", 
    "\t", 
    "\t/** fileExists", 
    "\t*/", 
    "\tfunction fileExists()", 
    "\t{", 
    "\t\tvar dir_path\t= path_split.join('\\\\') + '\\\\';", 
    "\t\tvar list\t= koFile.list(dir_path);", 
    "\t\t", 
    "\t\tfor(var i=0; i<list.length;i++)", 
    "\t\t\tif( list[i].match(  search ) && ! found_path  )", 
    "\t\t\t\tfound_path = dir_path + list[i];", 
    "", 
    "\t\treturn  found_path !== null;", 
    "\t}", 
    "\t", 
    "\twhile ( ! fileExists() && path_split.length > 1 )", 
    "\t\tpath_split.pop();", 
    "", 
    "\treturn found_path ? found_path : null;", 
    "\t", 
    "};", 
    "/** RegEx match all", 
    "\t@return array of all matches", 
    " */", 
    "var matchAll = function( string, regEx )", 
    "{", 
    "\tvar matches_all\t= [];", 
    "\tvar last_match_end\t= 0; // end position of last match", 
    "\t//console.log( string );", 
    "\twhile((match = new RegExp(regEx.source, regEx.flags).exec(string)) !== null)", 
    "\t{", 
    "\t\tstring\t= string.substring(match.index + match[0].length); //this is not the same as /g", 
    "\t\tmatch.index\t= last_match_end = last_match_end + match.index + match[0].length;", 
    "\t\tmatches_all.push(match);", 
    "\t}", 
    "\treturn matches_all;", 
    "};", 
    "", 
    "/** Get locale *.dtd file of current *.xul file with same name", 
    " * ", 
    " * @example If current file 'content\\xul\\pane.xul' Then try find 'local\\en-US\\pane.dtd'", 
    " * ", 
    " */", 
    "var local_file = (function()", 
    "{", 
    "\tvar manifest_path\t= fileSearch( koFile.dirname(file_current_dir), 'chrome.manifest');", 
    "\tvar extension_dir\t= koFile.dirname(manifest_path);", 
    "\t", 
    "\tvar local_path\t= extension_dir+'\\\\locale\\\\en-US\\\\';", 
    "\tvar local_file\t= local_path + file_current_name +'.dtd';", 
    "\t", 
    "\treturn koFile.exists(local_file) ? local_file : null;", 
    "\t\t", 
    "})(); ", 
    "", 
    "/** Get closest tag to current position", 
    " *", 
    " *  @example <button label=\"\">", 
    " */", 
    "var closest_tag = (function()", 
    "{", 
    "\tvar file_content\t= koEditor.getValue();", 
    "\tvar current_pos\t= koEditor.getCursorPosition('absolute');", 
    "\t", 
    "\tvar control_start_matches\t= matchAll( file_content.substring( 0, current_pos ), /</gi );", 
    "\tvar control_start_pos\t= control_start_matches.pop().index -1;", 
    "\t\t", 
    "\tvar control_end_match\t= /[^>]+/gi.exec(file_content.substring( control_start_pos ));", 
    "\t", 
    "\treturn control_end_match.pop();", 
    "", 
    "})(); ", 
    "", 
    "/** get tag name", 
    " * @example '<button>' is 'button'", 
    " * ", 
    " * @return\tstring\tType of tab", 
    " */", 
    "var tag_name = (function()", 
    "{", 
    "\tvar tag_name_match\t= closest_tag ? /<([A-Z]+)/gi.exec(closest_tag) : null;", 
    "\t", 
    "\treturn tag_name_match ? tag_name_match.pop() : null;", 
    "})();", 
    "", 
    "/** fake_snippet_value", 
    " */", 
    "var fake_snippet_value = (function()", 
    "{", 
    "\tvar id_match\t= /id=['\"]([^'\"]+)['\"]/gi.exec(closest_tag);", 
    "\tvar id\t= id_match?id_match.pop() : 'name';", 
    "\t", 
    "\treturn '<!ENTITY [[%tabstop:'+tag_name+']].[[%tabstop:'+id+']]\t\"[[%tabstop:'+ id.replace(/[-_]/gi, ' ') +']]\">[[%tabstop:]]';", 
    "})();", 
    "", 
    "/** insertEntitySnippet", 
    " */", 
    "var insertEntitySnippet = function()", 
    "{", 
    "\t/** ifLineIsEmpty", 
    "\t */", 
    "\tvar ifLineIsEmpty = function()", 
    "\t{", 
    "\t\treturn koEditor.getLine(koEditor.getLineNumber()).match(/^\\s*$/gi) !== null;", 
    "\t}; ", 
    "\t", 
    "\tkoEditor.goDocEnd();", 
    "", 
    "\tif( ! ifLineIsEmpty() )", 
    "\t\tko.views.manager.currentView.scimoz.newLine();", 
    "\t", 
    "\tvar entity_snippet = {", 
    "\t\thasAttribute: function(name) {", 
    "\t\t\treturn name in this;", 
    "\t\t},", 
    "\t\tgetStringAttribute: function(name) {", 
    "\t\t\treturn this[name];", 
    "\t\t},", 
    "\t\tname:\t\"entity snippet\",", 
    "\t\tindent_relative: \"true\",", 
    "\t\tvalue:\tfake_snippet_value", 
    "\t};", 
    "\tko.projects.snippetInsert(entity_snippet);", 
    "\t", 
    "}; ", 
    "", 
    "//console.log(  'closest_tag: ' + closest_tag );", 
    "//console.log(  'tag_name: ' + tag_name );", 
    "", 
    "ko.open.URI(local_file);", 
    "setTimeout( function(){", 
    "\tinsertEntitySnippet();", 
    "}, 500);", 
    "//console.log(  closest_tag );", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/tag.png"
}