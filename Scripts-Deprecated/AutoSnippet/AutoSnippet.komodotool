{
  "keyboard_shortcut": "", 
  "name": "AutoSnippet", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    " /** Abbreviations", 
    "  */", 
    " ko.extensions.Abbreviations = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction Abbreviations(){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar koFile\t= require(\"ko/file\");", 
    "\t\tvar parsed_text\t= [];", 
    "\t\t//var snippet_data_source = {", 
    "\t\t//\t\tname:\t'',", 
    "\t\t//\t\tvalue:\t'',", 
    "\t\t//\t\tset_selection: false,", 
    "\t\t//\t\tversion: \"1.0.12\",", 
    "\t\t//\t\tauto_abbreviation: false,", 
    "\t\t//\t\tindent_relative: true,", 
    "\t\t//\t\ttype: \"snippet\",", 
    "\t\t//\t\ttreat_as_ejs: true", 
    "\t\t//\t};", 
    "\t\tthis.rx_parse_snippet\t= null;", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\tthis.folders\t= {};", 
    "", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "\t\t/** parse text by given regex", 
    "\t\t *  cast matches to snippet data", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.parseText = function(string, regexes) {", 
    "\t\t\tthis.regexes\t= regexes;", 
    "\t\t\t//this.rx_parse_snippet = rx_parse_snippet;", 
    "\t\t\tparsed_text = string.match(this.regexes.text);", 
    "\t\t\tLogger.info(parsed_text, 'parsed_text');", 
    "\t\t\tthis.parseSnippets();", 
    "\t\t\t_createFiles();", 
    "\t\t};", 
    "\t\t", 
    "", 
    "\t\t/** parseSnippets", 
    "\t\t */", 
    "\t\tthis.parseSnippets = function() {", 
    "", 
    "\t\t\tfor(var t=0; t<parsed_text.length;t++) {", 
    "\t\t\t\tvar parsed_tool = parsed_text[t];", 
    "\t\t\t\t//Logger.info(parsed_tool, 'parsed_tool');", 
    "\t\t\t\tvar folder_name\t= getFolderName(parsed_tool);", 
    "\t\t\t\t//Logger.info(folder_name, 'folder_name');", 
    "", 
    "\t\t\t\tif( typeof this.folders[folder_name] !== 'object' ) this.folders[folder_name]=[];", 
    "\t\t\t\tthis.folders[folder_name].push( getSnippetPart(parsed_tool) );", 
    "", 
    "\t\t\t}", 
    "\t\t\tLogger.info(this.folders, 'this.folders');", 
    "\t\t};", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** getFolderName", 
    "\t\t*/", 
    "\t\tfunction getFolderName(parsed_tool){", 
    "\t\t\treturn parsed_tool.replace(_this.regexes.folder[0] , _this.regexes.folder[1]).trim();", 
    "\t\t}", 
    "\t\t/** getSnippetPart", 
    "\t\t*/", 
    "\t\tfunction getSnippetPart(parsed_tool){", 
    "\t\t\tvar snippet\t= ko.toolbox2.createPartFromType('snippet');", 
    "\t\t\tsnippet.name\t= parsed_tool.replace(_this.regexes.name[0] , _this.regexes.name[1]).trim();", 
    "\t\t\tsnippet.value\t= parsed_tool.replace(_this.regexes.value[0] , _this.regexes.value[1]).trim();", 
    "\t\t\treturn snippet;", 
    "\t\t}", 
    "\t\t/** _createFiles", 
    "\t\t*/", 
    "\t\tfunction _createFiles(){", 
    "\t\t\tLogger.info(_this.folders, '_this.folders');", 
    "\t\t\t//Logger.info(ko.views.manager.currentView.koDoc.file.URI, 'ko.views.manager.currentView.koDoc.file.URI');", 
    "", 
    "\t\t\tvar match_komodotool\t= /^(?!file)([^\\d]+)\\d*:\\/\\/\\d+\\/(\\w+).(?:js|komodotool)/gi.exec(ko.views.manager.currentView.koDoc.file.URI);", 
    "", 
    "\t\t\tvar path_current_file\t= match_komodotool ? (komodo.findPart(match_komodotool[1], match_komodotool[2] )).path : ko.views.manager.currentView.koDoc.file.path;", 
    "\t\t\tLogger.info(path_current_file, 'path_current_file');", 
    "", 
    "\t\t\tvar path_curent_dir\t= path_current_file.replace(/[\\\\\\/][^\\\\\\/]+$/, '\\\\\\\\');", 
    "\t\t\tLogger.info(path_curent_dir, 'path_curent_dir');", 
    "", 
    "\t\t\t//var part_parent_dir = ko.extensions.FindPart(path_curent_dir+'.folderdata');", 
    "\t\t\t//Logger.info( part_parent_dir.path, 'part_parent_dir');", 
    "\t\t\t//var newMacro = ko.toolbox2.createPartFromType('folder');", 
    "", 
    "\t\t\t//var folders_keys = Object.keys(_this.folders);", 
    "\t\t\t//for(f=0; f<folders_keys.length;f++) {", 
    "\t\t\t//\tvar folder = folders_keys[f];", 
    "\t\t\t//", 
    "\t\t\t//", 
    "\t\t\t////\t//var snippets = _this.folders[folder];", 
    "\t\t\t////\t//Logger.info(folder, 'folder');", 
    "\t\t\t//\t createFolder(part_parent_dir, folder);", 
    "\t\t\t////", 
    "\t\t\t//}", 
    "", 
    "\t\t}", 
    "", 
    "\t\t/** createFolder", 
    "\t\t*/", 
    "\t\tfunction createFolder(part_parent_dir, folder_name){", 
    "\t\t\t//Logger.info(path+'\\\\'+folder, 'createFolder()');", 
    "\t\t\t//var path_dir\t= part_parent_dir.path.replace(/[\\\\\\/]+/gi, '\\\\\\\\') +'\\\\\\\\'+folder_name;", 
    "\t\t\t//Logger.info(path_dir, 'path_dir');", 
    "\t\t\t////koFile.create(path_dir, '.folderdata');", 
    "\t\t\t//var folder_data = {", 
    "\t\t\t//  //\"id\": \"1012\",", 
    "\t\t\t//  \"type\": \"folder\",", 
    "\t\t\t//  \"name\": folder", 
    "\t\t\t//}", 
    "\t\t\t////var koFile\t= require(\"ko/file\");", 
    "\t\t\t//var runSvc\t= Components.classes[\"@activestate.com/koRunService;1\"].createInstance(Components.interfaces.koIRunService);", 
    "\t\t\t//ko.run.output.endSession();", 
    "\t\t\t//var process = runSvc.RunAndNotify('echo '+JSON.stringify(folder_data) +'>'+path_dir+'\\\\.folderdata', \"\", \"\" , \"\" );", 
    "/*\t\t\tLogger.info(part_parent_dir.path, 'part_parent_dir');", 
    "\t\t\tLogger.info(folder_name, 'folder_name');", 
    "\t\t\tvar folder\t= ko.toolbox2.createPartFromType('folder');", 
    "\t\t\tfolder.name\t= folder_name;", 
    "\t\t\tLogger.info(folder.type, 'folder.type');", 
    "\t\t\t*/", 
    "\t\t\t//require('ko/console').info('c:\\\\GoogleDrive\\\\Programs\\\\Core\\\\Komodo\\\\AppData\\\\10.1\\\\tools\\\\Classes\\\\Abbreviations\\\\test');", 
    "", 
    "\t\t\t//koFile.mkpath(path_dir);", 
    "\t\t\t//koFile.mkpath('C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\10.1\\\\tools\\\\Abbreviations\\\\unsetBookmarkByLine');", 
    "\t\t\t//koFile.mkpath('c:\\\\GoogleDrive\\\\Programs\\\\Core\\\\Komodo\\\\AppData\\\\10.1\\\\tools\\\\Classes\\\\Abbreviations\\\\test');", 
    "\t\t\t//ko.toolbox2.add_folder( folder, part_parent_dir);", 
    "\t\t}", 
    "", 
    "", 
    "\t\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn Abbreviations;", 
    " })();", 
    "", 
    "", 
    "// var string_test = 'Unset breakpoint by Marker handle'+", 
    "//\t\t\t\t\t'\\nparam {number} A marker handle'+", 
    "//\t\t\t\t\t'\\nunsetBookmarkByLine'+", 
    "//\t\t\t\t\t'\\nrequire(\"ko/editor\").unsetBookmarkByLine(line)'+", 
    "//\t\t\t\t\t'\\nRemove a bookmark at a given line'+", 
    "//\t\t\t\t\t'\\nArguments'+", 
    "//\t\t\t\t\t'\\n<number> line - number. default is current line Note, if using this'+", 
    "//\t\t\t\t\t'\\nbookmarkExists'+", 
    "//\t\t\t\t\t'\\nrequire(\"ko/editor\").bookmarkExists(line)'+", 
    "//\t\t\t\t\t'\\nCheck if there is already a bookmark set on a given line'+", 
    "//\t\t\t\t\t'\\nArguments'+", 
    "//\t\t\t\t\t'\\n<number> line - number, defaults to current line'+", 
    "//\t\t\t\t\t'\\n_posFormat'+", 
    "//\t\t\t\t\t//'\\nrequire(\"ko/editor\")._posFormat(positions, format)'+", 
    "//\t\t\t\t\t//'\\nConvert the given position(s) into the given format, regardless of what format the input is in'+", 
    "//\t\t\t\t\t//'\\nArguments'+", 
    "//\t\t\t\t\t//'\\n<Array | Object | Int> positions - Either a single position or an array of positions'+", 
    "//\t\t\t\t\t//'\\n<String> format - Convert the given position(s) into the given format, regardless of what format the input is in'+", 
    "//\t\t\t\t\t//'\\nReturns: <Array | Object | Int> Returns a single position or an array of positions if the input was an array'+", 
    "//\t\t\t\t\t//'\\n_posToRelative'+", 
    "//\t\t\t\t\t//'\\nrequire(\"ko/editor\")._posToRelative(abs)'+", 
    "//\t\t\t\t\t//'\\nConverts an absolute position to a relative position'+", 
    "//\t\t\t\t\t//'\\nArguments'+", 
    "//\t\t\t\t\t//'\\n<Int> abs - Converts an absolute position to a relative position'+", 
    "//\t\t\t\t\t//'\\nReturns: <Object> {line, ch}'+", 
    "//\t\t\t\t\t//'\\n_posToAbsolute'+", 
    "//\t\t\t\t\t//'\\nrequire(\"ko/editor\")._posToAbsolute(pos)'+", 
    "//\t\t\t\t\t//'\\nConverts a relative position to an absolute position'+", 
    "//\t\t\t\t\t//'\\nArguments'+", 
    "//\t\t\t\t\t//'\\n<Object> pos - {line, ch}'+", 
    "//\t\t\t\t\t//'\\nReturns: <Int>'+", 
    "//\t\t\t\t\t'\\nDocumentation Archive (older versions)';", 
    "//", 
    "//", 
    "//", 
    "//var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "//var parse_text = current_filename=='Abbreviations.js' ? string_test : require(\"ko/editor\").getValue() ;", 
    "////require('ko/console').info(current_filename);", 
    "//var Abbreviations\t= new ko.extensions.Abbreviations();", 
    "//Abbreviations.parseText(parse_text,{", 
    "//\t\ttext:\t/require\\(\"ko\\/\\w+\"\\).*(?:[\\r\\n])/gi,", 
    "//\t\tfolder:\t[/require\\(\"ko\\/\\w+\"\\).(\\w+).*/gi, '$1' ],", 
    "//\t\tname:\t[/require\\(\"ko\\/\\w+\"\\).(\\w+).*/gi, '$1' ],", 
    "//\t\tvalue:\t[/require\\(\"ko\\/\\w+\"\\).(\\w+)\\((.*)\\)/gi, 'test\tkoEditor.$1([[%tabstop:$2]])[[%soft:;]][[%tabstop:]]' ],", 
    "//});", 
    "//", 
    "//"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}