{
  "keyboard_shortcut": "Ctrl+Alt+O", 
  "name": "OPEN included path", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "", 
    "function openIncludePath() {", 
    "\tlang              = ko.views.manager.currentView.languageObj.name;", 
    "\tselectedText      = getSelectedText();", 
    "\tcurrent_file_path = ko.views.manager.currentView.koDoc.file.path;", 
    "\t//alert(current_file_path);", 
    "\tcurrent_fileName  = current_file_path.split(/(\\\\|\\/)/g).pop();", 
    "\t//alert( current_fileName );", 
    "\tlaravel_path      = getLaravelPath();", 
    "", 
    "\t//var selectedText = 'fooString';", 
    "\t//var regex_selectedText = new RegExp(\"(.*)\", \"gi\");", 
    "\tvar regex_selectedText = /\\w:(\\\\\\S+)+\\.\\w+(?=\")*/gi;", 
    "\tvar absolute_path =  regex_selectedText.exec(selectedText);", 
    "\tif (absolute_path) {", 
    "\t\topenInKomodo(selectedText)", 
    "", 
    "\t}else {", 
    "", 
    "\t\t//alert(selectedText);", 
    "\t\tif ( lang=='Less' || lang=='SCSS') {", 
    "\t\t\topenIncludeView_Less();", 
    "", 
    "\t\t}else if ( lang=='PHP' || lang=='LaravelBlade') {", 
    "\t\t\t//alert('openIncludeView_PHP');", 
    "\t\t\topenIncludeView_PHP();", 
    "", 
    "\t\t}else if ( lang=='Autohotkey'){", 
    "\t\t\t//alert( 'lang==Autohotkey' );", 
    "\t\t\topenIncludeView_Autohotkey();", 
    "", 
    "", 
    "\t\t}else if ( lang=='Maxscript'){", 
    "\t\t\topenIncludeView_Maxscript();", 
    "\t\t}", 
    "", 
    "\t\telse if ( current_fileName=='gulpfile.js'){", 
    "\t\t\topenIncludeView_GulpFile();", 
    "\t\t}", 
    "\t\telse {", 
    "\t\t\t//alert('openIncludeView_default');", 
    "\t\t\topenIncludeView_default();", 
    "\t\t}", 
    "", 
    "", 
    "", 
    "\t}", 
    "", 
    "}", 
    "", 
    "", 
    "function getSelectedText() {", 
    "\t//alert('getSelectedText');", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\t///*    GET SELECTED TEXT    */", 
    "\tvar selectedText = scimoz.selText;", 
    "\t/*     IF TEXT IS SELECTED    */", 
    "\tif ( selectedText == '') {", 
    "", 
    "\t\tif (lang==\"Autohotkey\") {", 
    "\t\t\tko.commands.doCommand('cmd_home')", 
    "\t\t\tko.commands.doCommand('cmd_selectEnd')", 
    "\t\t} else {", 
    "\t\t\tfindString()", 
    "\t\t}", 
    "", 
    "\t\tvar selectedText = scimoz.selText;", 
    "\t}", 
    "\treturn selectedText;", 
    "", 
    "", 
    "}", 
    "", 
    "/**", 
    "* go to first previous empty character", 
    "**/", 
    "", 
    "function goToFirstEmptyCharacter() {", 
    "\tvar prevChar = getFirstPrevCharacter();", 
    "\tvar i = 0;", 
    "\twhile ( prevChar.match(/\\s/g) == null   ){", 
    "\t\tko.commands.doCommand('cmd_wordLeft');", 
    "\t\tprevChar = getFirstPrevCharacter();", 
    "\t\tvar selection_start = scimoz.wordStartPosition( scimoz.currentPos, true );", 
    "\t\tif ( i > 50 ) break;", 
    "\t\ti++", 
    "\t}", 
    "}", 
    "", 
    "", 
    "/**", 
    "* get character before word undr cursor", 
    "**/", 
    "", 
    "function getFirstPrevCharacter() {", 
    "", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "", 
    "\tvar selection_start = scimoz.wordStartPosition( scimoz.currentPos, true );", 
    "\tvar selection_end = scimoz.wordEndPosition( scimoz.currentPos, true );", 
    "", 
    "\tscimoz.anchor     = selection_start;", 
    "\tscimoz.currentPos = selection_start-1;", 
    "", 
    "\tvar prevChar      = scimoz.selText;", 
    "", 
    "\tscimoz.anchor     = selection_start;", 
    "\tscimoz.currentPos = selection_start;", 
    "", 
    "\treturn prevChar;", 
    "}", 
    "", 
    "/**", 
    "* find e.g: App\\Vilbur\\Datatables\\DatatableService", 
    "* find e.g: foo.barr.word", 
    "**/", 
    "", 
    "function findString() {", 
    "\t//alert('findString');", 
    "\tgoToFirstEmptyCharacter();", 
    "\t//ko.find.findNextInMacro(window, 0, '(?<=[\\'\\\"])[\\\\w\\\\.]+(?=[\\'\\\"])|\\\\w*(\\\\\\\\\\\\w+)+', 2, 0, false, false, find, false, true);", 
    "\t//ko.find.findNextInMacro(window, 0, '(?<=[\\'\\\"])[\\\\S]+(?=[\\'\\\"])|\\\\w*(\\\\\\\\\\\\w+)+', 2, 0, false, false, find, false, true);", 
    "\tko.find.findNextInMacro(window, 0, '(?<=[\\'\\\"])[^\\'\\\"]+(?=[\\'\\\"])|\\\\w*(\\\\\\\\\\\\w+)+', 2, 0, false, false, find, false, true);", 
    "}", 
    "", 
    "function isPathAbsolute(path) {", 
    "", 
    "\t//alert('isPathAbsolute: '+path);", 
    "\tif (path.match(/\\w:.*/g) != null ) {", 
    "\t\treturn true", 
    "\t}", 
    "\treturn false", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function openIncludeView_PHP() {", 
    "", 
    "\t//alert( selectedText );", 
    "", 
    "\tif (selectedText!='') {", 
    "", 
    "\t\tif ( selectedText.match(/^\\\\*App/g)!=null ){", 
    "\t\t\t/* IF SELECTED TEXT MATCH \"[\\]App.......\" E.G.: \"\\App\\Foo\\Bar\" */", 
    "\t\t\tvar inc_file_path =  get_classFile_path()", 
    "", 
    "\t\t}else if ( selectedText.match(/Controller/g)!=null ) {", 
    "\t\t\t/* IF TEXT MATCH \"FrontendController@home\" E.G.:  CONTROLLER LINK IN app\\Http\\Routes\\foo_routes.php FILE */", 
    "\t\t\tvar inc_file_path =  get_ControllerFile_path();", 
    "", 
    "\t\t}else if ( selectedText.match(/\\w*(\\.\\w+)+/g)!=null ) {", 
    "\t\t\t/* IF TEXT MATCH LARAVEL BLADE E.G.: @include(\"partials.navigation.default\") // include 'partials/navigation/default.blade.php' */", 
    "\t\t\tif (selectedText.match(/\\.php/g)==null){", 
    "\t\t\t\tvar inc_file_path =  get_LaravelBlade_path();", 
    "", 
    "\t\t\t}else {", 
    "\t\t\t\t//alert('OPEN_included_path.js: je tato cast kodu POUZIVANA?');", 
    "", 
    "\t\t\t\tvar inc_file_path =  mergeFilePathAndIncludePath( current_file_path, selectedText )", 
    "\t\t\t}", 
    "", 
    "\t\t}else {", 
    "\t\t\t/* IF SIMPLE TEXT SELCTED */", 
    "\t\t\t\t//alert('test');", 
    "\t\t\t//openInKomodo(\"frontend_routes.php\" )", 
    "\t\t\tvar inc_file_path = GetOpenedFilePath(selectedText)", 
    "", 
    "\t\t}", 
    "", 
    "\t\t//alert( inc_file_path );", 
    "", 
    "\t\tif( typeof inc_file_path != 'undefined' )", 
    "\t\t\topenInKomodo(inc_file_path )", 
    "", 
    "", 
    "", 
    "", 
    "\t} else {", 
    "\t\talert('no matchig selection under cursor');", 
    "\t}", 
    "", 
    "\t//if ( selectedText.match(/\\\\*App/g)!=null ){", 
    "\t//\t/*    \"OPEN NAMESPACE STARTING WITH '\\\\App\\\\' eg: \\App\\Services\\Database\\CollectionLinksService\"    */", 
    "\t//\tvar inc_file_path =  laravel_path + '\\\\App\\\\'+selectedText.split('App\\\\').pop().trim()+'.php'", 
    "\t//", 
    "\t//}else if ( selectedText.match(/Controller@/g)!=null ) {", 
    "\t//\t/*    CONTROLLER LINK IN ROUTE FILE    */", 
    "\t//\tvar inc_file_path =  laravel_path + '\\\\app\\\\Http\\\\Controllers\\\\'+selectedText.split('@').shift()+'.php'", 
    "\t//}", 
    "\t//else if ( filename.match(/blade\\.php/g)!=null", 
    "\t//\t\t\t|| filename.match(/Controller\\.php/g)!=null", 
    "\t//\t\t\t|| selectedText.match(/^( auth|backend|datatables|errors|frontend|layout|models|partials )\\..*$/g)!=null ) {", 
    "\t//", 
    "\t//\t/*    VIEW PATH IN BLADE.PHP OR  CONTROLLER OR CONTAIN fronend|backend|partials*/", 
    "\t//\tvar wrapper_regex = /(\\S+)\\.wrapper/gi;", 
    "\t//\tvar wrapper_match =  wrapper_regex.exec(selectedText);", 
    "\t//\tvar filename = ( wrapper_match && selectedText.wrapper_match(/ajax/g) == null )? wrapper_match[1]:selectedText;", 
    "\t//", 
    "\t//\tvar include_file_path =  filename.replace(/\\./g, '\\\\') + '.blade.php'  ;", 
    "\t//\tvar inc_file_path = ( laravel_path + '\\\\resources\\\\views\\\\' + include_file_path ).replace(/\\\\/g, '\\\\\\\\');", 
    "\t//", 
    "\t//", 
    "\t//}else {", 
    "\t//\t/*    noramanl PHP FILE    */", 
    "\t//\tvar inc_file_path =  mergeFilePathAndIncludePath( current_file_path, selectedText )", 
    "\t//}", 
    "", 
    "", 
    "}", 
    "", 
    "/**", 
    "* return path of opened file if selected text MATCH to any opened filename", 
    "* E.G.:  filename_part = \"FooClass\" WILL try find somethink like FooClass.php in opened files", 
    "*", 
    "**/", 
    "function GetOpenedFilePath(filename_part) {", 
    "", 
    "\tvar regex_filename_part = new RegExp(filename_part, \"gi\");", 
    "\tvar opened_file = undefined;", 
    "", 
    "\tvar views = ko.views.manager.topView.getDocumentViews(true);", 
    "", 
    "\tvar project = ko.projects.manager.currentProject;", 
    "\tif (project) {", 
    "\t\tvar part;", 
    "\t\tvar view;", 
    "\t\tfor (var i = 0; i < views.length; i++) {", 
    "\t\t\tview = views[i];", 
    "\t\t\tif (view.koDoc && view.koDoc.file) {", 
    "\t\t\t\tvar filepath = view.koDoc.file.URI.substring(8);", 
    "\t\t\t\tvar filename = view.koDoc.file.baseName;", 
    "\t\t\t\tif ( regex_filename_part.exec(filepath) != null ){", 
    "\t\t\t\t\tvar opened_file = filepath.replace(/[\\/\\\\]/gi, '\\\\\\\\').replace(/\\\\\\\\\\\\\\\\/gi, '\\\\\\\\');", 
    "\t\t\t\t}", 
    "", 
    "", 
    "\t\t\t}", 
    "\t\t}", 
    "\t}", 
    "", 
    "\treturn opened_file", 
    "", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "function openIncludeView_Autohotkey() {", 
    "", 
    "", 
    "\t///*\tIF MATCH RELAIVE PATH E.G.: \"file.ahk\", OR \"folder\\file.ahk\" OR \"\\folder\\file.ahk\"\t\t*/", 
    "\t//var filename = ( selectedText.match(/(?!\\\\)(\\\\*[^\\s%]+\\.\\w+)/g)==null ) ? selectedText : selectedText.match(/(?!\\\\)(\\\\*[^\\s%]+\\.\\w+)/g ).pop();", 
    "\t//", 
    "\t//full_path.replace(/A_/gi,'')", 
    "\t////var match = filename.match(/(?!\\\\)(\\\\*[^\\s%]+\\.\\w+)/g );", 
    "\t//full_path = mergeFilePathAndIncludePath( current_file_path, filename );", 
    "", 
    "\tif (selectedText.match(/[A-Z]:\\\\.*/g) != null ) {", 
    "\t\t/* IF ABSOLUTE PATH */", 
    "\t\tvar full_path = selectedText;", 
    "", 
    "\t}else if (selectedText.match(/%A_ScriptDir%.*/g) != null ) {", 
    "\t\t/* IF relative path starts with %A_ScriptDir% // %A_ScriptDir%\\file.ini */", 
    "\t\tselectedText = selectedText.replace(/%A_ScriptDir%/gi,'')", 
    "\t\tfull_path = mergeFilePathAndIncludePath( current_file_path, selectedText );", 
    "\t}else if (selectedText.match(/%A_.*/g) != null ) {", 
    "\t\tfull_path = selectedText.replace(/A_/gi,'')", 
    "\t\t//alert('full_path:\\n'+full_path);", 
    "", 
    "\t}", 
    "", 
    "\topenInKomodo(full_path)", 
    "}", 
    "", 
    "", 
    "function get_LaravelBlade_path() {", 
    "\t/*\tREMOVE 'wrapper.' IF PATH CONTAIN IT\t*/", 
    "\tvar filename = (selectedText.match(/wrapper\\./g)==null) ? selectedText : selectedText.replace(/wrapper\\./g, '') ;", 
    "\treturn ( laravel_path + '\\\\resources\\\\views\\\\' + filename.replace(/\\./g, '\\\\') + '.blade.php' ).replace(/\\\\/g, '\\\\\\\\');", 
    "", 
    "\t //alert( mergeFilePathAndIncludePath( current_file_path, filename ) );", 
    "", 
    "", 
    "}", 
    "", 
    "", 
    "function get_classFile_path() {", 
    "\t//alert('get_classFile_path');", 
    "\treturn laravel_path + '\\\\App\\\\'+selectedText.split('App\\\\').pop().trim()+'.php'", 
    "", 
    "}", 
    "", 
    "", 
    "function get_ControllerFile_path() {", 
    "\t//alert('get_ControllerFile_path');", 
    "\treturn laravel_path + '\\\\app\\\\Http\\\\Controllers\\\\'+selectedText.split('@').shift()+'.php'", 
    "", 
    "}", 
    "", 
    "", 
    "function openIncludeView_default() {", 
    "", 
    "", 
    "\t//alert(selectedText);", 
    "\t//isPathAbsolute(selectedText)", 
    "\t//alert( isPathAbsolute(selectedText) );", 
    "\t//alert('isPathAbsolute: '+path);", 
    "", 
    "\tif ( isPathAbsolute(selectedText)) {", 
    "\t\topenInKomodo(selectedText)", 
    "\t}else {", 
    "\t\talert( 'FUNCTION DOS NOT SUPPORT THIS LANGUAGE\\nupav funkci openIncludeView_default ve scriptu OPEN_included_path ' );", 
    "\t}", 
    "", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "function openIncludeView_Maxscript(){", 
    "\tvar selectedText = getSelectedText();", 
    "\tvar Max_path = 'c:\\\\GoogleDrive\\\\Programs_cg\\\\3DsMax\\\\2016-64bit\\\\';", 
    "\tif ( selectedText.match(/userScripts/g)!=null ){", 
    "\t\tvar file_path =  Max_path +'scripts'+ selectedText.split(/userScripts/g).pop();", 
    "\t\t\topenInKomodo(file_path )", 
    "\t}", 
    "}", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function openIncludeView_GulpFile(){", 
    "\tvar selectedText = getSelectedText();", 
    "\tvar asset_type = (selectedText.split(/\\./g).pop() === 'js') ? 'js' : 'sass';", 
    "\tvar file_path = ko.views.manager.currentView.koDoc.file.path;", 
    "\tvar curent_filename = file_path.split(/(\\\\|\\/)/g).pop();", 
    "\tvar curent_dir =  file_path.split( curent_filename ).shift();", 
    "", 
    "\tif (selectedText.match(/node_modules/g) != null ) {", 
    "\t\tvar path = ( curent_dir +'/'+selectedText ).replace(/[\\/\\\\]/gi, '\\\\\\\\').replace(/\\\\\\\\\\\\\\\\/gi, '\\\\\\\\');", 
    "\t}else {", 
    "\t\tvar path = ( curent_dir +'/resources/assets/'+asset_type+'/'+selectedText ).replace(/[\\/\\\\]/gi, '\\\\\\\\').replace(/\\\\\\\\\\\\\\\\/gi, '\\\\\\\\');", 
    "\t}", 
    "\topenInKomodo(path)", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "", 
    "function openIncludeView_Less() {", 
    "\tvar selectedText = getSelectedText();", 
    "\t//var current_file_path = ko.views.manager.currentView.koDoc.file.path;", 
    "\t//selectedText = selectedText.replace(/[\\\\\\/]/gi,'\\\\\\\\')", 
    "", 
    "\tif (selectedText.match(/\\.scss/g)==null) selectedText = selectedText + '.scss'", 
    "", 
    "\t//", 
    "\t//if ( selectedText.match(/node_modules/g)!=null ) {", 
    "\t//\talert( getLaravelPath() );", 
    "\t//\tvar inc_file_path = ( getLaravelPath() +'\\\\'+ selectedText );", 
    "\t//", 
    "\t//", 
    "\t//}else {", 
    "\t//}", 
    "\t//inc_file_path = inc_file_path.replace(/find/gi,'replace')", 
    "\tvar inc_file_path =  mergeFilePathAndIncludePath( current_file_path, selectedText )", 
    "\t//alert('inc_file_path: '+inc_file_path);", 
    "\topenInKomodo(inc_file_path )", 
    "}", 
    "", 
    "", 
    "", 
    "function openInKomodo(path) {", 
    "", 
    "\tko.run.output.endSession();", 
    "\t//ko.open.URI(path)ko.run.output.endSession();", 
    "\tvar runSvc = Components.classes[\"@activestate.com/koRunService;1\"].createInstance(Components.interfaces.koIRunService);", 
    "\tvar command = 'komodo.exe' + ' \"' + path + '\"'", 
    "\t//ko.run.runEncodedCommand( window,command )", 
    "\tvar process= runSvc.RunAndNotify(command, \"\", \"\" , \"\" );", 
    "\tvar result = process.wait(-1)==0 ? process.getStdout():null;", 
    "}", 
    "", 
    "", 
    "function mergeFilePathAndIncludePath( filepath, includePath ) {", 
    "", 
    "", 
    "\tif( typeof includePath != 'string' )alert( \"typeof includePath  != 'string'\");", 
    "", 
    "\tvar filepath_split = filepath.split(/\\\\|\\\\\\\\|\\//);", 
    "\t//alert( JSON.stringify( filepath_split, null, 2) )", 
    "", 
    "\tvar includePath_split = includePath.split(/\\\\|\\\\\\\\|\\//);", 
    "\t//alert( JSON.stringify( includePath_split, null, 2) )", 
    "", 
    "\t/*\tREMOVE FILENAME \t*/", 
    "\tfilepath_split.pop();", 
    "\tvar include_path_new = [];", 
    "", 
    "\tfor (i = 0; i < includePath_split.length; i++) {", 
    "\t\tvar include_part = includePath_split[i];", 
    "\t\tif ( include_part=='..') {", 
    "\t\t\tfilepath_split.pop();", 
    "\t\t}else {", 
    "\t\t\t//include_path_new.push(include_part)", 
    "\t\t}", 
    "\t}", 
    "", 
    "\tincludePath_split = includePath_split.filter(function(el){", 
    "\t  return el != \"..\";", 
    "\t});", 
    "", 
    "", 
    "", 
    "\t//alert( 'filepath_split=\\n'+JSON.stringify( filepath_split, null, 2) )", 
    "\t//alert( 'includePath_split=\\n'+JSON.stringify( includePath_split, null, 2) )", 
    "", 
    "", 
    "\tvar full_include_path = filepath_split.concat( includePath_split );", 
    "\t/*\tremove some doubled slashes, and make double all\t*/ // E.G.: foo\\bar\\\\baz\\gaz TO foo\\|bar\\\\baz\\|gaz", 
    "\treturn  full_include_path.join('\\\\').replace(/\\\\\\\\/gi,'\\\\').replace(/\\\\/gi,'\\\\\\\\');", 
    "", 
    "", 
    "}", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function getLaravelPath() {", 
    "\t//var current_file_path = ko.views.manager.currentView.koDoc.file.path;", 
    "\tif ( current_file_path.match(/laravel/g) != null ) {", 
    "\t\tvar file_split =  current_file_path.split(/laravel\\\\/g);", 
    "\t\tvar laravel_path = file_split.shift()+'laravel\\\\';", 
    "\t\tvar project_name = file_split.pop().split('\\\\').filter( function(v){return v!==''}).shift();", 
    "\t\treturn laravel_path + project_name;", 
    "\t}", 
    "\treturn null", 
    "}", 
    "", 
    "function getDotsFromArray(array) {", 
    "\tvar dotsArray = [];", 
    "\tfor (i = 0; i < array.length; i++) {", 
    "\t\tif ( array[i] == '..') {", 
    "\t\t\tdotsArray.push( array[i]);", 
    "\t\t}", 
    "\t}", 
    "\treturn dotsArray;", 
    "}", 
    "", 
    "function removeDotsFromArray(array) {", 
    "\tvar dotsArray = [];", 
    "\tfor (i = 0; i < array.length; i++) {", 
    "\t\tif ( array[i] != '..') {", 
    "\t\t\tdotsArray.push( array[i]);", 
    "\t\t}", 
    "\t}", 
    "\treturn dotsArray;", 
    "}", 
    "", 
    "//function selectString() {", 
    "//\tif ( komodo.view ) { komodo.view.setFocus(); }", 
    "//\t_part = komodo.findPart('macro', 'SELECT string')", 
    "//", 
    "//\tif (!_part ) {alert(\"Couldn't find a macro called 'SELECT string' when executing macro.\"); return", 
    "//\t}", 
    "//\tko.projects.invokePart(_part );", 
    "//}", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "", 
    "//function selectLongWorld() {", 
    "//\tif ( komodo.view ) { komodo.view.setFocus(); }", 
    "//\t_part = komodo.findPart('macro', 'selectLongWord')", 
    "//", 
    "//\tko.projects.invokePart(_part );", 
    "//}", 
    "openIncludePath();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": 1, 
  "type": "macro"
}