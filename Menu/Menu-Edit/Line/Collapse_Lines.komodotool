{
  "keyboard_shortcut": "Ctrl+Alt+Backspace", 
  "name": "Collapse Lines", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "value": [
    "/*", 
    " * COLLAPSE lines of referenced string WITH DELIMETER,", 
    " * \tWRAP lines to string,", 
    " * \tPREFIX line,", 
    " * \tSUFFIX line.", 
    " *", 
    " * @param string\tdelimeter\tcharacter fo joining lines", 
    " * @param string\twrapper\tcharacter\\s for wrrapping of line\t// prefix and suffix wrapper is splited by '|' E.G: 'textBeforeLine|textAftrerLine'", 
    " * @param boolean\tclear_whitespace COLLAPSE WHITE SPACE WHEN LINES ARE COLLAPSED", 
    " *", 
    " * @example", 
    " *\t\tvar string_multiline\t= 'Atest1\\n\\n\\nBtest2\\nCline3\\n';", 
    " *", 
    " *\t\tvar collapsed\t= collapseLines(string_multiline, ' '),\t// collapse lines", 
    " *\t\tvar delimeter\t= collapseLines(string_multiline, ' -X- '),\t// collapse lines with delimeter", 
    " *\t\tvar wrapped\t= collapseLines(string_multiline, ' ', '\"'),\t// collapse lines and quote every line", 
    " *\t\tvar wrapped_sides\t= collapseLines(string_multiline, ' ', '[|]'),\t// wrap every line to brackets", 
    " *\t\tvar wrapped_lines\t= collapseLines(string_multiline, '\\n', '\"|\";'),\t// wrap every line to brackets with EOL character on end", 
    " *\t\tvar line_prefix\t= collapseLines(string_multiline, '\\n', 'PREFIX|'),\t// set line prefix", 
    " *\t\tvar line_suffix\t= collapseLines(string_multiline, '\\n', 'SUFFIX|'),\t// set line suffix", 
    " *", 
    " *", 
    " */", 
    "var collapseLines = function(string_multiline, delimeter=' ', wrapper='', clear_whitespace=true) {", 
    "", 
    "\tif ( delimeter=='\\\\n' )", 
    "\t\tdelimeter='\\n';", 
    "", 
    "\tvar lines\t= string_multiline.split(/[\\r\\n]/gi);", 
    "\tvar lines_wrapped\t= [];", 
    "\tvar wrapper_pref\t= wrapper;", 
    "\tvar wrapper_suff\t= wrapper;", 
    "", 
    "\tif( wrapper ) {", 
    "\t\tvar wrapper_delineter\t= wrapper.indexOf('|');", 
    "\t\tvar delimeter_length\t= delimeter_length;", 
    "", 
    "\t\t/* be shure that delimeter is in middle of string*/", 
    "\t\tif( wrapper_delineter> -1 ){", 
    "\t\t\tvar wrapper_split = wrapper.split('|');", 
    "\t\t\twrapper_pref\t= wrapper_split[0];", 
    "\t\t\twrapper_suff\t= wrapper_split[1];", 
    "\t\t}", 
    "\t}", 
    "", 
    "\t/* WRAP LINES, WITHOUT LEADING AND TRAILING WHITESPACE */", 
    "\tfor(var l=0; l<lines.length;l++) {", 
    "\t\tif ( lines[l]!=='' )", 
    "\t\t\tlines_wrapped.push (", 
    "\t\t\t\t lines[l].replace(/^\\s*(.*?(?=\\s*$))\\s*$/gi, wrapper_pref + '$1' + wrapper_suff)", 
    "\t\t\t);", 
    "\t}", 
    "", 
    "\tvar lines_collapsed = lines_wrapped.join(delimeter);", 
    "", 
    "\t/* CLEAR WHITESPACE */", 
    "\tif(clear_whitespace)", 
    "\t\treturn lines_collapsed.replace(/\\s+/gi, ' ');", 
    "", 
    "\treturn lines_collapsed;", 
    "", 
    "};", 
    "/* MENU ITEM FUNCTION", 
    " */", 
    "if (komodo.view) { komodo.view.setFocus(); }", 
    "", 
    "var delimeter\t= ko.interpolate.interpolateString([\"%(ask:Delimeter:\\\\n)\"])", 
    "var wrapper\t= ko.interpolate.interpolateString([\"%(ask:Wrapper:)\"])", 
    "", 
    "/* COLLAPSE WHITE SPACE WHEN LINES ARE COLLAPSED */", 
    "var clear_whitespace = delimeter.match(/\\\\n/gi) ? false : true;", 
    "", 
    "", 
    "var scimoz\t= ko.views.manager.currentView.scimoz;", 
    "var sel_text\t= scimoz.selText;", 
    "var word_cursor\t= ko.interpolate.getWordUnderCursor(scimoz);", 
    "", 
    "if(sel_text !== \"\")", 
    "\tscimoz.replaceSel( collapseLines(sel_text, delimeter, wrapper, clear_whitespace) );", 
    "", 
    "", 
    ""
  ], 
  "trigger": "trigger_startup", 
  "rank": 100, 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro"
}