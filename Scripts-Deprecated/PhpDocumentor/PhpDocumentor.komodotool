{
  "keyboard_shortcut": "", 
  "name": "PhpDocumentor", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_postopen", 
  "value": [
    "/* ", 
    " *", 
    " * ", 
    " */  ", 
    "ko.extensions.PhpDocumentor = (function() {", 
    "\tvar class_variable\t= 'class_variable_value';", 
    "\t//\t/* PARSE FILE CODE */ ", 
    "\t//\t/* PARSE DOCBLOCK */\t", 
    "/*", 
    "\t ", 
    "\tFIND STRING OF CODE TO DOCUMENT ", 
    "\t\t-> PARSE CODE", 
    "\t\t\t-> get DocBlock{} ", 
    "\t ", 
    "\tFIND STRING OF BLOCK COMMENT IF EXISTS ", 
    "\t\t-> PARSE COMMENT", 
    "\t\t\t-> get DocBlock{}", 
    "*/  ", 
    "\t// PARSE CODE -> get DocBlock", 
    "\t// PARSE CODE -> get DocBlock\t", 
    "\t//var scimoz;", 
    "\t//var Logger;", 
    "\t//var CodeFinder;", 
    "\t//var ParseCode;  ", 
    "\t//var ParseDocBlock;", 
    "\t//var DocBlockWrite;\t", 
    "\t", 
    "\tfunction PhpDocumentor(){", 
    " ", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('PhpDocumentor.js', false).clear().header(true).off(false)", 
    "\t\t//var Logger\t= new ko.extensions.Logger_v3(this, false).clear().header(true)\t\t", 
    "\t\t", 
    "\t\tvar CodeFinder\t= new ko.extensions.CodeFinder();", 
    "\t\tvar CodeFinder_doc\t= new ko.extensions.CodeFinder();", 
    "\t\tvar ParseCode\t= new ko.extensions.ParseCode();", 
    "\t\tvar ParseDocBlock\t= new ko.extensions.ParseDocBlock();", 
    "\t\tvar DocBlockWrite\t= new ko.extensions.DocBlockWrite();", 
    "\t\tvar DocBlockCompare\t= new ko.extensions.DocBlockCompare();", 
    "", 
    "\t\t/* CodeFinder: FIND CODE FOR COMMENT */", 
    "\t\tvar match_code\t= CodeFinder.findCode('function','next').getMatchFound();", 
    "\t\tvar match_doc\t= CodeFinder_doc.findCode('global.comment.dockblock','prev').getMatchFound();", 
    "", 
    "\t\t/* FIND IF NOTHING BETWEEN FOUND CODE AND DOCKBLOCK */", 
    "\t\tvar nothing_between_matches\t= scimoz.getTextRange(match_doc.end, match_code.start).match(/^[\\s]*$/gi) !== null;", 
    "\t\t//Logger.info(nothing_between_matches, 'nothing_between_matches');", 
    "\t\t", 
    "\t\t/* CodeFinder: GET FOUND TEXT CONTENT */", 
    "\t\t//var match_code_text\t= CodeFinder.getMatchContent();", 
    "\t\tvar match_doc_text\t= nothing_between_matches ? CodeFinder_doc.getMatchContent()\t: null;", 
    "", 
    "\t\t/* ParseCode: PARSE FOUND CODE AND DOCK BLOCK */", 
    "\t\t//var DocBlock_code\t= ParseCode.parse(match_code_text);", 
    "\t\tvar DocBlock\t= ParseDocBlock.parse(match_doc_text);\t", 
    "\t\t//Logger.info(DocBlock_code, 'DocBlock_code');", 
    "\t\tLogger.info(DocBlock, 'DocBlock');\t\t", 
    "\t\t", 
    "\t\t//alert( JSON.stringify( match_code_parsed,null, 4) )", 
    "\t\t//alert( JSON.stringify( match_doc_parsed,null, 4) )", 
    "\t\t", 
    "\t\t//var merged\t= DocBlockCompare.compare( DocBlock_code, DocBlock );", 
    "\t\t//Logger.info(merged, 'merged');", 
    "\t\t", 
    "\t\t//if( nothing_between_matches ) ", 
    "\t\t//\tCodeFinder_doc.selectMatch(); ", 
    "\t\t//else {", 
    "\t\t//\tscimoz.currentPos\t= match_code.start;", 
    "\t\t//\tscimoz.anchor\t= match_code.start;\t\t\t", 
    "\t\t//\tko.commands.doCommand('cmd_newline');", 
    "\t\t//\tko.commands.doCommand('cmd_linePrevious');", 
    "\t\t//}", 
    "\t\t", 
    "\t\t//DocBlockWrite.write(merged);", 
    "\t\t", 
    "\t\t", 
    "\t\t", 
    "\t\t", 
    "\t\t//", 
    "\t\t///**", 
    "\t\t// *", 
    "\t\t// */", 
    "\t\t//this.testSelect = function(){", 
    "\t\t//", 
    "\t\t//\tCodeFinder.findCode('function','next').selectMatch();", 
    "\t\t//\t\tsetTimeout( function(){ ", 
    "\t\t//\t\t\tCodeFinder_code.findCode('global.comment.dockblock','prev').selectMatch();", 
    "\t\t//\t\t}, 2000) ", 
    "\t\t//}", 
    "\t\t", 
    "\t}", 
    "\t", 
    "\t", 
    "  ", 
    "\t/** _findCodeBlock", 
    "\t * ", 
    "\t */", 
    "\t//PhpDocumentor.prototype._getCodeBlockContent = function(){", 
    "\t//\t", 
    "\t//\tif(this.code_block){", 
    "\t//\t\treturn this.scimoz.getTextRange(this.code_block.start, this.code_block.end );", 
    "\t//\t\t", 
    "\t//\t}", 
    "\t//};", 
    "\t", 
    "\t", 
    "\t///** functionName", 
    "\t// */", 
    "\t//PhpDocumentor.prototype.functionName = function(){", 
    "\t//\t", 
    "\t//};", 
    "\t", 
    "\t", 
    "\treturn PhpDocumentor;", 
    "})();", 
    "", 
    "var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "if(current_filename === 'TestPhpDoc.js'){", 
    "\tvar _PhpDocumentor\t= new ko.extensions.PhpDocumentor();", 
    "\t//_PhpDocumentor._getCodeBlock();", 
    "\t//var _ParseDocBlock\t= new ko.extensions.ParseDocBlock(ko.views.manager.currentView.scimoz.selText);", 
    "}", 
    " "
  ], 
  "version": "1.0.12", 
  "async": 0, 
  "type": "macro", 
  "icon": "file:///C:/GoogleDrive/TotalComander/Icons/Komodo/logo-icon.ico"
}