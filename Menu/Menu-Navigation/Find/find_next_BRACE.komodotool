{
  "keyboard_shortcut": "Ctrl+]###Ctrl+Page_Down", 
  "name": "find next BRACE", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "ko.views.manager.currentView.scimoz.beginUndoAction()", 
    "\t/* example", 
    "\t\tmetches = {", 
    "\t\tglobal: {", 
    "\t\t\t'searchFoo': 'replaceBar',                // match \"searchFoo\", search \"searchFoo\" relace with \"replaceBar\"", 
    "\t\t\t'matchFaz': ['searchFoo', 'replaceBar'],  // match \"matchFaz\", search \"searchFoo\" replace with \"replaceBar\"", 
    "\t\t}", 
    "\t\t}", 
    "\t*/", 
    "\t", 
    "var backwards = false;", 
    "", 
    "var metches = {", 
    "\tglobal: {", 
    "\t\t'[\\\\[\\\\({](?!(\\\\s*[\\\\)\\\\]}]))':'',", 
    "", 
    "\t},", 
    "\t/* =========== PHP =========== */", 
    "\tPHP: {", 
    "\t\t'public\\\\s+function\\\\s+\\\\w+':'function\\\\s+(\\\\w+)',   // match 'public function fooFunction()' and select 'fooFunction'", 
    "\t},", 
    "\t/* =========== LaravelBlade =========== */", 
    "\tLaravelBlade: {", 
    "\t},", 
    "\t/* =========== js =========== */", 
    "\tJavaScript: {", 
    "\t\t'function\\\\s+\\\\w+':'function\\\\s+(\\\\w+)'", 
    "\t},", 
    "\tNode: {", 
    "\t},", 
    "\t/* =========== sass =========== */", 
    "\tSCSS: {", 
    "\t},", 
    "\t/* =========== sass =========== */", 
    "\tMaxscript: {", 
    "\t},", 
    "\tAutohotkey: {", 
    "\t\t'%\\\\S+%':'\\\\w+',", 
    "\t},", 
    "};", 
    "", 
    "function copyCommandFile(filePath) {", 
    "\tvar command_file_content = getCommandFileContent(filePath)", 
    "\tvar command_file_content_obj = JSON.parse( command_file_content )", 
    "\t", 
    "\t/* =========== CHANGE CHORTCUT =========== */", 
    "\tcommand_file_content_obj['keyboard_shortcut'] = \"Ctrl+Page_Up\"", 
    "\t//alert( JSON.stringify( command_file_content_obj['value'], null, 2) )", 
    "\tfor(var i=0; i<command_file_content_obj['value'].length;i++) {", 
    "\t\tvar line = command_file_content_obj['value'][i];", 
    "", 
    "\t\t/* =========== SEARCH AND REPLACE IN SCRIPT=========== */\t", 
    "\t\tif ( line.match(/var backwards\\s+=\\s+false;/g) != null ) {", 
    "\t\t\t//alert(line);", 
    "\t\t\tcommand_file_content_obj['value'][i] = line.replace(/false/gi,'true')", 
    "\t\t}", 
    "", 
    "\t\t", 
    "\t\t", 
    "\t}", 
    "\twriteToFile( command_file_backwords, JSON.stringify( command_file_content_obj ))", 
    "}", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "", 
    "function writeToFile( file, string ) {", 
    "\tvar filePath = file;", 
    "\tvar koFileEx = Components.classes[\"@activestate.com/koFileEx;1\"]", 
    "\t\t\t\t\t\t.createInstance( Components.interfaces.koIFileEx );", 
    "\tkoFileEx.path = filePath; // forward slashes fine", 
    "\tkoFileEx.open(\"w\");", 
    "\tkoFileEx.puts(string);", 
    "\tkoFileEx.close();", 
    "}", 
    "", 
    "function getCommandFileContent(filePath) {", 
    "\tvar reader = Components.classes[\"@activestate.com/koFileEx;1\"]", 
    "\t\t\t\t\t\t.createInstance( Components.interfaces.koIFileEx );", 
    "\treader.path = filePath; // backslashes if you insist", 
    "\treader.open(\"r\");", 
    "\tvar file_content = reader.readfile();", 
    "\treader.close();", 
    "\treturn file_content", 
    "}", 
    "/**", 
    "* =============== COMMAND =================", 
    "**/", 
    "var testRegExString = '^([^\\\\\\\\s]*\\\\[^\\\\\\\\s]*)+$';", 
    "var cache_file = \"c:/windows/temp/komodo_find_word.txt\";;", 
    "var command_file = \"C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\8.5\\\\tools\\\\_Functions\\\\find_next_BRACE.komodotool\";", 
    "var command_file_backwords = \"C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\8.5\\\\tools\\\\_Functions\\\\find_previous_BRACE.komodotool\";", 
    "//////var REPLACE = true;", 
    "copyCommandFile( command_file );", 
    "try {", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\tvar REPLACED = false;", 
    "\tvar lang = ko.views.manager.currentView.languageObj.name.split('.').shift();", 
    "\tvar regExObj = metches[lang];", 
    "\tif ( typeof regExObj != 'undefined') {", 
    "\t\tvar finds = Object.keys(regExObj).map( function(key){return regExObj[key]})", 
    "\t\t/*    MERGE WITH GLOBAL MATCHES            */", 
    "\t\tfor ( var attrname in  metches.global ) { regExObj[attrname] =  metches.global[attrname]; }", 
    "\t\tvar regExString = Object.keys(regExObj).join('|');", 
    "\t\tko.find.findNextInMacro( window, 0, regExString, 2, 0, backwards, false, find, false, true );", 
    "\t\t/*    selectedText    */", 
    "\t\tvar selectedText = scimoz.selText;", 
    "\t\t/*    LOOP ALL REGEXES AND FIND CURRENT USED    */", 
    "\t\tfor ( var key in regExObj ) {", 
    "\t\t\tif ( key!='') {", 
    "\t\t\t\t/*    SELECT TEXT BY REGEX VALUE    */", 
    "\t\t\t\tvar regex_word = new RegExp( key , \"g\");", 
    "\t\t\t\tvar match_key      =  regex_word.exec(selectedText);", 
    "\t\t\t\tif ( match_key ) {", 
    "\t\t\t\t\tvar selectRegEx = regExObj[key];", 
    "\t\t\t\t\tif ( selectRegEx!='') {", 
    "\t\t\t\t\t\tvar selectedText = scimoz.selText;", 
    "\t\t\t\t\t\tvar regex_ = new RegExp( regExObj[key], \"gi\");", 
    "\t\t\t\t\t\tvar match =  regex_.exec(selectedText);", 
    "\t\t\t\t\t\tif ( match!= null ) {", 
    "\t\t\t\t\t\t\tvar FindText = typeof match[1]!='undefined' ?  match[1] :  match[0] ;", 
    "\t\t\t\t\t\t\tko.commands.doCommand('cmd_left')", 
    "\t\t\t\t\t\t\tko.find.findNextInMacro( window, 0, FindText, 2, 0, false, false, find, false, true );", 
    "\t\t\t\t\t\t\treturn", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t}", 
    "\t\t\t\t}", 
    "", 
    "\t\t\t}else {", 
    "\t\t\t\tko.commands.doCommand('cmd_right')", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\twriteToFile( cache_file, scimoz.selText )", 
    "\t}", 
    "} finally {", 
    "\tko.views.manager.currentView.scimoz.endUndoAction()", 
    "}", 
    "\t////alert();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": false, 
  "type": "macro"
}