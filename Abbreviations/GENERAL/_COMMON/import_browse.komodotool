{
  "keyboard_shortcut": "", 
  "name": "import_browse", 
  "value": [
    "<%", 
    "/* insert snippet like 'import /relative/path' by language", 
    " *", 
    " */", 
    "function getSnippetValue()", 
    "{", 
    "\tvar koFile\t= require(\"ko/file\"); ", 
    "\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\tvar file_current\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\t", 
    "\tvar browsed_path;", 
    "\tvar browsed_filename;", 
    "\tvar browsed_extension;\t", 
    "\tvar path_relative;", 
    "\t", 
    "\t/** Search file or dir in path backwards", 
    "\t * ", 
    "\t * @example fileSearch( 'C:\\dir\\subdir', 'file.txt' )\tSearch 'file.txt' in 'C:\\dir\\subdir', C:\\dir' and 'C:\\'", 
    "\t * @example fileSearch( 'C:\\dir\\subdir', /.txt/g )\tSearch '.txt' files ", 
    "\t * ", 
    "\t * @param\tstring\tpath\tPath where to search ", 
    "\t * @param\tstring|RegEx\tsearch\tFile or dir to search", 
    "\t *", 
    "\t * @return\tstring|null\tPath where of found OR null if not found", 
    "\t */", 
    "\tvar fileSearch = function( path, search )", 
    "\t{", 
    "\t\tvar koFile\t= require(\"ko/file\"); ", 
    "\t\tvar path_split\t= path.split('\\\\');", 
    "\t\tvar found_path\t= null;", 
    "\t\t", 
    "\t\tif( search.constructor.name !== 'RegExp' )", 
    "\t\t\tsearch = new RegExp(search, 'gi');", 
    "\t\t", 
    "\t\t/** fileExists", 
    "\t\t*/", 
    "\t\tfunction fileExists()", 
    "\t\t{", 
    "\t\t\tvar dir_path\t= path_split.join('\\\\') + '\\\\';", 
    "\t\t\tvar list\t= koFile.list(dir_path);", 
    "\t\t\t", 
    "\t\t\tfor(var i=0; i<list.length;i++)", 
    "\t\t\t\tif( list[i].match(  search ) && ! found_path  )", 
    "\t\t\t\t\tfound_path = dir_path + list[i];", 
    "\t", 
    "\t\t\treturn  found_path !== null;", 
    "\t\t}", 
    "\t\t", 
    "\t\twhile ( ! fileExists() && path_split.length > 1 )", 
    "\t\t\tpath_split.pop();", 
    "\t", 
    "\t\treturn found_path ? found_path : null;", 
    "\t\t", 
    "\t};", 
    "\tvar getSnippetByLang = function()", 
    "\t{", 
    "\t\tthis.JavaScript = function()", 
    "\t\t{", 
    "\t\t\treturn \"import [[%tabstop:[[%tabstop:\"+kebabCase(browsed_filename)+\"]]\\tfrom ]]'\"+path_relative.substring(1)+\"';[[%tabstop:]]\";", 
    "\t\t}; ", 
    "\t\tthis.Autohotkey = function()", 
    "\t\t{", 
    "\t\t\treturn \"#Include %A_LineFile%\\\\\"+path_relative.replace(/\\//gi,'\\\\')+\"[[%tabstop:]]\";", 
    "\t\t}; ", 
    "\t\tthis.Markdown = function()", 
    "\t\t{", 
    "\t\t\treturn \"[include:\"+path_relative.replace(/\\//gi,'\\\\').substring(2)+\"][[%tabstop:]]\";", 
    "\t\t};", 
    "\t\tthis.SCSS = function()", 
    "\t\t{", 
    "\t\t\treturn \"@import '\"+path_relative.substring(3)+\"';[[%tabstop:]]\";", 
    "\t\t};", 
    "\t\tthis.XUL = function()", 
    "\t\t{", 
    "\t\t\tvar manifest_path\t= fileSearch(  koFile.dirname(file_current), 'chrome.manifest');", 
    "", 
    "\t\t\tif( ! manifest_path )", 
    "\t\t\t\treturn path_relative", 
    "\t\t\t", 
    "\t\t\textension_dir\t= koFile.dirname(koFile.dirname(manifest_path));", 
    "\t\t\tchrome_extension_path\t= '\"chrome://'+ getRelativePath(extension_dir, browsed_path)+'\"'", 
    "", 
    "\t\t\tswitch( browsed_extension.toLowerCase() )\t\t\t", 
    "\t\t\t{", 
    "\t\t\t\tcase 'dtd':\treturn '<!ENTITY % [[%tabstop1:'+browsed_filename+']]DTD SYSTEM '+chrome_extension_path+'>%[[%tabstop1:'+browsed_filename+']]DTD;[[%tabstop:]]';", 
    "\t\t\t\tcase 'js':\treturn '<script src='+chrome_extension_path+' type=\"application/x-javascript\"/>';", 
    "\t\t\t\tcase 'css':\treturn '<?xml-stylesheet href='+chrome_extension_path+'\ttype=\"text/css\" ?>';", 
    "\t\t\t\tcase 'less':\treturn '<?xml-stylesheet href='+chrome_extension_path+'\ttype=\"stylesheet/less\" media=\"less\" ?>';\t\t\t\t\t", 
    "\t\t\t\tdefault:\treturn path_relative", 
    "\t\t\t}", 
    "\t\t};", 
    "", 
    "\t\treturn typeof this[lang] !== 'undefined' ? this[lang]() : '[[%tabstop:]]' + path_relative + '[[%tabstop:]]'", 
    "\t};", 
    "", 
    "\t", 
    "\tvar kebabCase = function(string)", 
    "\t{", 
    "\t\treturn string.replace(/[^A-Z]+/gi, ' ').replace(/\\w\\S*/g, function(str){return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();}).replace(/\\s+/gi, '');", 
    "\t};", 
    "\tvar browseImportFile = function()", 
    "\t{", 
    "\t\tbrowsed_path\t= ko.filepicker.browseForFile();", 
    "\t\tbrowsed_filename\t= koFile.basename(browsed_path).split('.').shift();", 
    "\t\tbrowsed_extension\t= koFile.basename(browsed_path).split('.').pop();\t\t", 
    "\t\t", 
    "\t};", 
    "\tvar getRelativePath = function(fromPath, toPath)", 
    "\t{", 
    "\t\tvar nsFileFrom = Components.classes[\"@mozilla.org/file/local;1\"]", 
    "\t\t\t\t\t\t\t  .createInstance(Components.interfaces.nsILocalFile);", 
    "\t\tnsFileFrom.initWithPath(fromPath);", 
    "\t\tvar nsFileTo = Components.classes[\"@mozilla.org/file/local;1\"]", 
    "\t\t\t\t\t\t\t  .createInstance(Components.interfaces.nsILocalFile);", 
    "\t\tnsFileTo.initWithPath(toPath);", 
    "\t\treturn nsFileTo.getRelativeDescriptor(nsFileFrom);", 
    "\t}", 
    "\tvar setPathRelative = function()", 
    "\t{", 
    "\t\tpath_relative = getRelativePath(file_current, browsed_path)", 
    "\t};", 
    "", 
    "\tbrowseImportFile();", 
    "\tsetPathRelative();", 
    "\t", 
    "\treturn getSnippetByLang();", 
    "};", 
    "", 
    "/* FAKE SNIPPET", 
    " *", 
    " */", 
    "var fake_snippet = {", 
    "\thasAttribute: function(name) {", 
    "\t\treturn name in this;", 
    "\t},", 
    "\tgetStringAttribute: function(name) {", 
    "\t\treturn this[name];", 
    "\t},", 
    "\tname:\t\"fake snippet\",", 
    "\tindent_relative: \"true\",", 
    "\tvalue: getSnippetValue()", 
    "};", 
    "/* INSERT SNIPPET */", 
    "setTimeout( function(){", 
    "\tko.projects.snippetInsert(fake_snippet);", 
    "}, 100);", 
    "%>!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "true", 
  "type": "snippet", 
  "indent_relative": "true", 
  "auto_abbreviation": "false"
}