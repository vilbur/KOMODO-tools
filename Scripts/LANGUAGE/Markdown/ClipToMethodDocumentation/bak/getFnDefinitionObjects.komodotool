{
  "keyboard_shortcut": "", 
  "name": "getFnDefinitionObjects", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "if( typeof ko.extensions.vilbur.MarkdownDocumentator === 'undefined'  )", 
    "\tko.extensions.vilbur.MarkdownDocumentator = {};", 
    "", 
    "", 
    "/** getFnDefinitionObjects", 
    " */", 
    "ko.extensions.vilbur.MarkdownDocumentator.getFnDefinitionObjects = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction getFnDefinitionObjects(string){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t//var RegEx\t=  /([A-Z]+)\\([^\\)]*\\)/gi;", 
    "\t\tvar RegEx\t=  /([A-Z]+)\\(([^\\)]*)\\)/gi;", 
    "\t\tvar matches_all\t= [];", 
    "\t\tvar definitions\t= [];", 
    "", 
    "\t\t/*--------   PRIVATE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t/** setDefinitions", 
    "\t\t */", 
    "\t\tvar setDefinitions = function()", 
    "\t\t{", 
    "\t\t\tfor(var m=0; m<matches_all.length;m++)", 
    "\t\t\t\tdefinitions.push({", 
    "\t\t\t\t\t'fn_name':\tmatches_all[m][1],", 
    "\t\t\t\t\t'parameters':\tparseParameters(matches_all[m][2])", 
    "\t\t\t\t});", 
    "\t\t};", 
    "\t\t/** setDefinition", 
    "\t\t */", 
    "\t\tvar parseParameters = function( parameters_string )", 
    "\t\t{", 
    "\t\t\treturn parameters_string.match(/^\\s*$/gi) ? [] : parameters_string.split(',').map(function(param){", 
    "\t\t\t\treturn param.trim();", 
    "\t\t\t});", 
    "\t\t};", 
    "\t\t/** Get all functions in string", 
    "\t\t */", 
    "\t\tvar setMatchAll = function()", 
    "\t\t{", 
    "\t\t\twhile((match = RegEx.exec(string)) !== null) {", 
    "\t\t\t\tmatches_all.push(match);", 
    "\t\t\t\tstring = string.substring(match.index+1); //this is not the same as /g", 
    "\t\t\t}", 
    "\t\t};", 
    "", 
    "\t\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "\t\tsetMatchAll();", 
    "", 
    "\t\tif( matches_all.length )", 
    "\t\t\tsetDefinitions();", 
    "", 
    "\t\treturn definitions;", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn getFnDefinitionObjects;", 
    "", 
    "", 
    "})();", 
    "", 
    "", 
    "", 
    "", 
    "/** GetFunctionsDefinitionsTest", 
    "*/", 
    "function GetFunctionsDefinitionsTest(){", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "", 
    "\tvar test_string =\t\"fnWithoutParams(  )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"}\\n\"+", 
    "\t\t\"fnSingleParam( $single )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"\treturn $single\\n\"+", 
    "\t\t\"}\\n\"+", 
    "\t\t\"\\n\"+", 
    "\t\t\"fnMultipleParams( $first, $second:=\\\"default\\\" )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"\treturn $second\\n\"+", 
    "\t\t\"}\\n\"+", 
    "\t\t\"\\n\"+", 
    "\t\t\"/** foo commanet\\n\"+", 
    "\t\t\"*/\\n\"+", 
    "\t\t\"\"+", 
    "\t\t\"\";", 
    "", 
    "\tvar fn_definitions = ko.extensions.vilbur.MarkdownDocumentator.getFnDefinitionObjects( test_string );", 
    "\tLogger.info( fn_definitions, 'fn_definitions' );", 
    "", 
    "}", 
    "", 
    "//GetFunctionsDefinitionsTest();", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}