{
  "keyboard_shortcut": "", 
  "name": "Snippet", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/*", 
    " * insert snippet with additional functionality", 
    " *", 
    " *\tTODO:\t1)\tjson has problem with czech characters", 
    " *\t\t\tthis issue can be tested on \"lrm\" snippet", 
    " *\t\t2)\tmake insertSnippetRepeat worksing with selection", 
    " *", 
    " *\t", 
    " *\t// override default 'cmd_expandAbbrev' function with one of commands bellow", 
    " *\tvar _Snippet = new ko.extensions.Snippet('insertSnippet');\t// insert snippet, work like ko.commands.doCommand('cmd_expandAbbrev'); but make Snippet class work", 
    " *\tvar _Snippet = new ko.extensions.Snippet('insertSnippetRepeat');\t// insert last time used snippet again", 
    " *", 
    " *", 
    " *\tIn SNIPPET FILE // make sure 'Treat as EJS' attribute is true", 
    " *\tvar _Snippet = new ko.extensions.Snippet();\t\t// init class in *.snippet file", 
    " *\t", 
    " *\t// GET BUFFER TEXT", 
    " *\t_Snippet.getLineContent('[before|after|object]')\t// return string content of current line", 
    " *\t_Snippet.getSelectionText('\\t')\t// return string selected text with indentation", 
    " *\t_Snippet.getSelectedTextOrLine()\t// return string of selected text if selected, OR return line content", 
    " *", 
    " *\t// SELECT TEXT BEFORE INSERTION", 
    " *\t_Snippet.selectKeyword()\t// select only abbreviation keyword, wokrs like default Komodo inserting", 
    " *\t_Snippet.selectLine()\t// select line before insertion", 
    " *\t_Snippet.selectSelection()\t// select selected before insertion", 
    " *\t_Snippet.selectSelectionOrLineAndKeyword()\t// selected best choice, SELECTION if defined, OR line if not empty, OR ONLY keyword ", 
    " *", 
    " *", 
    "*/", 
    "ko.extensions.Snippet = (function()", 
    "{", 
    "\t", 
    "\t/* construct */  ", 
    "\tfunction Snippet(insert_function='')", 
    "\t{", 
    "\t\t//var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t ", 
    "\t\tthis.lang\t= require(\"ko/editor\").getLanguage();", 
    "\t\t//if (komodo.view) { komodo.view.setFocus(); }", 
    "\t\tthis.insert_function\t= insert_function;", 
    "\t\tthis.repeated\t= false;\t\t// prevent REPEAT of function this.insertSnippetRepeat() // it is automaticly launched on init", 
    "\t\tthis.Variable\t= new ko.extensions.Variable();", 
    "\t\tthis.scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tthis.prefs\t= Components.classes['@activestate.com/koPrefService;1'].getService(Components.interfaces.koIPrefService).prefs;\t\t\t\t\t\t", 
    "\t\t//var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(true) : Logger;", 
    "\t\t/* SET SELECTION */", 
    "\t\tthis.currentPos_start = this.scimoz.anchor;", 
    "\t\tthis.anchor\t= this._EnvVariableGet('Snippet_anchor',\tthis.scimoz.anchor);", 
    "\t\tthis.currentPos\t= this._EnvVariableGet('Snippet_currentPos',\tthis.scimoz.currentPos);", 
    "\t\tthis._setCursorOnEnd();", 
    " ", 
    "\t\t/* AUTO REPEAT LAST SNIPPET IF LINE IS EMPTY\t*/", 
    "\t\t//if(this._lineIsEmpty()) ", 
    "\t\t//\tthis.repeated = this.insertSnippetRepeat(false);", 
    " ", 
    "\t\tthis.SnippetInit();   ", 
    "\t\t ", 
    "\t\tif(insert_function=='insertSnippet')", 
    "\t\t\tthis.insertSnippet();", 
    "\t\t\t", 
    "\t\telse if(insert_function=='insertSnippetRepeat')", 
    "\t\t\tthis.insertSnippetRepeat();", 
    "\t\t\t", 
    "\t\t//if( !this.keyword )", 
    "\t\t\t//this.scimoz.currentPos = this.currentPos_start;", 
    "", 
    "\t\t//Logger.info(this, 'Snippet');", 
    "\t\tthis._KeywordSave();", 
    "", 
    "\t}", 
    "\t/** GET BASE STATE OF OBJECT", 
    "\t */", 
    "\tSnippet.prototype.SnippetInit = function()", 
    "\t{", 
    "\t\t//Logger.info('~~~SnippetInit()');", 
    "", 
    "\t\t/* FIND AND SET KEYWORD */ ", 
    "\t\tthis.currentPos\t= this._findKeyword();", 
    "\t\tthis.keyword\t= this._getKeyword();", 
    "\t\tif(!this.keyword) return false;", 
    "\t\t", 
    "\t\tthis.selection\t= this._getSelectionObject();", 
    "\t\tthis.selection.pos\t= this._getSelectionPositionObject();", 
    "\t\tthis.line\t= this._getLineObject();", 
    "\t\tthis.line.content\t= this.getLineContent('object');", 
    "\t\tthis.NumericFactor\t= this.getNumericFactor();", 
    "\t\tthis.selection.type\t= this._getSelectionType();", 
    "\t\t", 
    "\t\t//alert( 'this=\\n'+JSON.stringify( this, null, 2) );", 
    "", 
    "\t\tthis.selectSelectionOrLineAndKeyword();", 
    "\t\t//this.selectKeyword();\t\t", 
    "\t\treturn true;", 
    "\t};", 
    "\t", 
    "\t/* insert Snippet where selection starts", 
    "\t * REPEAT last snippet if line is empty", 
    "\t */ ", 
    "\tSnippet.prototype.insertSnippet = function()", 
    "\t{", 
    "\t\t//var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t ", 
    "\t\tif(this._lineIsEmpty())", 
    "\t\t\tthis.repeated = this.insertSnippetRepeat(false);", 
    "\t\t//// IF 'if( this.keyword && snippet)' USED ABBREVIATION IS CASE SENSITIVE", 
    "", 
    "\t\tvar snippet\t= this.keyword ? komodo.findPart('snippet', this.keyword.word ) : null;", 
    "", 
    "\t\t/** INSERT snippet if keyword is defined and if snippet with this keyword has been found", 
    "\t\t*/", 
    "\t\tif( this.keyword )", 
    "\t\t{", 
    "\t\t\tthis.scimoz.beginUndoAction();", 
    "\t\t\ttry {", 
    "\t\t\t\t/* move keyword to new line if selection is defined and keyword is not on own line*/", 
    "\t\t\t\tif(this.selection.pos && this.line.content.before!=='' )", 
    "\t\t\t\t\tthis._moveKeywordToNewLine();", 
    "\t\t\t\t/* set Environment variables for use after snippet insertion */", 
    "\t\t\t\tthis._EnvVariableSet('Snippet_anchor',\tthis.scimoz.anchor);", 
    "\t\t\t\tthis._EnvVariableSet('Snippet_currentPos',\tthis.scimoz.currentPos);", 
    "\t\t\t\t//this._EnvVariableSet('Snippet_Keyword',\tthis.keyword.word );\t\t\t\t", 
    "\t\t\t\t", 
    "\t\t\t\t//Logger.info( this.keyword, 'Snippet: '+'this.keyword');", 
    "\t\t\t\t//console.log( this.lang );", 
    "\t\t\t\t", 
    "\t\t\t\t/* INSERT SNIPPET */", 
    "\t\t\t\tif( this.keyword.word.match(/^[A-Z=:]/gi) && this.lang!='XUL'  ) ", 
    "\t\t\t\t\tko.commands.doCommand('cmd_expandAbbrev'); // Insert standard abberations, this RESPECT CASE AND LANGUAGE", 
    "\t\t\t\t", 
    "\t\t\t\telse", 
    "\t\t\t\t\tif( snippet )", 
    "\t\t\t\t\t\tko.projects.snippetInsert(snippet);        // Insert abberations which starts with non alpha character, these can`t be inserted with \"cmd_expandAbbrev\"  - E.G.: '@param|@m'", 
    "\t\t\t\t", 
    "\t\t\t\t", 
    "\t\t\t} finally {", 
    "\t\t\t\tthis.scimoz.endUndoAction();", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\tthis._EnvVariableReset();", 
    "", 
    "\t};", 
    "\t/* get environment variable, write snippet keyword and intial again", 
    "\t */", 
    "\tSnippet.prototype.insertSnippetRepeat = function()", 
    "\t{", 
    "\t\t//alert( 'this=\\n'+JSON.stringify( this, null, 2) );", 
    "\t\tif(this.repeated)", 
    "\t\t\treturn;", 
    "\t\t", 
    "\t\t//Logger.info('~~~insertSnippetRepeat()');", 
    "\t\tvar keyword\t= this._EnvVariableGet('Snippet_Keyword');", 
    "\t\t", 
    "\t\tif(keyword){", 
    "\t\t\t/** WRITE keyword again*/", 
    "\t\t\t//Logger.info('keyword:'+keyword);", 
    "\t\t\tvar space = this._lineIsEmpty() ? '' :' '; // put whitespace before keyword", 
    "\t\t\tthis.scimoz.insertText(this.currentPos, space+keyword);", 
    "\t\t\t/** restore selection */", 
    "\t\t\tthis.scimoz.anchor\t= this.anchor;", 
    "\t\t\tthis.scimoz.currentPos \t= this.currentPos + space.length + keyword.length;", 
    "\t\t\treturn true;", 
    "\t\t\t//this._EnvVariableSet('Snippet_anchor',\tthis.scimoz.anchor);", 
    "\t\t\t//this._EnvVariableSet('Snippet_currentPos',\tthis.scimoz.currentPos + keyword.length);", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\t/** save Keyword after snippet insertion", 
    "\t */", 
    "\tSnippet.prototype._KeywordSave = function()", 
    "\t{", 
    "\t\tif(this.insert_function!='' && this.keyword)", 
    "\t\t\tthis._EnvVariableSet('Snippet_Keyword',\tthis.keyword.word );\t\t\t\t", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tSnippet.prototype._lineIsEmpty = function()", 
    "\t{", 
    "\t\t//var current_line_content\t= require(\"ko/editor\").getLine( 6 );", 
    "\t\tvar line_index\t= this.scimoz.lineFromPosition(this.scimoz.currentPos);", 
    "\t\tvar line_start_pos\t= this.scimoz.positionFromLine(line_index);", 
    "\t\tvar current_line_content\t= this.scimoz.getTextRange(line_start_pos, line_start_pos + this.scimoz.lineLength(line_index) );", 
    "\t\t//alert(this.scimoz.lineFromPosition(this.scimoz.currentPos)-1)", 
    "\t\t//alert(current_line_content)", 
    "\t\treturn current_line_content.match(/^\\s*$/)!==null;", 
    "\t}; \t ", 
    "\t", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tGET MAIN PROPERTIES\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "\t/* get this.line property object", 
    "\t */", 
    "\tSnippet.prototype._getLineObject = function()", 
    "\t{", 
    "", 
    "\t\tvar line_index\t= this.scimoz.lineFromPosition(this.scimoz.currentPos);", 
    "\t\tvar line_start\t= this.scimoz.positionFromLine(line_index);\t\t", 
    "", 
    "\t\treturn {", 
    "\t\t\t\"index\":\tline_index,", 
    "\t\t\t\"number\":\tline_index + 1,", 
    "\t\t\t\"pos\": {", 
    "\t\t\t\t\"start\":\tline_start,", 
    "\t\t\t\t\"end\":\tthis.scimoz.getLineEndPosition(line_index),\t\t\t\t", 
    "\t\t\t\t\"char\":\tline_start + this.selection.indentation.length,\t\t\t", 
    "\t\t\t}", 
    "\t\t};", 
    "\t};", 
    "\t/** get Line this.selection object", 
    "\t * set line indexes of selection`s start and end ", 
    "\t */ ", 
    "\tSnippet.prototype._getSelectionObject = function()", 
    "\t{", 
    "\t\tvar line_index_start\t= this.scimoz.lineFromPosition(this.anchor);", 
    "\t\treturn {", 
    "\t\t\t\"indentation\":\tthis.scimoz.getTextRange( this.scimoz.positionFromLine(line_index_start), this.anchor ).match(/^(\\s*)/).pop(),", 
    "\t\t\t\"index\": {", 
    "\t\t\t\t\"start\"\t: line_index_start,", 
    "\t\t\t\t\"end\"\t: this.scimoz.lineFromPosition(this.currentPos),", 
    "\t\t\t}", 
    "\t\t};", 
    "\t};", 
    "\t/** get selection start and end position", 
    "\t */", 
    "\tSnippet.prototype._getSelectionPositionObject = function()", 
    "\t{", 
    "\t\t\t", 
    "\t\tvar selectionPos = {", 
    "\t\t\t\"start\"\t: this._getSelectionStart(),\t", 
    "\t\t\t\"end\"\t: this.keyword.pos.start - 1", 
    "\t\t};", 
    "\t\treturn selectionPos.start < this.keyword.pos.start ? selectionPos : null; ", 
    "\t};", 
    "", 
    "\t/* setNumericFactor", 
    "\t */", 
    "\tSnippet.prototype.getNumericFactor = function(delimeter=' ')", 
    "\t{", 
    "\t\tvar NumericFactor\t= ko.snippets.consumeLeadingNumericFactor(delimeter);", 
    "\t\treturn NumericFactor > 0 ? NumericFactor : 1;", 
    "\t};", 
    " ", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tGET CONTENTS\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/\t\t", 
    "\t", 
    "\t/* get content of line before snippet keyword", 
    "\t * @param string before_or_after", 
    "\t *", 
    "\t * @return string", 
    "\t * ", 
    "\t * @example", 
    "\t * \t\tline content:  'content before keyword FOOSNIPPET content after keyword'", 
    "\t * \t\t", 
    "\t * \t\tthis.getLineContent()\t// return string\t'content before keyword content after keyword'", 
    "\t * \t\tthis.getLineContent('obejct')\t// return object\t{before:'content before keyword', after:'content after keyword'\t ", 
    "\t * \t\tthis.getLineContent('before')\t// return string\t'content before keyword'", 
    "\t * \t\tthis.getLineContent('after')\t// return string\t'content after keyword'", 
    "\t * ", 
    "\t */", 
    "\tSnippet.prototype.getLineContent = function(before_or_after='')", 
    "\t{", 
    "\t\t", 
    "\t\tvar line_before\t= this.line.pos.start  < this.keyword.pos.start -1\t? this.scimoz.getTextRange( this.line.pos.start,\tthis.keyword.pos.start - 1 )\t: '';", 
    "\t\tvar line_after\t= this.keyword.pos.end < this.line.pos.end\t? this.scimoz.getTextRange( this.keyword.pos.end,\tthis.line.pos.end )\t: '';", 
    "\t", 
    "\t\t/* get empty string if only whiteSpace  */", 
    "\t\tvar line_content = {", 
    "\t\t\t'before'\t: line_before.match(/^\\s+$/)\t? '' : line_before,", 
    "\t\t\t'after'\t: line_after.match(/^\\s+$/)\t? '' : line_after", 
    "\t\t};", 
    "\t\t", 
    "\t\t/* RETURN PAORT OF LINE BEFORE OR AFTER KEYWORD */\t\t", 
    "\t\tif(before_or_after==='before' || before_or_after==='after')", 
    "\t\t\treturn line_content[before_or_after];", 
    "\t\t", 
    "\t\t/* RETURN OBJECT OR STRING */", 
    "\t\treturn before_or_after==='object' ? line_content : line_content.before + line_content.after;", 
    "\t};", 
    "\t", 
    "\t/* get content of selection before snippet keyword", 
    "\t * ", 
    "\t * @param string prefix add prefix to every line of selection", 
    "\t *", 
    "\t * @return string of current selected text without keyword", 
    "\t */", 
    "\tSnippet.prototype.getSelectionText = function(prefix='')", 
    "\t{", 
    "", 
    "\t", 
    "\t\t/* return empty string if nothing exists on line */", 
    "\t\tif( typeof this.selection !=='undefined'|| this.selection.pos===null)\t\t", 
    "\t\t    return prefix;", 
    "", 
    "\t\treturn this.scimoz.getTextRange( this.selection.pos.start, this.keyword.pos.start - 1 )", 
    "\t\t\t\t\t // ADD indentation TO EVERY LINE // FIX indentation issue, OTHERWISE first line indentation is applied to other lines", 
    "\t\t\t\t\t .replace( new RegExp( '\\n'+this.selection.indentation, \"gi\"), '\\n' )", 
    "\t\t\t\t\t // add prefix to each line", 
    "\t\t\t\t\t .replace(/^(.*)/gi,    prefix+'$1' )", 
    "\t\t\t\t\t // add prefix to empty line", 
    "\t\t\t\t\t .replace(/\\n/gi,  '\\n'+prefix )\t\t\t\t\t ", 
    "\t\t\t\t\t // replace '\\r\\n' EOL characters with '\\n'", 
    "\t\t\t\t\t .replace(/\\r\\n/gi,'\\n')", 
    "\t\t\t\t\t // Remove whitespace on selection end", 
    "\t\t\t\t\t .replace(/\\s*$/gi,'');", 
    "\t\t\t\t\t //.slice(0, -1);\t// remove last empty line", 
    "\t};", 
    "\t", 
    "\t/* get content of selection before snippet keyword or line text upt to first character", 
    "\t * ", 
    "\t * @parameter\tstring\tprefix add prefix to every line of selection", 
    "\t *", 
    "\t * @return\tstring\tof selected text if text is selected OR return line conten", 
    "\t */", 
    "\tSnippet.prototype.getSelectedTextOrLine = function(prefix='')", 
    "\t{", 
    "\t\t/* try select selection or line content and set ne selection data*/", 
    "\t\tif(this.selection.pos)", 
    "\t\t\treturn this.getSelectionText(prefix);", 
    "\t\t\t//return this.scimoz.getTextRange( this.selection.pos.start, this.keyword.pos.start -1);", 
    "\t\telse if( this.line.content.before!=='' && this.line.content.after==='')", 
    "\t\t\treturn this.getLineContent();", 
    "\t\t\t//return this.scimoz.getTextRange( this.line.pos.start, this.line.pos.end);", 
    "\t};", 
    "\t", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tSELECT SELECTIONS - line, text selected before insertion\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t", 
    "\t/* select snippet keyword", 
    "\t * ", 
    "\t */", 
    "\tSnippet.prototype.selectKeyword = function(addToCurrentSelection=false) {", 
    "\t\t", 
    "\t\tif(addToCurrentSelection)", 
    "\t\t\tthis.scimoz.setSel( this.selection.pos ? this.anchor : this.keyword.pos.start, this.keyword.pos.end );\t\t\t", 
    "\t\telse", 
    "\t\t\tthis.scimoz.setSel( this.keyword.pos.start, this.keyword.pos.end );\t", 
    "\t};", 
    "\t", 
    "\t/* select line start on first non-whitespace character", 
    "\t */", 
    "\tSnippet.prototype.selectLine = function(beforeOrAfter='') {", 
    "\t\t/* Select keyword start if line is empty  */", 
    "\t\tswitch (beforeOrAfter) {", 
    "\t\t\tcase 'after'\t: this.scimoz.setSel(this.keyword.pos.end,\tthis.line.pos.end);break;", 
    "\t\t\tcase 'before'\t: this.scimoz.setSel(this.line.pos.char,\tthis.keyword.pos.start-1);break;", 
    "\t\t\tdefault\t: this.scimoz.setSel(this.line.pos.char,\tthis.line.pos.end);", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\t/* select selection before keyword", 
    "\t */", 
    "\tSnippet.prototype.selectSelection = function() {", 
    "\t\tif(this.selection.pos===null) return;", 
    "\t\t", 
    "\t\t/* Select keyword or selection */", 
    "\t\tthis.scimoz.anchor\t= this.selection.pos.start;", 
    "\t\tthis.scimoz.currentPos\t= this.selection.pos.end;", 
    "\t};", 
    "\t", 
    "\t/*\tSELECT\tselection if defined,", 
    "\t *\t    OR\tline if there is something", 
    "\t *\t  ELSE\tselect only keywrod - if line is empty", 
    "\t *", 
    "\t *\t  @return void", 
    "\t */", 
    "\tSnippet.prototype.selectSelectionOrLineAndKeyword = function() {", 
    "\t\tif(this.selection.type==='selection')", 
    "\t\t\tthis.selectSelection();", 
    "\t\tif(this.selection.type==='line')", 
    "\t\t\tthis.selectLine();", 
    "\t\t\t", 
    "\t\tthis.selectKeyword(true);", 
    "\t};", 
    "\t/* ", 
    "\t * ", 
    "\t */ ", 
    "\tSnippet.prototype._getSelectionType = function() {", 
    "\t\t", 
    "\t\t//if(!this.selection.pos && !this.line.content.before && !this.line.content.after)", 
    "\t\t//\treturn 'keyword';", 
    "\t\t//else if(this.selection.pos)", 
    "\t\t//\treturn 'selection';", 
    "\t\t//else if(this.line.content.before!=='' && this.line.content.after!=='')", 
    "\t\t//\treturn 'line';", 
    "\t\t//else if(this.line.content.before!=='')", 
    "\t\t//\treturn 'line_before';", 
    "\t\t//else if(this.line.content.after!=='')", 
    "\t\t//\treturn 'line_after';", 
    "\t\t\t", 
    "\t\t\tif(this.selection.pos)", 
    "\t\t\t\treturn 'selection';", 
    "\t\t\telse if( this.getLineContent()!=='')", 
    "\t\t\t\treturn 'line';", 
    "\t\t\t", 
    "\t\t\treturn 'keyword';", 
    "", 
    "\t};", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tPRIVATE KEYWORD \t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "\t/* find end of last non-empty space (word or sign)", 
    "\t * ", 
    "\t * cursor can be placed at START or at the END of selection", 
    "\t * cursor after snippet keyword can be placed in lazy way almost anywhere, shown in example", 
    "\t *", 
    "\t * @param integer\tpos_selectiend is end position of selection", 
    "\t *", 
    "\t * @example: cursor is displayed as '|',", 
    "\t *   IF KEYWORD:", 
    "\t *\t\tA)\tkeyword|\t// cursor inmidietly\tbehind keyword ", 
    "\t *\t\tB}\t|keyword\t// cursor inmidietly\tafter keyword <- !!!!!! DISABLE THIS TPE< cursor shloul be anywhere behind word start", 
    "\t *\t\tC)\tkeyw|ord\t// cursor in middle\tof keyword", 
    "\t *\t\tD)\tkeyword  |\t// cursor anywhere\tin whitespace behind keyword", 
    "\t *", 
    "\t *   IF OPERATOR:   ", 
    "\t *\t\tE)\t$|\t// cursor after operator ", 
    "\t *\t\tF)\t|$foo\t// cursor before operator \t!!! OMITTED", 
    "\t */\t\t", 
    "\tSnippet.prototype._findKeyword = function() {", 
    "\t\t", 
    "\t\t/* IF KEYWORD A-C */", 
    "\t\tif(ko.interpolate.getWordUnderCursor(this.scimoz)!=='')", 
    "\t\t\treturn this.scimoz.wordEndPosition( this.currentPos, true);\t\t", 
    "\t\t\t//return 99;", 
    "\t\t", 
    "\t\t", 
    "\t\t/* go before whitespace after keyword (if cursor is palced somewhere behind keyword, even next line  ) */", 
    "\t\tvar line_start_pos\t= this.scimoz.positionFromLine(this.scimoz.lineFromPosition(this.currentPos));", 
    "\t\tvar match_whitespace_end = /(\\s+)$/gi.exec( this.scimoz.getTextRange(line_start_pos, this.currentPos));", 
    "\t\tif(match_whitespace_end)", 
    "\t\t\treturn this.currentPos - match_whitespace_end.pop().length;", 
    "\t\treturn this.currentPos;", 
    "\t};\t", 
    "\t", 
    "\t/* get this.keyword property object", 
    "\t * this.currentPos must be behind keyword e.g: Keyword|", 
    "\t */ ", 
    "\tSnippet.prototype._getKeyword = function() {", 
    "\t\t", 
    "\t\tvar match_keyword = /(\\S+)$/gi.exec( this.scimoz.getTextRange(0, this.currentPos));", 
    "\t\t//logv", 
    "\t\tif( !match_keyword ) return null;", 
    "\t\t", 
    "\t\treturn {", 
    "\t\t\t\"word\": match_keyword[0],", 
    "\t\t\t\"pos\" : {", 
    "\t\t\t\t\"start\":\tthis.currentPos - match_keyword[0].length,", 
    "\t\t\t\t\"end\":\tthis.currentPos,\t\t\t\t", 
    "\t\t\t}", 
    "\t\t};", 
    "\t};", 
    "\t", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tPRIVATE SELECT  \t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/* ", 
    "\t */", 
    "\tSnippet.prototype._setCursorOnEnd = function() {", 
    "\t\t//alert('_getCurrentSelectionStart()')", 
    "\t\tif(this.anchor > this.currentPos) {", 
    "\t\t\t", 
    "\t\t\tthis.currentPos\t= [this.anchor, this.anchor\t= this.currentPos][0]; // switch values", 
    "\t\t\tthis.scimoz.anchor\t= this.anchor;", 
    "\t\t\tthis.scimoz.currentPos\t= this.currentPos;", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\t/* find start postion of selection", 
    "\t *", 
    "\t * @param integer\tpos_selectiend is end position of selection", 
    "\t*/", 
    "\tSnippet.prototype._getSelectionStart = function() {", 
    "\t\tvar word_start = this.scimoz.wordStartPosition(this.anchor, true);", 
    "\t\treturn word_start < this.anchor ? word_start : this.anchor;", 
    "\t};", 
    "\t", 
    "\t/* _moveKeywordToNewLine", 
    "\t */ ", 
    "\tSnippet.prototype._moveKeywordToNewLine = function() {", 
    "\t\t", 
    "\t\tthis.selectKeyword();", 
    "\t\tthis.scimoz.replaceSel( '\\n' + this.selection.indentation + this.keyword.word );", 
    "\t\tthis.keyword.pos.start\t= this.scimoz.currentPos - this.keyword.word.length;", 
    "\t\tthis.keyword.pos.end\t= this.scimoz.currentPos;", 
    "\t\tthis._EnvVariableSet('Snippet_currentPos',this.keyword.pos.end);", 
    "\t\tthis.selectSelectionOrLineAndKeyword();", 
    "\t}; ", 
    "", 
    "\t/* Return Komodo all environment variables or value of given key", 
    "\t* ", 
    "\t* @Param string key of variable, return all variables if not defined", 
    "\t* ", 
    "\t* @Return object or value", 
    "\t* ", 
    "\t* @Example", 
    "\t* var allValues\t= _EnvVariableGet()", 
    "\t* var currentPosition\t= _EnvVariableGet('CurentPosition')", 
    "\t* ", 
    "\t*/", 
    "\tSnippet.prototype._EnvVariableGet = function(key=null,_default=null) {", 
    "\t\t//alert('_EnvVariableGet()');", 
    "\t\tvar values_string\t= this.prefs.getStringPref(\"userEnvironmentStartupOverride\");", 
    "\t\tvar values_split\t= values_string.split('\\n');", 
    "\t\t", 
    "\t\t/* string to object */", 
    "\t\tvar values = {};", 
    "\t\tfor(var i=0; i<values_split.length;i++) {", 
    "\t\t\tvar pair_split =  values_split[i].split('=');", 
    "\t\t\tvalues[pair_split[0]] = pair_split[1];", 
    "\t\t}", 
    "\t\tvar variable = key===null ? values : values[key];", 
    "\t", 
    "\t\tif( isNaN(variable)===false )", 
    "\t\t\tvariable = Number(variable);", 
    "\t\t\t", 
    "\t\treturn !variable ? _default : variable;", 
    "\t};", 
    "\t\t", 
    "\t/* _EnvVariableSet", 
    "\t */ ", 
    "\tSnippet.prototype._EnvVariableSet = function(key,value='') {", 
    "\t\tvar values_all\t= this._EnvVariableGet();", 
    "\t\tvar values_array\t= [];", 
    "\t", 
    "\t\tif(value!=='')", 
    "\t\t\tvalues_all[key]\t= value;", 
    "\t\telse", 
    "\t\t\tdelete values_all[key];", 
    "\t\t", 
    "\t\t/* join object keys values pairs to string */", 
    "\t\tfor\t(var k in values_all){", 
    "\t\t\tif( typeof values_all[k] != \"undefined\")", 
    "\t\t\t\tvalues_array.push(k +'=' + values_all[k]);", 
    "\t\t}", 
    "\t\t//alert( 'values_array=\\n'+JSON.stringify( values_array, null, 2) )", 
    "\t\t", 
    "\t\tvar values_string\t= values_array.length > 0 ? values_array.join('\\n') : '';", 
    "\t\t/* set to environment variables */", 
    "\t\tthis.prefs.setStringPref(\"userEnvironmentStartupOverride\", values_string);\t\t", 
    "\t};", 
    "\t", 
    "\t/* _EnvVariableReset", 
    "\t */ ", 
    "\tSnippet.prototype._EnvVariableReset = function() {", 
    "\t\tthis._EnvVariableSet('Snippet_anchor');", 
    "\t\tthis._EnvVariableSet('Snippet_currentPos');\t\t", 
    "\t};", 
    "\t", 
    "\t/* _EnvSnippetKeyword", 
    "\t */ ", 
    "\tSnippet.prototype._EnvSnippetKeyword = function() {", 
    "\t\tthis.prefs.setStringPref(\"userEnvironmentStartupOverride\", this.keyword.word);\t\t", 
    "\t};", 
    "\t", 
    "\t/* TODO: redo to scimoz method", 
    "\t*/", 
    " \tSnippet.prototype.TODO_setNewLineUp = function() {", 
    "\t\tthis.scimoz.lineUp();", 
    "\t};", 
    "\t", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tthis.Variable WRAPPER\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/**", 
    "\t */", 
    "\tSnippet.prototype.findVariablesIn = function(){", 
    "\t\tif(this.selection.type==='selection')", 
    "\t\t\treturn this.Variable.findVariablesInString( this.getSelectionText());", 
    "\t\telse if(this.selection.type==='line')", 
    "\t\t\treturn this.Variable.findVariablesInString( this.getLineContent());\t\t", 
    "\t};", 
    "\treturn Snippet;", 
    "", 
    "})();\t"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}