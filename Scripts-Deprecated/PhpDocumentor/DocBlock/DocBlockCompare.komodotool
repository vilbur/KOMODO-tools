{
  "keyboard_shortcut": "", 
  "name": "DocBlockCompare", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/** DocBlockCompare", 
    " */", 
    "ko.extensions.DocBlockCompare = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction DocBlockCompare(){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('DocBlockCompare.js').off(false);\t\t", 
    "\t\t/*--------   PUBLIC PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.merged = {};", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*--------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.compare = function( DocBlock_code, DocBlock ){", 
    "\t\t\t//Logger.clear(true);", 
    "\t\t\t", 
    "\t\t\tif( typeof DocBlock_code.tags !== 'undefined' ){", 
    "\t\t\t\t/* PRODUCTION */", 
    "\t\t\t\tthis.tags_code\t= DocBlock_code.tags;\t", 
    "\t\t\t\tthis.tags_docblock\t= DocBlock ? DocBlock.tags : null;", 
    "\t\t\t} else {", 
    "\t\t\t\t/* DEVELOP */", 
    "\t\t\t\tthis.tags_code\t= DocBlock_code;\t", 
    "\t\t\t\tthis.tags_docblock\t= DocBlock ? DocBlock : null;", 
    "\t\t\t}\t ", 
    "", 
    "\t\t\tthis.merged\t= this.tags_docblock ? _mergeTags(): this.tags_code;", 
    "\t\t\tLogger.info(this.merged, 'this.merged');", 
    "\t\t\t////_addTabstops();", 
    "\t\t\treturn this.merged;", 
    "\t\t\t////return this;\t\t \t\t\t", 
    "\t\t};", 
    "", 
    "\t\t/*--------   PRIVATE METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** merge docBlock generated from code, with docBlock parsed from documentation", 
    "\t\t *", 
    "\t\t * ", 
    "\t\t *", 
    "\t\t *", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tfunction _mergeTags(){", 
    "", 
    "\t\t\tvar merged\t= {};", 
    "\t\t\tvar tag_keys_code\t= Object.keys(_this.tags_code);", 
    "", 
    "\t\t\tLogger.info(tag_keys_code, 'tag_keys_code');", 
    "", 
    "\t\t\tfor(var t=0; t<tag_keys_code.length;t++) {", 
    "\t\t\t\tvar tag_key = tag_keys_code[t];", 
    "\t\t\t\tLogger.info(tag_key, 'tag_key');", 
    "\t\t\t\tmerged[tag_key] = _this.tags_code[tag_key];", 
    "\t\t\t\tLogger.info(_this.tags_code[tag_key], 'tag_code - '+tag_key );", 
    "\t\t\t}", 
    "\t\t\treturn merged;", 
    "\t\t}", 
    "", 
    "\t\t/** addTabstops", 
    "\t\t*/ ", 
    "\t\tfunction _addTabstops(){", 
    "\t\t\tLogger.info(_this.merged, '_this.merged');", 
    "\t\t\tvar tag_names = Object.keys(_this.merged);", 
    "\t\t\tfor(t=0; t<tag_names.length;t++) {", 
    "\t\t\t\t//var tag_name  = tag_data_keys[t];", 
    "\t\t\t\t//var word = _this.merged[key];", 
    "\t\t\t\t//Logger.info(word, typeof word);", 
    "\t\t\t\t", 
    "\t\t\t\t//_this.merged[key]\t= '[[%tabstop:'+word+']]';", 
    "\t\t\t}", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t/*--------   END   -------------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\treturn DocBlockCompare;", 
    "})();", 
    "", 
    "", 
    "//var DocBlockCompare\t= new ko.extensions.DocBlockCompare();", 
    "//DocBlockCompare.compare(", 
    "//\t'{'tags':{'summary':[\"Summary foo text\"],\"description\":[\"Description foo text\"],\"@param\":[{\"tag\":\"@param\",\"type\":\"string\",\"name\":\"param1\",\"description\":\"\\\"fooString\\\"\"},{\"tag\":\"@param\",\"type\":\"boolean\",\"name\":\"param2\",\"description\":\"true\"},{\"tag\":\"@param\",\"type\":\"array\",\"name\":\"array\",\"description\":\"[1,2,3]\"}],\"@return\":[{\"tag\":\"@return\",\"type\":\"string\",\"description\":\"description\"}]}}',", 
    "//\t'{\"tags\":{\"@param\":[{\"tag\":\"@param\",\"type\":\"string\",\"name\":\"param1\",\"description\":\"\\t   * @return string\\tdescription original\"}]}}'", 
    "//); ", 
    "", 
    " ", 
    "", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "/*\tDocBlockCompare TEST\t*/", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "/** Properties test for object DocBlockCompare  ", 
    " * ", 
    " */ ", 
    "ko.extensions.DocBlockCompareTest = (function() { ", 
    "\tvar\tTestObject\t= new ko.extensions.DocBlockCompare();", 
    "\tvar\ttest_properties\t= ['merged'];", 
    "\t//var\ttest_properties\t= ['tags_code'];\t", 
    "\tvar\ttest_methods\t= {", 
    "\t\t'compare~A': [", 
    "\t\t\t/* parsed code */", 
    "\t\t\t{'summary':['Summary foo text'],'description':['Description foo text'],'@param':[{'tag':'@param','type':'string','name':'param1','description':'\\'fooString\\''},{'tag':'@param','type':'boolean','name':'param2','description':'true'},{'tag':'@param','type':'array','name':'array','description':'[1,2,3]'}],", 
    "\t\t\t'@return':{'tag':'@return','type':'string','description':'description new'},", 
    "\t\t\t//'@return':'<undefined>' ", 
    "\t\t\t}", 
    "\t\t\t/* parsed doc block */\t\t\t", 
    "\t\t\t,{'@return':{'tag': '@return', 'type': 'string', 'description': 'description foo text'}}", 
    "\t\t],", 
    "\t\t//compare_2: null,    ", 
    "\t\t ", 
    "\t};", 
    "\tif(ko.extensions.TestObejctProperties)", 
    "\t\t(new ko.extensions.TestObejctProperties(method_toggle=false, properties_toggle=true)).test(TestObject, test_methods, test_properties);", 
    "});", 
    "/* RUN TEST */ ", 
    "//ko.extensions.DocBlockCompareTest();", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}