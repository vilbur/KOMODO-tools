{
  "keyboard_shortcut": "", 
  "name": "DocBlock", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/** DocBlock is data object for PhpDoc documentation", 
    " *", 
    " * \tDocBlock class merge values and keys to DocBlock object.", 
    " *\tDocBlock can be easily processed to snippets", 
    " *", 
    " * \tinput parsed_tags is result of classes DockBlockParser or PraseCodeTag", 
    " *", 
    " *", 
    " * EXAMPLE OF INPUT:", 
    " *\tparsed_tags = [", 
    " *\t\t[", 
    " *\t\t   \"Summary Lorem ipsum luctus habitasse ac aenean donec ultrices maecenas arcu,\",", 
    " *\t\t   \"Second line of summary.\"", 
    " *\t\t],", 
    " *\t\t[", 
    " *\t\t   \"A Description Lorem ipsum luctus habitasse ac aenean\",", 
    " *\t\t   \"B donec ultrices maecenas arcu, risus primis sodales\",", 
    " *\t\t   \"C urna feugiat platea ultrices maecenas arcu.\"", 
    " *\t\t],", 
    " *\t\t[ \"@param\",\t\"string\",\t\"$param1\",\t\"parameter to function\"],", 
    " *\t\t[ \"@param\",\t\"boolean\",\t\"$param2\",\t\"true\\false parameter to function\" ],", 
    " *\t\t[ \"@return\",\t\"string\",\t\"returned value description\" ]", 
    " *\t]", 
    " *", 
    " *", 
    " */", 
    "ko.extensions.vilbur.DocBlock = (function()", 
    "{", 
    "\t/** keys for this.parsed_tags = {}", 
    "\t *", 
    "\t * Values are parsed via ParseDocBlock.parse() or ParseDocBlock.parse()", 
    "\t * online reference: https://www.phpdoc.org/docs/latest/references/phpdoc/parsed_tags/method.html", 
    "\t *", 
    "\t*/", 
    "\tvar\tall_tag_keys_sahred = {", 
    "\t\t/* @function is not custom tag \t*/", 
    "\t\t'@function':\t['tag', 'name'],", 
    "\t\t/* phpdoc stardard tags \t*/", 
    "\t\t'@summary|@description':\t['tag', 'lines'],", 
    "\t\t'@see':\t['tag', 'uri'],", 
    "\t\t'@subpackage':\t['tag', 'name'],", 
    "\t\t'@api|@filesource|@package':\t['tag', 'string'],", 
    "\t\t'@category|@copyright|@ignore|@internal|@todo|@uses':\t['tag', 'description'],", 
    "\t\t'@author':\t['tag', 'name',\t'email'],", 
    "\t\t'@license':\t['tag', 'url',\t'name'],", 
    "\t\t'@link':\t['tag', 'url',\t'description'],", 
    "\t\t'@deprecated|@since|@version':\t['tag', 'version',\t'description'],", 
    "\t\t'@param|@property|@property_read|@property_write|@global|@var':\t['tag', 'type',\t'name',\t'description',\t'default'], // default is not standard PhpDoc property of tag", 
    "\t\t'@method':\t['tag', 'return_type',\t'name',\t'param'],", 
    "\t\t'@source':\t['tag', 'start_line',\t'number_of_lines',\t'description'],", 
    "\t\t'@example':\t['tag', 'location',\t'start_line',\t'number_of_lines',\t'description'],", 
    "\t\t'@return|@throws':\t['tag', 'type',\t'description'],", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tfunction DocBlock(parsed_tags)", 
    "\t{", 
    "\t\t/*----   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('DocBlock.js').clear(false).off(false).header(true);", 
    "\t\tvar tags\t= [];", 
    "\t\t", 
    "\t\tLogger.info(parsed_tags, 'DocBlock-input: '+'parsed_tags');", 
    "\t", 
    "\t\t/** expand all_tag_keys_sahred with multiple key to each own array", 
    "\t\t*/", 
    "\t\tvar all_tag_keys = (function()", 
    "\t\t{", 
    "\t\t\tvar keys_obj\t= {};", 
    "\t\t\tvar setKeys\t= function(key_shared)", 
    "\t\t\t{", 
    "\t\t\t\tkey_shared.split('|').map(function(key){", 
    "\t\t\t\t\tkeys_obj[key] = all_tag_keys_sahred[key_shared];", 
    "\t\t\t\t});", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var key in all_tag_keys_sahred)", 
    "\t\t\t\tif (all_tag_keys_sahred.hasOwnProperty(key))", 
    "\t\t\t\t\tsetKeys( key, all_tag_keys_sahred[key] );", 
    "", 
    "\t\t\treturn keys_obj;", 
    "\t\t})();", 
    "", 
    "\t\t/** get all tags or find tag", 
    "\t\t * \t@return [tags]|tag", 
    "\t\t */", 
    "\t\tthis.get = function(tag='')", 
    "\t\t{", 
    "\t\t\treturn ! tag ? tags : findTag(tag.split('.'));", 
    "\t\t};", 
    "\t\t/** merge two DockBlock tags.", 
    "\t\t *", 
    "\t\t * \tmergedTags property WINS if exists in both tags", 
    "\t\t */", 
    "\t\tthis.merge = function(DocBlockMerge)", 
    "\t\t{", 
    "\t\t\tif( ! DocBlockMerge )", 
    "\t\t\t\treturn this;", 
    "", 
    "\t\t\tLogger.info(DocBlockMerge.get(), 'DocBlock.merge()-input: '+'DocBlockMerge');", 
    "", 
    "\t\t\tvar mergedTags\t= [];", 
    "\t\t\tvar tag_names\t= Object.keys(all_tag_keys) ;", 
    "", 
    "\t\t\tvar mergeTag = function(tag_name)", 
    "\t\t\t{", 
    "\t\t\t\tvar mergeSingleTag = function(tag_name)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar tag_source\t= _this.get(tag_name);", 
    "\t\t\t\t\tvar tag_merge\t= DocBlockMerge.get(tag_name);", 
    "", 
    "\t\t\t\t\t//Logger.info(tag_source, 'DocBlock: '+'tag_source');", 
    "\t\t\t\t\t//Logger.info(tag_merge, 'DocBlock: '+'tag_merge');", 
    "\t\t\t\t\tif( tag_source || tag_merge )", 
    "\t\t\t\t\t\tmergedTags.push( tag_merge ? tag_merge : tag_source );", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tvar mergeParams = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar mergeSingleParam = function(tag_param)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar tag_source\t= _this.get('param.'+ tag_param.name);", 
    "\t\t\t\t\t\tvar tag_merge\t= DocBlockMerge.get('param.'+ tag_param.name);", 
    "\t\t\t\t\t\tvar keys\t= all_tag_keys['@param'];", 
    "", 
    "\t\t\t\t\t\t//Logger.info(tag_source, 'DocBlock: '+'tag_source');", 
    "\t\t\t\t\t\t//Logger.info(tag_merge, 'DocBlock: '+'tag_merge');", 
    "", 
    "\t\t\t\t\t\tvar propertyExists = function(obj, prop)", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\treturn obj && typeof obj[prop] !== 'undefined' ;", 
    "\t\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\t\tvar tag_merged = (function()", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\tvar tag_merged = {};", 
    "\t\t\t\t\t\t\tfor(var k=0; k<keys.length;k++)", 
    "\t\t\t\t\t\t\t\ttag_merged[keys[k]] = propertyExists(tag_merge, keys[k]) ? tag_merge[keys[k]] : ( propertyExists(tag_source, keys[k]) ? tag_source[keys[k]] : '');", 
    "", 
    "\t\t\t\t\t\t\treturn tag_merged;", 
    "\t\t\t\t\t\t})();", 
    "", 
    "", 
    "", 
    "\t\t\t\t\t\t//Logger.info(tag_merged, 'DocBlock: '+'tag_merged');", 
    "", 
    "\t\t\t\t\t\tparams_merged.push(tag_param.name);", 
    "", 
    "\t\t\t\t\t\tmergedTags.push(tag_merged);", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t/** mergeAllParams", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar mergeAllParams = function(params_for_merge)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\t//Logger.info({'params_for_merge':params_for_merge,'mergedTags':mergedTags}, 'DocBlock: '+'mergeAllParams');", 
    "\t\t\t\t\t\tmergedTags = [].concat.apply(mergedTags, params_for_merge);", 
    "\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\tvar params_merged\t= [];", 
    "\t\t\t\t\tvar params_source\t= _this.get('param');", 
    "\t\t\t\t\tvar params_merge\t= DocBlockMerge.get('param');", 
    "", 
    "\t\t\t\t\tif( params_source && params_merge )", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar params_all\t= [].concat.apply(params_source, params_merge);", 
    "", 
    "\t\t\t\t\t\tfor(var p=0; p<params_all.length;p++)", 
    "\t\t\t\t\t\t\tif( params_merged.indexOf( params_all[p].name ) === -1 )", 
    "\t\t\t\t\t\t\t\tmergeSingleParam(params_all[p]);", 
    "\t\t\t\t\t} else", 
    "\t\t\t\t\t\tmergeAllParams(params_source ? params_source : params_merge);", 
    "", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tif( tag_name !== '@param' )", 
    "\t\t\t\t\tmergeSingleTag(tag_name);", 
    "\t\t\t\telse", 
    "\t\t\t\t\tmergeParams();", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var t=0; t<tag_names.length;t++)", 
    "\t\t\t\tmergeTag( tag_names[t] );", 
    "", 
    "\t\t\tLogger.info(mergedTags, 'DocBlock.merge()-output: '+'mergedTags');", 
    "", 
    "\t\t\ttags = mergedTags;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tvar setTags = function()", 
    "\t\t{", 
    "\t\t\tvar setTag = function(tag_array)", 
    "\t\t\t{", 
    "\t\t\t\tvar tag_obj\t= {};", 
    "\t\t\t\tvar tag_name\t= tag_array[0].match(/^@/gi) ? tag_array[0] : ( tag_index === 0 ? '@summary' : '@description' );", 
    "\t\t\t\tvar tag_keys\t= all_tag_keys[tag_name];", 
    "", 
    "\t\t\t\tif( tag_name!=='@summary' && tag_name!=='@description' )", 
    "\t\t\t\t\tfor(var t=0; t<tag_array.length;t++)", 
    "\t\t\t\t\t\ttag_obj[tag_keys[t]] = tag_array[t];", 
    "\t\t\t\telse", 
    "\t\t\t\t\ttag_obj = { 'tag': tag_name, 'lines': tag_array  };", 
    "", 
    "\t\t\t\ttags.push(tag_obj);", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var tag_index=0; tag_index<parsed_tags.length;tag_index++)", 
    "\t\t\t\tsetTag(parsed_tags[tag_index]);", 
    "", 
    "\t\t\tLogger.info(tags, 'DocBlock-output: '+'setTags');", 
    "\t\t};", 
    "\t\t/** find tag in tags", 
    "\t\t * \t@param array tag_split tag name or splitted dot notation to tag property E.G.: 'summary' | 'summary.lines' | 'param.param1' | 'param.$param1.type'", 
    "\t\t *", 
    "\t\t * \treturn [tags]|tag", 
    "\t\t */", 
    "\t\tvar findTag = function(tag_split)", 
    "\t\t{", 
    "\t\t\tvar tag_key\t= tag_split[0].replace(/^@*/gi, '@').toLowerCase();", 
    "", 
    "\t\t\tvar findParams = function()", 
    "\t\t\t{", 
    "\t\t\t\t/** getParamByName", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getParamByName = function(param_name, prop='' )", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(var t=0; t<tags.length;t++)", 
    "\t\t\t\t\t\tif( tags[t].tag == '@param' && tags[t].name == param_name  )", 
    "\t\t\t\t\t\t\treturn prop ? tags[t][prop] : tags[t];", 
    "\t\t\t\t\treturn '';", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tvar getAllParams = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar params_all\t= [];", 
    "\t\t\t\t\tfor(var t=0; t<tags.length;t++)", 
    "\t\t\t\t\t\tif( tags[t].tag == '@param' )", 
    "\t\t\t\t\t\t\tparams_all.push( tags[t] );", 
    "", 
    "\t\t\t\t\treturn params_all;", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tvar param_name\t= typeof tag_split[1] !== 'undefined' ? tag_split[1] : null;", 
    "\t\t\t\tvar prop\t= typeof tag_split[2] !== 'undefined' ? tag_split[2] : null;", 
    "", 
    "\t\t\t\treturn param_name ? getParamByName(param_name, prop) : getAllParams();", 
    "", 
    "\t\t\t};", 
    "", 
    "\t\t\tvar findCommonTag = function()", 
    "\t\t\t{", 
    "\t\t\t\tvar prop\t= typeof tag_split[1] !== 'undefined' ? tag_split[1] : null;", 
    "", 
    "\t\t\t\tfor(var t=0; t<tags.length;t++)", 
    "\t\t\t\t\tif( tags[t].tag == tag_key )", 
    "\t\t\t\t\t\treturn prop ? tags[t][prop] : tags[t];", 
    "", 
    "\t\t\t\treturn '';", 
    "\t\t\t};", 
    "", 
    "\t\t\treturn tag_key === '@param' ? findParams() : findCommonTag();", 
    "\t\t};", 
    "", 
    "\t\tsetTags();", 
    "", 
    "\t}", 
    "\treturn DocBlock;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}