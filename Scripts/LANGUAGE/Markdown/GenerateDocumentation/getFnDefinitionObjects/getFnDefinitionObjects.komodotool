{
  "keyboard_shortcut": "", 
  "name": "getFnDefinitionObjects", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "if( typeof ko.extensions.vilbur.MarkdownDocumentator === 'undefined'  )", 
    "\tko.extensions.vilbur.MarkdownDocumentator = {};", 
    "", 
    "", 
    "/** getFnDefinitionObjects", 
    " */", 
    "ko.extensions.vilbur.MarkdownDocumentator.getFnDefinitionObjects = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction getFnDefinitionObjects(string){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t//var RegEx\t=  /([A-Z0-9_]+)\\(([^\\)]*)\\)/gmi;", 
    "", 
    "\t\t/* Doc block:\t(\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/\\s+))*", 
    "\t\t * Fn  definition:\t([A-Z0-9_]+)\\(([^\\)]*)\\)\\s*{", 
    "\t\t */", 
    "\t\tvar RegEx\t=  /(\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/\\s+))*([A-Z0-9_]+)\\(([^\\)]*)\\)\\s*{/gi;", 
    "\t\t//var RegEx\t=  /(\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/\\s+))/gmi;", 
    "\t\t//var RegEx\t=  /([A-Z0-9_]+)\\(([^\\)]*)\\)\\s*{/gmi;", 
    "", 
    "", 
    "\t\t//var RegEx\t=  /(\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/\\s+))/gmi;", 
    "\t\tvar matches_all\t= [];", 
    "\t\tvar definitions\t= {};", 
    "", 
    "\t\tLogger.info( string, 'string' );", 
    "\t\t//Logger.info( RegEx, 'RegEx' );", 
    "", 
    "\t\t/*--------   PRIVATE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t/** Get all functions in string", 
    "\t\t */", 
    "\t\tvar setMatchAll = function()", 
    "\t\t{", 
    "\t\t\twhile((match = RegEx.exec(string)) !== null) {", 
    "\t\t\t\tmatches_all.push(match);", 
    "\t\t\t\t//Logger.info(match, 'match');", 
    "\t\t\t\tconsole.log( match );", 
    "\t\t\t\t//string = string.substring(match.index+1); //this is not the same as /g", 
    "\t\t\t\tstring = string.substring(match.index+match[0].length ); //this is not the same as /g", 
    "\t\t\t}", 
    "\t\t};", 
    "", 
    "", 
    "\t\t/** setDefinitions", 
    "\t\t */", 
    "\t\tvar setDefinitions = function()", 
    "\t\t{", 
    "\t\t\tfor(var m=0; m<matches_all.length;m++)", 
    "\t\t\t\t//definitions[matches_all[m][1]] = { 'parameters':\t\"parseParameters(matches_all[m][2])\" };", 
    "\t\t\t\tdefinitions[matches_all[m][1]] = { 'parameters':\tparseParameters(matches_all[m][2]) };", 
    "\t\t};", 
    "\t\t/** setDefinition", 
    "\t\t */", 
    "\t\tvar parseParameters = function( parameters_string )", 
    "\t\t{", 
    "\t\t\tvar parameters = {};", 
    "", 
    "\t\t\t/** splitParams", 
    "\t\t\t */", 
    "\t\t\tvar splitParams = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn parameters_string.match(/^\\s*$/gi) ? [] : parameters_string.split(',').map(function(param){", 
    "\t\t\t\t\treturn param.trim();", 
    "\t\t\t\t});", 
    "\t\t\t};", 
    "\t\t\t/** getParameterObject", 
    "\t\t\t */", 
    "\t\t\tvar getParameterObject = function(parameter)", 
    "\t\t\t{", 
    "", 
    "\t\t\t\t/** functionName", 
    "\t\t\t\t */", 
    "\t\t\t\tvar functionName = function()", 
    "\t\t\t\t{", 
    "", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\t/** split Prameter by '='", 
    "\t\t\t\t *  @return array ['paramName', 'delimeter', 'value']", 
    "\t\t\t\t */", 
    "\t\t\t\tvar splitPrameter = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar match =  /([^:=]+)\\s*([:=]+)+\\s*(.*)/g.exec(parameter);", 
    "\t\t\t\t\treturn {", 
    "\t\t\t\t\t\t'name':\tmatch !== null ? match[1] : parameter,", 
    "\t\t\t\t\t\t'delimeter':\tmatch !== null ? match[2] : '',", 
    "\t\t\t\t\t\t'value':\tmatch !== null ? match[3] : '',", 
    "\t\t\t\t\t};", 
    "\t\t\t\t};", 
    "\t\t\t\t/** get Parameter Type by value", 
    "\t\t\t\t * return string 'string|integer|float|array|object'", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getParameterType = function(value)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tLogger.info( value, 'value' );", 
    "\t\t\t\t\tif( value )", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tif( ! isNaN(value))", 
    "\t\t\t\t\t\t\treturn  value.match(/\\./gi) ? 'float' : 'integer';", 
    "\t\t\t\t\t\telse if( value.match(/\\[.*\\]/gi) )", 
    "\t\t\t\t\t\t\treturn 'array';", 
    "\t\t\t\t\t\telse if( value.match(/\\{.*\\}/gi) )", 
    "\t\t\t\t\t\t\treturn 'object';", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\treturn 'string';", 
    "\t\t\t\t};", 
    "", 
    "", 
    "\t\t\t\t//var splitted_prameter = splitPrameter();", 
    "", 
    "\t\t\t\t//splitted_prameter.type\t= getParameterType(splitted_prameter.value);", 
    "", 
    "\t\t\t\t//Logger.info( splitted_prameter, 'splitted_prameter' );", 
    "", 
    "\t\t\t\treturn splitted_prameter;", 
    "", 
    "\t\t\t};", 
    "", 
    "\t\t\t/** addParameterObject", 
    "\t\t\t */", 
    "\t\t\tvar addParameterObject = function(parameter)", 
    "\t\t\t{", 
    "\t\t\t\tvar param_obj\t= getParameterObject(parameter);", 
    "\t\t\t\tparameters[param_obj.name]\t= param_obj;", 
    "\t\t\t};", 
    "", 
    "", 
    "\t\t\tvar splited_params = splitParams();", 
    "", 
    "\t\t\tfor(var p=0; p<splited_params.length;p++)", 
    "\t\t\t\taddParameterObject(splited_params[p]);", 
    "", 
    "", 
    "\t\t};", 
    "", 
    "", 
    "\t\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "\t\tsetMatchAll();", 
    "\t\tLogger.info( matches_all, 'matches_all' );", 
    "", 
    "\t\t//if( matches_all.length )", 
    "\t\t\t//setDefinitions();", 
    "//", 
    "\t\treturn definitions;", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn getFnDefinitionObjects;", 
    "", 
    "", 
    "})();", 
    "", 
    "", 
    "", 
    "", 
    "/** GetFunctionsDefinitionsTest", 
    "*/", 
    "function GetFunctionsDefinitionsTest(){", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "", 
    "\tvar test_string =", 
    "\t\t\"fnWithoutParams(  )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"}\\n\"+", 
    "", 
    "\t\t\"\\n\"+", 
    "\t\t\"/** 1st Comment first line\\n\"+", 
    "\t\t\"*/\\n\"+", 
    "\t\t\"fnSingleParam( $single )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"\treturn $single\\n\"+", 
    "\t\t\"}\\n\"+", 
    "\t\t\"\\n\"+", 
    "", 
    "\t\t\"\\n\"+", 
    "\t\t\"/** 2nd Comment first line\\n\"+", 
    "\t\t\"*\tsecond line\\n\"+", 
    "\t\t\"*/\\n\"+", 
    "\t\t\"paramsObject( $pArray=[], $pString=\\\"default\\\" )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"\treturn $second\\n\"+", 
    "\t\t\"}\\n\"+", 
    "", 
    "\t\t//\"fnDefaultParamters2( $pArray=[], $pString=\\\"default\\\" )\\n\"+", 
    "\t\t\"paramsNumbers( $pInt=123, $pfloat=9.99 )\\n\"+", 
    "\t\t\"{\\n\"+", 
    "\t\t\"\treturn $second\\n\"+", 
    "\t\t\"}\\n\"+", 
    "", 
    "\t\t\"\\n\"+", 
    "\t\t\"/** foo commanet\\n\"+", 
    "\t\t\"*/\\n\"+", 
    "\t\t\"\"+", 
    "\t\t\"\";", 
    "", 
    "", 
    "\tvar fn_definitions = ko.extensions.vilbur.MarkdownDocumentator.getFnDefinitionObjects( test_string );", 
    "\tLogger.info( fn_definitions, 'fn_definitions' );", 
    "", 
    "}", 
    "", 
    "GetFunctionsDefinitionsTest();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}