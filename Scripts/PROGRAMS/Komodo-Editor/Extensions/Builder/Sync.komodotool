{
  "keyboard_shortcut": "", 
  "name": "Sync", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "/** Include namespace.js", 
    " * Setup hierarchy of objects where scripts are applied", 
    " */", 
    "if( typeof ko.extensions.vilbur.ExtensionsBuilderContainer === 'undefined'  )", 
    "\tko.extensions.vilbur.ExtensionsBuilderContainer =", 
    "\t{", 
    "\t\tProject:\t{},", 
    "\t\tSync:\t{},", 
    "\t\tBuild:\t{},", 
    "\t\tInstall:\t{},", 
    "\t};", 
    "", 
    "/** Sync", 
    " * ", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction Sync()", 
    "\t{", 
    "\t\tthis.parent;", 
    "", 
    "\t\tvar fileSearch = function( _path, search )", 
    "\t\t{", 
    "\t\t\tvar koFile\t= require(\"ko/file\"); ", 
    "\t\t\t//console.log(  'fileSearch(): ' + search );", 
    "\t\t\tvar found_paths\t= [];", 
    "\t\t\tvar mask\t= typeof search === 'object'  ? search : new RegExp( search, 'gi');", 
    "\t\t\t", 
    "\t\t\t/** Search in dir", 
    "\t\t\t */", 
    "\t\t\tvar searchInDir = function(dir_path)", 
    "\t\t\t{", 
    "\t\t\t\tvar items = koFile.list(dir_path);", 
    "\t\t", 
    "\t\t\t\tfor(let i=0; i<items.length;i++)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar path_full = dir_path +'\\\\'+ items[i];", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( items[i].match(mask) )", 
    "\t\t\t\t\t\tfound_paths.push(path_full);", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( ! koFile.isFile(path_full) )", 
    "\t\t\t\t\t\tsearchInDir(path_full);", 
    "\t\t\t\t}", 
    "\t\t\t}; ", 
    "\t\t\tsearchInDir(_path);", 
    "\t\t\t ", 
    "\t\t\treturn found_paths.length ? found_paths : null;", 
    "\t\t};", 
    "\t", 
    "\t\t", 
    "\t\t/** Get all opened macro files & js files", 
    "\t\t *", 
    "\t\t * @return object\topened_js_files = {", 
    "\t\t * \t\tfile:\t['C:\\fooScript.js'],", 
    "\t\t * \t\tmacro:\t['/userScriptFile.js'],", 
    "\t\t *  \t}", 
    "\t\t *", 
    "\t\t*/", 
    "\t\tvar opened_js_files = (function()", 
    "\t\t{", 
    "\t\t\t/** Add to files if *.s file", 
    "\t\t\t */", 
    "\t\t\tvar addToFiles = function(ko_file)", 
    "\t\t\t{", 
    "\t\t\t\tif( ! ko_file.URI.match(/\\.js$/gi) )", 
    "\t\t\t\t\treturn;", 
    "\t\t\t\t", 
    "\t\t\t\tvar type = /^(macro|file)/.exec( ko_file.URI );", 
    "", 
    "\t\t\t\tif( type )", 
    "\t\t\t\t\tfiles[type.pop()].push(ko_file._path);", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tvar files\t= {file:[], macro:[]};", 
    "\t\t\tvar file_views\t= ko.views.manager.topView.getDocumentViews(true);", 
    "\t\t\t", 
    "\t\t\tfor (let i = 0; i < file_views.length; i++)", 
    "\t\t\t\tif (file_views[i].koDoc )", 
    "\t\t\t\t\taddToFiles( file_views[i].koDoc.file );", 
    "\t\t\t", 
    "\t\t\treturn files;", 
    "\t\t});", 
    "\t\t///** Get all opened regular *.js which are in extensions dir", 
    "\t\t// */", 
    "\t\t//var extensions_script_files = opened_js_files.file.filter(function(path)", 
    "\t\t//{", 
    "\t\t//\treturn ( extension_dir === path.substring( 0, extension_dir.length ) ) ? path : null;", 
    "\t\t//});", 
    "\t\t//", 
    "\t\t///** Get all opened komodotool which are in extensions dir", 
    "\t\t// */", 
    "\t\t//var extensions_komodotool_files = opened_js_files.macro.map(function(macro_name)", 
    "\t\t//{", 
    "\t\t//\tvar macro_path\t= fileSearch(extension_dir, '^' + macro_name.replace('/', '').replace(/js$/, 'komodotool')  );", 
    "\t\t//", 
    "\t\t//\treturn macro_path ? macro_path : null;", 
    "\t\t//", 
    "\t\t//}).filter(function(macro_path){return macro_path ? macro_path : null;});", 
    "", 
    "\t\t/** Get all opened komodotool which are in extensions dir", 
    "\t\t// */", 
    "\t\t//var extensions_komodotool_files = opened_js_files.macro.map(function(macro_name)", 
    "\t\t//{", 
    "\t\t//\tvar macro_path\t= fileSearch(extension_dir, '^' + macro_name.replace('/', '').replace(/js$/, 'komodotool')  );", 
    "\t\t//", 
    "\t\t//\treturn macro_path ? macro_path : null;", 
    "\t\t//", 
    "\t\t//}).filter(function(macro_path){return macro_path ? macro_path : null;});", 
    "\t\t", 
    "\t\t/** Get project files", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.getProjectFiles = function()", 
    "\t\t{", 
    "\t\t\tconsole.log('Sync.getProjectFiles()'); ", 
    "\t\t\tproject_path = this.parent.Project.path();", 
    "\t\t\tconsole.log(  'project_path: ' + project_path );", 
    "\t\t\t//return ( fileSearch(project_path, /.*.komodotool$/gi) );", 
    "\t\t\t//return ( fileSearch(project_path, /.*\\.(komodotool|js)$/gi) );", 
    "\t\t\t", 
    "\t\t};", 
    "\t\t/** files_to_update", 
    "\t\t */", 
    "\t\tthis.getFilesToUpdate = (function()", 
    "\t\t{", 
    "\t\t\t/* Get Pairs of komodotool and js file in same dir", 
    "\t\t\t * Key is js file, it avoids duplicates in pairs", 
    "\t\t\t * ", 
    "\t\t\t * @return {path_js:path_komodotool}", 
    "\t\t\t */", 
    "\t\t\tvar files_pairs\t= {};", 
    "\t\t\t", 
    "\t\t\t/** Add to pairs", 
    "\t\t\t */", 
    "\t\t\tvar addToPair = function(path)", 
    "\t\t\t{", 
    "\t\t\t\tfiles_pairs[path.replace(/komodotool$/, 'js')] = path.replace(/js$/, 'komodotool');", 
    "\t\t\t}; ", 
    "\t\t\t/** Add js files", 
    "\t\t\t */", 
    "\t\t\tvar addJavaScripts = (function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<extensions_script_files.length;i++)", 
    "\t\t\t\t\taddToPair( extensions_script_files[i] );", 
    "\t\t\t})(); ", 
    "\t\t\t/** Add komodotool files", 
    "\t\t\t */", 
    "\t\t\tvar addKomodotools = (function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(let i=0; i<extensions_komodotool_files.length;i++)", 
    "\t\t\t\t\taddToPair( extensions_komodotool_files[i] );", 
    "\t\t\t})(); ", 
    "", 
    "\t\t\treturn files_pairs;", 
    "\t\t}); ", 
    "\t\t/** Sync All Files of extension project ", 
    "\t\t */", 
    "\t\tthis.syncAllFiles = function()", 
    "\t\t{", 
    "\t\t\talert( 'syncAllFiles' );", 
    "\t\t};", 
    "\t\t/** Sync only Opened Files of extension project", 
    "\t\t */", 
    "\t\tthis.syncOpenedFiles = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( 'syncOpenedFiles' );", 
    "\t\t};\t\t", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'Sync' );", 
    "\t\t\t//return new ko.extensions.TemplateExtension.Sync();", 
    "\t\t};", 
    "", 
    "\t}", 
    "\treturn Sync;", 
    "", 
    "})().apply( ko.extensions.vilbur.ExtensionsBuilderContainer.Sync );", 
    " ", 
    " "
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}