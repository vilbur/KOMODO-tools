{
  "keyboard_shortcut": "", 
  "name": "CodeFinder", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "ko.extensions.vilbur.CodeFinder = {};", 
    "", 
    "/**", 
    " *", 
    " */", 
    "var CodeFinder = (function()", 
    "{", 
    "", 
    "   \t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/** CONSTRUCT", 
    "\t */", 
    "\tfunction CodeFinder(){", 
    "", 
    "\t\t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar _this\t= this; // make private functions access to public PROPERTIES and METHODS()", 
    "\t\t//var koFile\t= require(\"ko/file\");", 
    "\t\tvar koEditor\t= require(\"ko/editor\");", 
    "\t\tvar CodeMatcher\t= new ko.extensions.vilbur.CodeMatcher();", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "", 
    "\t\t//var current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\t\t//var lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tvar current_file\t= '';", 
    "\t\tvar lang\t= '';", 
    "\t\tvar file_content\t= '';", 
    "", 
    "\t\tvar current_pos\t= scimoz.currentPos;", 
    "", 
    "\t\tvar find\t= 'next';", 
    "\t\tvar loop\t= true;", 
    "", 
    "\t\tvar search_for\t= []; // dot notation keys from CodeMatcher.regex_definition", 
    "\t\tvar matches\t= []; // all matches found in cotnent", 
    "\t\tvar indexes;", 
    "\t\tvar match_found = null;", 
    "", 
    "\t\tvar select_groups\t= {};", 
    "\t\tvar selected_group\t= 0;", 
    "", 
    "\t\tif( lang=='Node.js' )", 
    "\t\t\tlang='JavaScript';", 
    "", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*-------------------------------------------------------------------------", 
    "\t\t\tSETTERS", 
    "\t\t---------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** searchFor", 
    "\t\t */", 
    "\t\tthis.searchFor = function(keys)", 
    "\t\t{", 
    "\t\t\t//keys = ['function.public','function.private']; // DEBUG", 
    "\t\t\t//keys = ['function'];// DEBUG", 
    "\t\t\t//keys = ['function.prototype'];// DEBUG", 
    "\t\t\tsearch_for = keys;", 
    "", 
    "\t\t\t//Logger.info(matches, 'matches');", 
    "\t\t\t//Logger.info(indexes, 'indexes');", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** define which groups in match should be selected", 
    "\t\t * \tE.G.: { 'function.private':[1,2] }", 
    "\t\t */", 
    "\t\tthis.selectGroups = function(_select_groups)", 
    "\t\t{", 
    "\t\t\tselect_groups\t= _select_groups;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** findCode", 
    "\t\t *", 
    "\t\t * @param\tstring\tfind\t'void|next|prev' search in whole file, after ('next'), or before ('prev') cursor", 
    "\t\t *", 
    "\t\t * @return\tobject\tmatch_found", 
    "\t\t */", 
    "\t\tthis.findCode = function( _find, _loop=true )", 
    "\t\t{", 
    "", 
    "\t\t\tthis.find = _find;", 
    "\t\t\tthis.loop = _loop;", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/*-------------------------------------------------------------------------", 
    "\t\t\tSET MATCHES", 
    "\t\t---------------------------------------------------------------------------*/", 
    "", 
    "", 
    "\t\t/** get last found match", 
    "\t\t */", 
    "\t\tthis.getMatchFound = function()", 
    "\t\t{", 
    "\t\t\treturn match_found;", 
    "\t\t};", 
    "", 
    "\t\t/** selectFirstMatch", 
    "\t\t */", 
    "\t\tthis.selectMatch = function()", 
    "\t\t{", 
    "\t\t\tcurrent_pos\t= scimoz.currentPos;", 
    "", 
    "\t\t\tif( isFileChanged() )", 
    "\t\t\t\tsetFileData();", 
    "", 
    "\t\t\t//if(!match_found)", 
    "\t\t\t\t//searchNextMatch(find);", 
    "", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "", 
    "\t\t\tvar searchForGroup\t= isNextGroupForSelection();", 
    "\t\t\tLogger.info(searchForGroup, 'searchForGroup');", 
    "", 
    "\t\t\tif( ! searchForGroup ){", 
    "\t\t\t\tsearchNextMatch(find);", 
    "\t\t\t\tscimoz.setSel( match_found.index,  match_found.index + match_found[0].length );", 
    "\t\t\t\tselected_group = 0;", 
    "", 
    "\t\t\t}", 
    "\t\t\telse", 
    "\t\t\t\tselectNextGroup();", 
    "", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/*------   PRIVATE METHODS    -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** has current file same path and cotnent since last run ?", 
    "\t\t */", 
    "\t\tvar isFileChanged = function()", 
    "\t\t{", 
    "", 
    "\t\t\tvar isPathChanged = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn current_file !== ko.views.manager.currentView.koDoc.file.path;", 
    "\t\t\t};", 
    "", 
    "\t\t\tvar isFileContentChanged = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn file_content !== koEditor.getValue();", 
    "\t\t\t};", 
    "", 
    "\t\t\t//var isFileChanged = isPathChanged() || isFileContentChanged();", 
    "\t\t\t//Logger.info(isFileChanged, 'isFileChanged');", 
    "\t\t\t//return isFileChanged;", 
    "", 
    "\t\t\treturn isPathChanged() || isFileContentChanged();", 
    "\t\t};", 
    "", 
    "\t\t/*-------------------------------------------------------------------------", 
    "\t\t\tCURRENT FILE DATA", 
    "\t\t---------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** setFileData", 
    "\t\t */", 
    "\t\tvar setFileData = function()", 
    "\t\t{", 
    "\t\t\tsetPath();", 
    "\t\t\tsetLang();", 
    "\t\t\tsetFileContent();", 
    "\t\t\tsetMatches();", 
    "\t\t\tsetIndexes();", 
    "\t\t};", 
    "", 
    "\t\t/** set File path", 
    "\t\t */", 
    "\t\tvar setPath = function()", 
    "\t\t{", 
    "\t\t\tcurrent_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\t\t};", 
    "", 
    "\t\t/** set Lang", 
    "\t\t */", 
    "\t\tvar setLang = function()", 
    "\t\t{", 
    "\t\t\tlang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\t};", 
    "", 
    "\t\t/** set F ileContent", 
    "\t\t */", 
    "\t\tvar setFileContent = function()", 
    "\t\t{", 
    "\t\t\tfile_content\t= koEditor.getValue();", 
    "\t\t};", 
    "", 
    "\t\t/*-------------------------------------------------------------------------", 
    "\t\t\tSELECT METHODS", 
    "\t\t---------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** isNextGroupForSelection", 
    "\t\t */", 
    "\t\tvar isNextGroupForSelection = function()", 
    "\t\t{", 
    "\t\t\tvar next_group_index\t= selected_group+1;", 
    "", 
    "\t\t\t/** find select groups for type", 
    "\t\t\t * \tselect group can be defined exactly E.G.: 'function.private' OR shared for all subtypes E.G.: 'function'", 
    "\t\t\t */", 
    "\t\t\tvar getSelectGroups = function()", 
    "\t\t\t{", 
    "\t\t\t\tvar group_key = typeof select_groups[match_found.type] !== 'undefined' ? match_found.type : match_found.type.split('.').shift();", 
    "", 
    "\t\t\t\treturn typeof select_groups[group_key] !== 'undefined' ? select_groups[group_key] : null;", 
    "\t\t\t};", 
    "\t\t\t/**", 
    "\t\t\t*/", 
    "\t\t\tvar hasSelectedGroupsNextIndex = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn typeof match_found[next_group_index] !== 'undefined';", 
    "\t\t\t};", 
    "\t\t\t/**", 
    "\t\t\t*/", 
    "\t\t\tvar hasMatchNextSelectGroup = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn  select_groups_of_type.indexOf(next_group_index)>-1 ;", 
    "\t\t\t};", 
    "", 
    "\t\t\tif(!match_found)", 
    "\t\t\t\treturn;", 
    "", 
    "\t\t\tvar select_groups_of_type = getSelectGroups();", 
    "", 
    "\t\t\tif( select_groups_of_type )", 
    "\t\t\t\treturn hasSelectedGroupsNextIndex() && hasMatchNextSelectGroup();", 
    "\t\t};", 
    "", 
    "\t\t/** select group in match", 
    "\t\t */", 
    "\t\tvar selectNextGroup = function()", 
    "\t\t{", 
    "\t\t\t//console.log('selectNextGroup: '+( selected_group +1) );", 
    "\t\t\tvar match_group = new RegExp( match_found[selected_group+1], 'gi').exec(match_found[0]);", 
    "", 
    "\t\t\tif(match_group)", 
    "\t\t\t\tscimoz.setSel( match_found.index+match_group.index, match_found.index+match_group.index + match_group[0].length );", 
    "", 
    "\t\t\tselected_group++;", 
    "\t\t};", 
    "", 
    "\t\t/*-------------------------------------------------------------------------", 
    "\t\t\tSET MATCHES", 
    "\t\t---------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** setMatches", 
    "\t\t */", 
    "\t\tvar setMatches = function()", 
    "\t\t{", 
    "\t\t\tmatches = CodeMatcher.searchFor(search_for).sort().get();", 
    "\t\t};", 
    "", 
    "\t\t/** setIndexes", 
    "\t\t */", 
    "\t\tvar setIndexes = function()", 
    "\t\t{", 
    "\t\t\tindexes = Object.keys(matches).sort(function(e1, e2) { return e1 - e2; });", 
    "\t\t};", 
    "", 
    "\t\t/** Search for match from current position", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar searchNextMatch = function(find)", 
    "\t\t{", 
    "\t\t\t//Logger.info(find, 'searchNextMatch');", 
    "", 
    "\t\t\tswitch (find) {", 
    "\t\t\t\tcase 'first':", 
    "\t\t\t\t\tpos_found = indexes[0];break;", 
    "\t\t\t\tcase 'last':", 
    "\t\t\t\t\tpos_found = indexes[indexes.length-1];break;", 
    "\t\t\t\tcase 'prev':", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos, 'down');break;", 
    "\t\t\t\tcase 'next':", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos, 'up');break;", 
    "\t\t\t\tdefault:", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos); // find closest 'up' OR 'down'", 
    "\t\t\t}", 
    "\t\t\t//Logger.info(pos_found, 'pos_found');", 
    "", 
    "\t\t\tmatch_found\t= matches[pos_found] ? matches[pos_found] : null;", 
    "", 
    "\t\t\tLogger.info(match_found, 'match_found');", 
    "", 
    "\t\t\tif( match_found===null && loop===true )", 
    "\t\t\t\tgetNextMatchInLoop( find );", 
    "", 
    "", 
    "\t\t\t//if(match_found)", 
    "\t\t\t//\tcurrent_pos\t= match_found.index;", 
    "", 
    "", 
    "", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t * FIND CLOSEST NUMBER IN ARRAY", 
    "\t\t *", 
    "\t\t * @param\tarray\tnumbers\tSORTED array for searching", 
    "\t\t * @param\tnumber\tnum\tvalue for search", 
    "\t\t * @param\tmode\tstring\t'void|down|up'\t// 'void' find ABSOLUTE closest, 'down' find closest but lower number, 'up' find closest but higher number", 
    "\t\t *", 
    "\t\t\tvar numbers\t= [2, 5, 12, 13];", 
    "\t\t\tvar closest_absolute\t= getClosestNumber(arr, 7);", 
    "\t\t\tvar closest_lower\t= getClosestNumber(arr, 7, 'down');\t// 5", 
    "\t\t\tvar closest_upper\t= getClosestNumber(arr, 7, 'up');\t// 12", 
    "\t\t */", 
    "\t\tvar getClosestKey = function(array, num, mode='')", 
    "\t\t{", 
    "\t\t\t//Logger.info(array, 'search '+num );", 
    "", 
    "\t\t\tvar diff=10000;", 
    "\t\t\tvar result;", 
    "\t\t\tfor(var k=0; k<array.length;k++) {", 
    "", 
    "\t\t\t\tvar m;", 
    "\t\t\t\t/* GET ABSOLUTE CLOSEST NUMBER*/", 
    "\t\t\t\tif(mode ===''){", 
    "\t\t\t\t\tm = Math.abs(num-array[k]);", 
    "\t\t\t\t\tif(m<diff){", 
    "\t\t\t\t\t\tdiff\t= m;", 
    "\t\t\t\t\t\tresult\t= array[k];", 
    "\t\t\t\t\t}", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tm = num-array[k];", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER LOWER */", 
    "\t\t\t\t\tif( mode ==='down' && m>0 )", 
    "\t\t\t\t\t\tresult=array[k];", 
    "", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER HIGHER */", 
    "\t\t\t\t\telse if( mode ==='up' && m<0 )", 
    "\t\t\t\t\t\treturn array[k];", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "", 
    "\t\t\treturn result;", 
    "\t\t};", 
    "", 
    "\t\t/** select first or last match, if find=='next|prev' and there is not next or previous match", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar getNextMatchInLoop = function( find )", 
    "\t\t{", 
    "\t\t\t//alert( 'getNextMatchInLoop' );", 
    "\t\t\tsearchNextMatch( find=='next' ? 'first' : 'last' );", 
    "\t\t};", 
    "", 
    "\t}", 
    "", 
    "\treturn CodeFinder;", 
    "", 
    "})();", 
    "", 
    "", 
    "", 
    "setTimeout( function(){", 
    "", 
    "\tCodeFinder.apply(ko.extensions.vilbur.CodeFinder);", 
    "", 
    "}, 2000);"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}