{
  "keyboard_shortcut": "", 
  "name": "Includer", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined' )", 
    "\tko.extensions.vilbur = {};", 
    "\t", 
    "if( typeof ko.extensions.vilbur.markdown === 'undefined' )", 
    "\tko.extensions.vilbur.markdown = {};", 
    "", 
    "/**", 
    " *", 
    " *", 
    " *", 
    " *", 
    " *", 
    " *", 
    " * ", 
    " */", 
    "ko.extensions.vilbur.markdown.Includer = (function()", 
    "{", 
    "\t", 
    "\tvar komodo_view = komodo.view;", 
    "\tvar ko_commands = ko.commands;\t", 
    "\t", 
    "\t", 
    "\tfunction Includer()", 
    "\t{", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\t", 
    "\t\tvar koFile\t= require(\"ko/file\");", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz; ", 
    "\t\tvar current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\t\tvar current_dir\t= koFile.dirname(current_file);", 
    "\t\t", 
    "\t\tvar match_files\t= {};\t\t\t", 
    "\t\tvar snippet_lines\t= [];", 
    "", 
    "\t\t/* Search options */", 
    "\t\tvar search_extensions\t= /\\.(php|ahk|js)$/; // these extensions is used for auto find extension", 
    "\t\tvar search_ext\t= '';", 
    "\t\tvar search_name\t= '.*';\t\t\t\t", 
    "\t\tvar match_dir_name\t= false;", 
    "\t\t", 
    "\t\t/* Tree options */", 
    "\t\tvar max_level\t= null;", 
    "\t\t", 
    "\t\t/* Include options */", 
    "\t\tvar indentation\t= 0;", 
    "\t\tvar label\t= '';\t\t", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tSEARCH OPTIONS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Search file name", 
    "\t\t * @param\tstring\tsearch_name\tFile name for search", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.searchName = function(_search_name)", 
    "\t\t{", 
    "\t\t\tsearch_name = _search_name;", 
    "\t\t\treturn this; ", 
    "\t\t}; ", 
    "\t\t", 
    "\t\t/** Set search_ext for search match", 
    "\t\t *", 
    "\t\t * @param\tstring\tsearch_ext\textension searched in dirs E.G.: 'php|md'", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.searchExt = function(_file_ext)", 
    "\t\t{", 
    "\t\t\tsearch_ext = _file_ext;", 
    "\t\t\treturn this; ", 
    "\t\t};", 
    "\t\t/** Search only files which name is same as folder name E.G.: \"FooBar\\FooBar.php\"", 
    "\t\t * @param\tstring|boolean\tmatch\tIf TRUE, then full match is searched, If anything else, folder name with any suffix E.G.: 'FolderName-any-suffix.jpg'", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.matchDirName = function(match=true)", 
    "\t\t{", 
    "\t\t\tmatch_dir_name = match;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tTREE OPTIONS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Set depth of tree for searching", 
    "\t\t * Default is unlimited levels", 
    "\t\t * ", 
    "\t\t * @param\tint\tmax_level\tMax level of tree E.g.: max_level=0 // search only current dir, max_level=1 search only 1 subdir", 
    "\t\t * @return\tself", 
    "\t\t */", 
    "\t\tthis.maxLevel = function(_max_level)", 
    "\t\t{", 
    "\t\t\tmax_level = _max_level +1;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tINCLUDE OPTIONS ", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** set label", 
    "\t\t*/", 
    "\t\tthis.label = function(_label)", 
    "\t\t{", 
    "\t\t\tlabel = _label;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tINCLUDE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t", 
    "\t\t/** Include", 
    "\t\t */", 
    "\t\tthis.include = function()", 
    "\t\t{", 
    "\t\t\tvar matching_files = searchMatchFiles(current_dir, dirTree(current_dir));", 
    "\t\t", 
    "\t\t\tvar rx_file_types = {", 
    "\t\t\t\timage:\t/\\.(jpg|png|jpg)$/gi,", 
    "\t\t\t\tmarkdown:\t/\\.(md)$/gi,", 
    "\t\t\t\tcodeblock:\tsearch_extensions,", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\t/** loopFiles", 
    "\t\t\t */", 
    "\t\t\tvar loopFiles = function(files)", 
    "\t\t\t{", 
    "\t\t\t\tfor(var f=0; f<files.length;f++)", 
    "\t\t\t\t\tif( typeof files[f] === 'string'  )", 
    "\t\t\t\t\t\tincludeFile(files[f]);", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\tloopFiles(files[f]);", 
    "\t\t\t\t\t//Logger.info(files[f], 'Includer: '+'files[f]'); ", 
    "\t\t\t\t\t//files[f];", 
    "\t\t\t};", 
    "\t\t\t/** includeFile", 
    "\t\t\t */", 
    "\t\t\tvar includeFile = function(file)", 
    "\t\t\t{", 
    "\t\t\t\t/** findIncludeFileType", 
    "\t\t\t\t */", 
    "\t\t\t\tvar findIncludeFileType = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(var file_type in rx_file_types)", 
    "\t\t\t\t\t\tif (rx_file_types.hasOwnProperty(file_type))", 
    "\t\t\t\t\t\t\tif( file.match(rx_file_types[file_type]) )", 
    "\t\t\t\t\t\t\t\treturn file_type;", 
    "\t\t\t\t}; \t", 
    "\t\t\t\t/** setCodeblockLink", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setCodeblockLink = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar link\t= '[include]('+getRelativePath(current_dir, file)+')';", 
    "\t\t\t\t\tsnippet_lines.push( link );", 
    "\t\t\t\t}; ", 
    "\t\t\t\t/** setFileLink", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setFileLink = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar prefix\t= include_type==='image' ? '!' : '';", 
    "\t\t\t\t\tvar link\t= prefix+'[value]('+getRelativePath(current_dir, file)+')';", 
    "\t\t\t\t\tsnippet_lines.push( link );", 
    "\t\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\t\tvar include_type\t= findIncludeFileType();", 
    "\t\t\t\tif( include_type==='codeblock' )", 
    "\t\t\t\t\tsetCodeblockLink();", 
    "\t\t\t\t\t", 
    "\t\t\t\telse ", 
    "\t\t\t\t\tsetFileLink();", 
    "", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tloopFiles(matching_files);", 
    "\t\t\twriteToFile();", 
    "\t\t\t//komodo.view.selection = snippet_lines.join('\\n');", 
    "\t\t};", 
    "\t\t/** Include", 
    "\t\t */", 
    "\t\tthis.includeIndent = function()", 
    "\t\t{", 
    "\t\t\t/** setFilesIndented", 
    "\t\t\t */", 
    "\t\t\tvar setFilesIndented = function(sub_tree, indentation)", 
    "\t\t\t{", 
    "\t\t\t\tvar indentation_added = false;", 
    "\t", 
    "\t\t\t\t/** setLine", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setLine = function(path)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar link\t= '__['+koFile.basename(path).split('.').shift()+'](' + getRelativePath(current_dir, path)+')__';\t", 
    "\t\t\t\t\tsnippet_lines.push( Array(indentation).join('\\t') + '* ' + link );", 
    "\t\t\t\t};", 
    "\t", 
    "\t\t\t\tfor(var c=0; c<sub_tree.length;c++)", 
    "\t\t\t\t\tif( typeof sub_tree[c] === 'string'  ){", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tif( indentation_added===false )", 
    "\t\t\t\t\t\t\tindentation_added=indentation++;", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tsetLine(sub_tree[c]);  ", 
    "\t\t\t\t\t}else", 
    "\t\t\t\t\t\tsetFilesIndented(sub_tree[c], indentation); ", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\t", 
    "\t\t\t", 
    "\t\t\tvar matching_files = searchMatchFiles(current_dir, dirTree(current_dir));", 
    "\t\t\t//Logger.info(dirTree(current_dir), 'Includer: '+'dirTree(current_dir)');", 
    "\t\t\t//Logger.info(matching_files, 'Includer: '+'matching_files');", 
    "\t\t\t", 
    "\t\t\tsetFilesIndented(matching_files, 0);", 
    "\t\t\t//Logger.info(snippet_lines, 'Includer: '+'snippet_lines');", 
    "\t\t\t", 
    "\t\t\t//if (komodo.view) { komodo.view.setFocus(); }", 
    "\t\t\t//require(\"ko/editor\").goLineStart();", 
    "", 
    "\t\t\t//komodo_view.selection = snippet_lines.join('\\n');", 
    "\t\t\twriteToFile();", 
    "\t\t\t", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPRIVATE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get direcory names in path", 
    "\t\t */", 
    "\t\tvar getSubDirs = function(path)", 
    "\t\t{", 
    "\t\t\treturn koFile", 
    "\t\t\t\t\t.list(path)", 
    "\t\t\t\t\t\t.filter(function(dir){", 
    "\t\t\t\t\t\t\treturn ! koFile.isFile(path+'\\\\'+dir);", 
    "\t\t\t\t\t\t});", 
    "\t\t};", 
    "\t\t/** Get directory tree", 
    "\t\t *", 
    "\t\t *", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tvar dirTree = function(path, level=0)", 
    "\t\t{", 
    "\t\t\tvar subdirs\t= getSubDirs(path);", 
    "\t\t\tvar dir_subdirs\t= {};", 
    "\t\t\tvar depth_added\t= false;", 
    "\t\t\t", 
    "\t\t\t//Logger.info(max_level, 'Includer: '+'max_level');", 
    "\t\t\t//Logger.info(level, 'Includer: '+'level'); \t\t\t", 
    "\t\t\t//Logger.info(level >= max_level, 'Includer: '+'level >= max_level'); ", 
    "\t\t\tif( max_level && level == max_level )", 
    "\t\t\t\treturn; ", 
    "\t\t\t", 
    "\t\t\tif( subdirs.length ){", 
    "\t\t\t\tif( ! depth_added )", 
    "\t\t\t\t\tdepth_added = level++;", 
    "\t\t\t\t", 
    "\t\t\t\tfor(var d=0; d<subdirs.length;d++)", 
    "\t\t\t\t\tdir_subdirs[subdirs[d]] = dirTree(path+'\\\\'+subdirs[d], level); ", 
    "\t\t\t}", 
    "\t\t\treturn subdirs.length ? dir_subdirs : null;", 
    "\t\t};", 
    "\t\t/** Search in subdirs for files matching criteria", 
    "\t\t */", 
    "\t\tvar searchMatchFiles = function(dir_path, dir_tree)", 
    "\t\t{", 
    "\t\t\tvar match_files = [];", 
    "\t\t\t", 
    "\t\t\t/** findMatchingFile", 
    "\t\t\t */", 
    "\t\t\tvar findMatchingFile = function(dir_path)", 
    "\t\t\t{", 
    "\t\t\t\t//if( ! search_ext )", 
    "\t\t\t\t//\tfindFileExt();", 
    "\t\t\t\t//", 
    "\t\t\t\t//if( ! search_ext )", 
    "\t\t\t\t//\treturn; ", 
    "\t\t\t\t//", 
    "\t\t\t\t//var file_path\t= dir_path+'\\\\'+koFile.basename(dir_path)+'.'+search_ext;", 
    "\t\t\t\t//", 
    "\t\t\t\t//return koFile.exists( file_path ) ? file_path : null;\t\t\t\t\t", 
    "\t\t\t};", 
    "\t\t\t/** Find matching file type in files by search_extensions", 
    "\t\t\t */", 
    "\t\t\tvar findFileExt = function(dir_path)", 
    "\t\t\t{", 
    "\t\t\t\tkoFile.list(dir_path).map(function(file){", 
    "\t\t\t\t\tvar file_match = search_extensions.exec(dir_path+'\\\\'+file); ", 
    "\t\t\t\t\tif (file_match)", 
    "\t\t\t\t\t\tsearch_ext = file_match.pop();", 
    "\t\t\t\t\t//Logger.info(search_ext, 'Includer: '+'search_ext'); ", 
    "\t\t\t\t}); ", 
    "\t\t\t}; ", 
    "\t\t\t/** setMatchingFiles", 
    "\t\t\t */", 
    "\t\t\tvar setMatchingFiles = function(dir_path)", 
    "\t\t\t{", 
    "\t\t\t\tif( ! search_ext )", 
    "\t\t\t\t\tfindFileExt(dir_path);", 
    "\t\t\t\t", 
    "\t\t\t\tif( search_ext )", 
    "\t\t\t\t\tkoFile.list(dir_path).map(function(name){", 
    "", 
    "\t\t\t\t\t\tvar file_path\t= dir_path+'\\\\'+name;", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tif( match_dir_name )", 
    "\t\t\t\t\t\t\tsearch_name = koFile.basename(dir_path) + (match_dir_name===true ? '' : '.*');", 
    "\t\t\t\t\t\t//Logger.info(search_ext, 'Includer: '+'search_ext');", 
    "\t\t\t\t\t\t//Logger.info(search_name, 'Includer: '+'search_name');\t\t\t\t\t\t", 
    "\t\t\t\t\t\t//Logger.info( new RegExp(search_name+'\\.('+search_ext+')$', 'gi').exec(name) , 'match: '+name); ", 
    "\t\t\t\t\t\t", 
    "\t\t\t\t\t\tif( new RegExp( '^'+search_name+'\\.('+search_ext+')$', 'gi').exec(name) )", 
    "\t\t\t\t\t\t\tmatch_files.push(file_path);", 
    "\t\t\t\t\t}); ", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tfor(var key in dir_tree)", 
    "\t\t\t\tif (dir_tree.hasOwnProperty(key))", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar subdirs \t= dir_tree[key];", 
    "\t\t\t\t\tvar subdir_path\t= dir_path+'\\\\'+key;", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tsetMatchingFiles(subdir_path);", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( subdirs )", 
    "\t\t\t\t\t\tmatch_files.push(searchMatchFiles(subdir_path, subdirs));", 
    "\t\t\t\t\t", 
    "\t\t\t\t}", 
    "\t\t\t/** removeEmptyDirs", 
    "\t\t\t */", 
    "\t\t\tvar removeEmptyDirs = function(dirs)", 
    "\t\t\t{", 
    "\t\t\t\treturn dirs.filter(function(dir){", 
    "\t\t\t\t\treturn dir.length;", 
    "\t\t\t\t});", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\treturn removeEmptyDirs(match_files); ", 
    "\t\t\t", 
    "\t\t\t//return match_files;", 
    "\t\t\t//return match_files.filter(function(dir){", 
    "\t\t\t//\treturn dir.length;", 
    "\t\t\t//});", 
    "\t\t};", 
    "\t\t/** getLabel", 
    "\t\t */", 
    "\t\tvar getLabel = function()", 
    "\t\t{", 
    "\t\t\treturn label ? '## '+label+'\\n' : '';", 
    "\t\t}; ", 
    "\t\t/** writeToFile", 
    "\t\t */", 
    "\t\tvar writeToFile = function()", 
    "\t\t{", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "\t\t\trequire(\"ko/editor\").goLineStart();", 
    "", 
    "\t\t\tkomodo_view.selection = getLabel() + snippet_lines.join('\\n');", 
    "\t\t\t", 
    "\t\t\tscimoz.newLine();", 
    "\t\t\tscimoz.newLine(); \t\t\t", 
    "\t\t}; ", 
    "", 
    "", 
    "\t\t/**", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar getRelativePath = function(fromPath, toPath)", 
    "\t\t{", 
    "\t\t\tvar nsFileFrom = Components.classes[\"@mozilla.org/file/local;1\"]", 
    "\t\t\t\t\t\t\t\t  .createInstance(Components.interfaces.nsILocalFile);", 
    "\t\t\tnsFileFrom.initWithPath(fromPath);", 
    "\t\t\tvar nsFileTo = Components.classes[\"@mozilla.org/file/local;1\"]", 
    "\t\t\t\t\t\t\t\t  .createInstance(Components.interfaces.nsILocalFile);", 
    "\t\t\tnsFileTo.initWithPath(toPath);", 
    "\t\t\treturn nsFileTo.getRelativeDescriptor(nsFileFrom);", 
    "\t\t};", 
    "", 
    "\t\t", 
    "\t}", 
    "\treturn Includer;", 
    "", 
    "})();", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}