{
  "keyboard_shortcut": "", 
  "name": "CodeFinder", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " *", 
    " * ", 
    " */ ", 
    "", 
    "ko.extensions.CodeFinder = (function() {", 
    "\t", 
    "   \t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t//var Logger\t= new ko.extensions.Logger('CodeFinder.js');", 
    "\t//var Logger;", 
    "\t//var type;", 
    "\t//var content;\t \t", 
    "\t//var match_found;\t", 
    "\t/* THESE regExes will be searched in code, first occurrence will be taken", 
    "\t\tGROUP IS TAKEN IF PRESENTED,", 
    "\t\tit is because negative lookbehind doesn't work in JavaScript E.G: SELECT 'return' AND DO NOT SELECT '@return'", 
    "\t*/", 
    "\tvar regexe_definitions={", 
    "\t\tglobal:{", 
    "\t\t\t'comment':{", 
    "\t\t\t\t'dockblock':\t/(\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/))/gi,\t// match multiline docBlock with 2 stars on start E.G: '/**'", 
    "\t\t\t\t'block':\t/(\\/\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/))/gi,\t// match any multiline", 
    "\t\t\t}", 
    "\t\t},", 
    "\t\tJavaScript:{", 
    "\t\t\t//'function':\t/(?:function\\s+(\\w+)|\\S+\\.prototype\\.(\\w+)|this\\.(\\w+)\\s*=\\s*\\(*function).*[\\r\\n\\s]*?{/gi,", 
    "\t\t\t", 
    "\t\t\t'function':{", 
    "\t\t\t\t'prototype':\t/(\\w+\\.prototype\\.\\w+\\s*=\\s*function\\s*\\(.*\\).*[\\r\\n\\s]*?{)/gi,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t\t'variable_fn':\t/((?:this\\.|var\\s+)\\w+\\s*=\\s*function\\s*\\(.*\\).*[\\r\\n\\s]*?{)/gi,\t// match fn in variable\tE.G: 'this.fnName = (function (parameters){'\t\t\t\t", 
    "\t\t\t\t//'private':\t/(function\\s+\\w+\\s*\\(.*\\)[\\r\\n\\s]*?{)/gi,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t\t'private':\t/(function\\s+\\w+\\s*\\(.*\\)[\\r\\n\\s]*?{)/gi,\t// match function\tE.G: 'function fnName(parameters){'\t\t\t\t", 
    "\t\t\t},", 
    "\t\t\t ", 
    "\t\t\t//'test':{", 
    "\t\t\t//\t'test1':\t/test1/i,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t//\t'test2':\t/test2/i,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t//},", 
    "\t\t\t'return':\t/[\\s](return\\s+.*)/gi,", 
    "\t\t\t//'return':\t/[\\s](return\\s+.*?(?=[\\r\\n\\t;]))/gi, // clean match, remove unwanted characters on end", 
    "\t\t\t'variable':\t/[\\s](var\\s*\\w+\\s*=\\s*.*)/gi,", 
    "\t\t},", 
    "\t\tPHP:{", 
    "\t\t\t\t///(function\\s+\\S+.*[\\r\\n]?{)/gi,\t// function fooClassic(", 
    "\t\t},", 
    "\t\tAutohotkey:{", 
    "\t\t}", 
    "\t};", 
    "\t/** CONSTRUCT", 
    "\t */", 
    "\tfunction CodeFinder(){ ", 
    "", 
    "\t\t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this; // make private functions access to public PROPERTIES and METHODS()", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('CodeFinder.js').clear(false).off(true);", 
    "\t\t//.header(true)", 
    "\t\t//.off(true);", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar currentPos\t= scimoz.currentPos;", 
    "\t\tvar content\t= _getContent();", 
    "\t\tvar matches_all\t= {};", 
    "", 
    "\t\t/*------   PROPERTIES PUBLIC   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.options\t= { type:'', occurence:'' };", 
    "\t\tthis.match_found\t= {};\t", 
    "", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t", 
    "\t\t/** selectFirstMatch", 
    "\t\t */", 
    "\t\tthis.selectMatch = function(){", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "\t\t\tif(this.match_found)", 
    "\t\t\t\tscimoz.setSel( this.match_found.end, this.match_found.start );", 
    "\t\t\t\t//scimoz.setSel(this.match_found.start, this.match_found.end );\t\t\t", 
    "\t\t\t\t", 
    "\t\t\t//else", 
    "\t\t\t//\tLogger.warn('CodeFinder.this.match_found').variable('');", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** getFirstMatchContent", 
    "\t\t */", 
    "\t\tthis.getMatchContent = function(){", 
    "\t\t\t//if(this.match_found)", 
    "\t\t\t\tvar match_found_content = this.match_found ? scimoz.getTextRange(this.match_found.start, this.match_found.end ) : null;", 
    "\t\t\tLogger.info(match_found_content, this.options.type.split('.').pop()).force();", 
    "\t\t\t//Logger.info('match_found_content').force();\t\t\t", 
    "\t\t\treturn match_found_content;", 
    "\t\t\t", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** findCode ", 
    "\t\t * ", 
    "\t\t * @param\tstring\ttype\tof searched code, dot notated key from array regexe_definitions\tE.G: 'function.private'", 
    "\t\t * @param\tstring\toccurence\t'void|first|last|prev|next' find occurence of given type", 
    "\t\t * @param\tstring\tdirection\t'void|next|prev' search in whole file, after ('next'), or before ('prev') cursor", 
    "\t\t *", 
    "\t\t * @return\tobject\tmatch_found", 
    "\t\t */", 
    "\t\tthis.findCode = function( type='', occurence='' ){", 
    "\t\t\tthis.options.type\t= type;", 
    "\t\t\tthis.options.occurence\t= occurence;", 
    "\t\t\t//////options.type\t= 'function'; // DEBUG", 
    "\t\t\t//////options.type\t= 'global.comment.dockblock'; // DEBUG\t\t\t\t", 
    "", 
    "\t\t\t_setMatchesAll( _getRegexObjects() );", 
    "\t\t\t_matchesAllSort();", 
    "\t\t\t_setMatchFound();", 
    "\t\t\t_restoreInitPosition();", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** getMatchFound", 
    "\t\t */", 
    "\t\tthis.getMatchFound = function(){", 
    "\t\t\tLogger.info(this.match_found, 'getMatchFound.match_found');", 
    "\t\t\t\t\t//.force()", 
    "\t\t\treturn this.match_found;", 
    "\t\t};", 
    "\t\t/*------   PRIVATE METHODS    -------------------------------------------------------------------------------------------------*/", 
    "\t\t\t\t\t\t\t\t", 
    "\t\t/** find all matches by given parameters.", 
    "\t\t *", 
    "\t\t * find matches or loop sub object of regexe_definitions and find multiple types at once", 
    "\t\t *", 
    "\t\t * @param object|RegEx regex is RegEx object or subobject from array regexe_definitions", 
    "\t\t *", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tfunction _setMatchesAll(regex){", 
    "", 
    "\t\t\tif(regex.constructor.name==='RegExp')", 
    "\t\t\t\t_findMatches(regex);", 
    "\t\t\t else ", 
    "\t\t\t\t_loopRegExSubobject(regex);", 
    "\t\t}", 
    "\t\t\t", 
    "\t\t/** _loopRegExSubobject", 
    "\t\t * ", 
    "\t\t * @param\tobject\tregexes_subobj\tsubobject from array regexe_definitions\tE.G: regexes_subobj = regexe_definitions.JavaScript.function", 
    "\t\t * @param\tstring\tparent_key\tparent key of regexes_subobj (dot notated)\tE.G: 'function.private'", 
    "\t\t*/", 
    "\t\tfunction _loopRegExSubobject(regexes_subobj, parent_key=''){", 
    "\t\t\tvar rx_keys\t= Object.keys(regexes_subobj);", 
    "\t\t\t//Logger.info(rx_keys);", 
    "\t\t\t", 
    "\t\t\tfor(var k=0; k<rx_keys.length;k++) {", 
    "\t\t\t", 
    "\t\t\t\tvar regex = regexes_subobj[rx_keys[k]];", 
    "\t//alert( 'regex=\\n'+JSON.stringify( parent_key+rx_keys[k], null, 2) )", 
    "\t\t\t\t", 
    "\t\t\t\tif( regex.constructor.name === 'RegExp' ) ", 
    "\t\t\t\t\t_findMatches(regex, parent_key+rx_keys[k]);", 
    "\t\t\t\t\t//var match = regex.exec(content);", 
    "\t\t\t\t else", 
    "\t\t\t\t\t_loopRegExSubobject(regex, rx_keys[k]+'.');", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t}", 
    "\t\t/** find all matches, loop them and set to match_all object.", 
    "\t\t *", 
    "\t\t *\t!!! GET REGEX !!! core element of code, this found each regex", 
    "\t\t *", 
    "\t\t * @param\tobject\tregex\tis RegExp expression or subobject from array regexe_definitions", 
    "\t\t * @param\tstring\trx_key\tis dot notation key of regex from var regexe E.G: 'function.private'", 
    "\t\t */", 
    "\t\tfunction _findMatches(regex, rx_key='') {", 
    "\t\t\tLogger.info([regex,rx_key],'_findMatches');", 
    "\t\t\t//if(rx_key==='') rx_key = _this.options.type.split(/\\./gi).pop();", 
    "\t\t\tif(rx_key==='') var rx_key = _this.options.type;\t\t\t", 
    "\t\t\t/*", 
    "\t\t\t\t!!! GET REGEX !!!", 
    "\t\t\t*/", 
    "\t\t\tvar matches_all_source\t= content.matchAll(regex);", 
    "\t\t\t//Logger.info('matches_all_source').variable(matches_all_source);", 
    "\t\t\t/* LOOP all found matches_all_source */", 
    "\t\t\tif(matches_all_source)", 
    "\t\t\t\tfor(var m=0; m<matches_all_source.length;m++) {", 
    "\t\t\t\t\t_setMatch(matches_all_source[m], rx_key);", 
    "\t\t\t\t\t//alert( 'matches[m]=\\n'+JSON.stringify( matches[m].index, null, 2) )", 
    "\t\t\t\t}", 
    "\t\t\t//else ", 
    "\t\t\t\t//Logger.info( 'key: '+rx_key+' - Not Found', true).log();", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** set single match object to var match_all.", 
    "\t\t * ", 
    "\t\t * @param\tarray\tmatch result object of RegEx match: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match#Return_value", 
    "\t\t * @param\tstring\trx_key\tis dot notation key of regex from var regexe E.G: 'function.private'", 
    "\t\t*/", 
    "\t\tfunction _setMatch(match, rx_key){", 
    "\t\t\t", 
    "\t\t\tvar match_full\t= match[0];", 
    "\t\t\tvar match_group\t= match.pop();\t\t\t\t", 
    "\t\t\t//var index_start\t= currentPos + match.index + ( match_full.length - match_group.length ); // correct group start position", 
    "\t\t\tvar index_start\t= match.index + ( match_full.length - match_group.length ); // correct group start position\t\t", 
    "\t\t\tvar index_end\t= _getMatchEndPosition(match);", 
    "\t\t\tmatches_all[index_start] = {'start':index_start, 'end':index_end, 'rx_key':rx_key, 'match':match_group};", 
    "\t\t}", 
    "\t", 
    "\t", 
    "\t\t/**", 
    "\t\t * FIND CLOSEST NUMBER IN ARRAY", 
    "\t\t *", 
    "\t\t * @param\tarray\tnumbers\tSORTED array for searching", 
    "\t\t * @param\tnumber\tnum\tvalue for search", 
    "\t\t * @param\tmode\tstring\t'void|down|up'\tfind ABSOLUTE closest, 'down' find closest but lower number, 'up' find closest but higher number", 
    "\t\t * ", 
    "\t\t\tvar numbers\t= [2, 5, 12, 13];", 
    "\t\t\tvar closest_absolute\t= getClosestNumber(arr, 7);", 
    "\t\t\tvar closest_lower\t= getClosestNumber(arr, 7, 'down');", 
    "\t\t\tvar closest_upper\t= getClosestNumber(arr, 7, 'up');", 
    "\t\t */", 
    "\t\tfunction _getClosestKey(matches_all_keys, num, mode=''){", 
    "\t\t", 
    "\t\t\tvar diff=1000;", 
    "\t\t\tvar result;", 
    "\t\t\tfor(var k=0; k<matches_all_keys.length;k++) {", 
    "\t\t", 
    "\t\t\t\tvar m;", 
    "\t\t\t\t/* GET ABSOLUTE CLOSEST NUMBER*/", 
    "\t\t\t\tif(mode ===''){", 
    "\t\t\t\t\tm = Math.abs(num-matches_all_keys[k]);", 
    "\t\t\t\t\tif(m<diff){ ", 
    "\t\t\t\t\t\tdiff=m; ", 
    "\t\t\t\t\t\tresult=matches_all_keys[k];", 
    "\t\t\t\t\t}", 
    "\t\t\t", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tm = num-matches_all_keys[k];", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER LOWER */", 
    "\t\t\t\t\tif( mode ==='down' && m>0 )", 
    "\t\t\t\t\t\tresult=matches_all_keys[k];", 
    "\t\t\t\t\t", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER HIGHER */\t\t\t", 
    "\t\t\t\t\telse if( mode ==='up' && m<0 )", 
    "\t\t\t\t\t\treturn matches_all_keys[k];", 
    "\t\t\t\t}  ", 
    "\t\t\t}", 
    "\t\t\treturn result;", 
    "\t\t}", 
    "\t\t\t\t/** get used Regex objects by options.type", 
    "\t\t\t *", 
    "\t\t\t * get key by current Language", 
    "\t\t\t * ", 
    "\t\t\t */", 
    "\t\tfunction _getRegexObjects(){", 
    "\t\t\t//alert( '_this.options=\\n'+JSON.stringify( _this.options, null, 2) )", 
    "\t\t\t", 
    "\t\t\t//Logger.info(_this.options.type);", 
    "\t\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;\t\t", 
    "\t", 
    "\t\t\t/* IF RegEx ty is not specified */", 
    "\t\t\tif( _this.options.type === '')", 
    "\t\t\t\treturn regexe_definitions[lang];", 
    "\t\t\t//alert(  _this.options.type );", 
    "\t\t\t", 
    "\t\t\t/* ADD per language prefix if not defined */", 
    "\t\t\tvar split_key = _this.options.type.split(/\\./gi);", 
    "\t\t\tvar key = typeof regexe_definitions[split_key[0]] === 'undefined' ? lang +'.'+ _this.options.type : _this.options.type;", 
    "\t\t\t", 
    "\t\t\tLogger.info(key, 'key').force(false);\t\t", 
    "\t\t\treturn _getObjectItem(regexe_definitions, key);", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** get first item from this.matches_all", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tfunction _setMatchFound(){", 
    "\t\t\tvar matches_all_keys\t= Object.keys(matches_all);", 
    "\t\t\t//Logger.info(matches_all_keys);", 
    "\t\t\tswitch (_this.options.occurence) {", 
    "\t\t\t\tcase 'first':", 
    "\t\t\t\t\tkey_used = matches_all_keys[0];break;", 
    "\t\t\t\tcase 'last':", 
    "\t\t\t\t\tkey_used = matches_all_keys.pop();break;", 
    "\t\t\t\tcase 'prev':", 
    "\t\t\t\t\tkey_used = _getClosestKey(matches_all_keys, currentPos, 'down');break;", 
    "\t\t\t\tcase 'next':", 
    "\t\t\t\t\tkey_used = _getClosestKey(matches_all_keys, currentPos, 'up');break;", 
    "\t\t\t\tdefault:", 
    "\t\t\t\t\tkey_used = _getClosestKey(matches_all_keys, currentPos);", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\t//Logger.info(key_used);", 
    "\t\t\tthis.match_found =  matches_all[key_used];", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** get object item via dot notation", 
    "\t\t *", 
    "\t\t */", 
    "\t\tfunction _getObjectItem(obj, dotNot) {", 
    "\t", 
    "\t\t\tdotNot = dotNot.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties", 
    "\t\t\tdotNot = dotNot.replace(/^\\./, '');           // strip a leading dot", 
    "\t\t\tvar arr_keys = dotNot.split('.');", 
    "\t\t\tfor (var k = 0, n = arr_keys.length; k < n; ++k) {", 
    "\t\t\t\tvar key = arr_keys[k];", 
    "\t\t\t\tif (key in obj)", 
    "\t\t\t\t\tobj = obj[key];", 
    "\t\t\t\telse ", 
    "\t\t\t\t\treturn;", 
    "\t\t\t}", 
    "\t\t\treturn obj;", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** _matchesAllSort", 
    "\t\t */", 
    "\t\tfunction _matchesAllSort(){", 
    "\t\t\tvar matches_sorted = {}", 
    "\t\t\tvar keys_all = Object.keys(matches_all).sort(function(e1, e2) { return e1 - e2; });", 
    "\t\t", 
    "\t\t\tfor(var k=0; k<keys_all.length;k++) {", 
    "\t\t\t\tmatches_sorted[keys_all[k]] = matches_all[keys_all[k]]", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tmatches_all = matches_sorted;", 
    "\t\t}", 
    "\t", 
    "\t\t/** _getContentAfterCursor", 
    "\t\t * @param string direction 'next|prev' get file content BEFORE or AFTER cursor, OR get all file contents if EMPTY", 
    "\t\t */", 
    "\t\tfunction _getContent(){", 
    "\t\t\t", 
    "\t\t\t//if(direction === 'next')", 
    "\t\t\t//\treturn scimoz.getTextRange( currentPos, scimoz.textLength);", 
    "\t\t\t//else if(direction === 'prev')", 
    "\t\t\t//\treturn scimoz.getTextRange( 0, currentPos );", 
    "\t\t\t//return scimoz.getTextRange( 0, scimoz.textLength);", 
    "\t\t\treturn require(\"ko/editor\").getValue();", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** FIND CLOSING BRACKET if opening bracket is find on the end of string", 
    "\t\t *", 
    "\t\t * @param\tstring\tcontent\tpart of file content", 
    "\t\t * @param\tint\tstart_pos\tstart position of param content", 
    "\t\t *", 
    "\t\t * @return\tinteger\tend position of closing bracket OR end postion of given content", 
    "\t\t */", 
    "\t\tfunction _getMatchEndPosition(match_obj){", 
    "\t\t\t", 
    "\t\t\tvar match_content\t= match_obj[0];", 
    "\t\t\t", 
    "\t\t\tif ( match_content.match(/[{\\(\\[]\\s*$/gi) !== null ) {", 
    "\t", 
    "\t\t\t\t/* GO TO OPEN BRACKET ON THE END OF MATCH */", 
    "\t\t\t\tscimoz.currentPos = match_obj.index + match_content.length;", 
    "\t\t\t\tko.commands.doCommand('cmd_jumpToMatchingBrace');", 
    "\t\t\t\t", 
    "\t\t\t\t//scimoz.currentPos = match_obj.index;\t\t\t", 
    "\t\t\t\t//ko.commands.doCommand('cmd_blockSelect');", 
    "\t\t\t\treturn _getEndingCharacter(scimoz.currentPos);", 
    "\t\t\t}", 
    "\t\t\treturn match_obj.index + match_content.length;", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** FIND ending bracket UP TO line end char like ';' on mutlilines\tE.G: ' }\\n) ;'", 
    "\t\t *  IF NOT FOUND TRY find ending bracket on single line\tE.G: '}'.", 
    "\t\t*/", 
    "\t\tfunction _getEndingCharacter(end_pos){", 
    "\t\t\tvar match_ending_char\t= scimoz.getTextRange( end_pos, scimoz.textLength).match(/([\\r\\n\\s}\\)]+;|[\\s}\\)]+)/gi);", 
    "\t\t\tif (match_ending_char)", 
    "\t\t\t\treturn end_pos + match_ending_char[0].replace(/\\s+$/gi, '').length;", 
    "\t\t\t", 
    "\t\t\treturn end_pos;", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** _restoreInitPosition", 
    "\t\t */", 
    "\t\tfunction _restoreInitPosition() {", 
    "\t\t\tscimoz.currentPos\t= currentPos;", 
    "\t\t\tscimoz.anchor\t= currentPos;", 
    "\t\t\tscimoz.scrollCaret();", 
    "\t\t}", 
    "\t\t", 
    "\t}/*------ END OF CONSTRUCTOR -------------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t", 
    "", 
    "", 
    "", 
    "\t", 
    "\t///** _getRegExMatch", 
    "\t// */", 
    "\t//CodeFinder.prototype._getRegExMatch = function(key, regex){", 
    "\t//\tvar match_string = this.content.after.match(regex);\t\t", 
    "\t//\tif (match_string) ", 
    "\t//\t\tthis.matches_all[key] = match_string[0];", 
    "\t//};", 
    "\t/*------   END   -------------------------------------------------------------------------------------------------*/", 
    "   return CodeFinder;", 
    "})();", 
    "", 
    "", 
    "", 
    "var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "if(current_filename === 'TestPhpDoc.js'){", 
    "\t", 
    "\t", 
    "\t\tvar _CodeFinder\t= new ko.extensions.CodeFinder();", 
    "\t\t", 
    "\t\t//_CodeFinder.findCode('function','next').selectMatch()", 
    "\t\t_CodeFinder.findCode('','next').selectMatch();", 
    "\t", 
    "//\t//_CodeFinder.findCode();", 
    "//\t//_CodeFinder.findCode('function','');", 
    "//\t//_CodeFinder.findCode('function','next');", 
    "//\t//_CodeFinder.findCode('function','prev');\t", 
    "//\t//_CodeFinder.findCode('function','first');", 
    "//\t//_CodeFinder.findCode('function','last');", 
    "//\t", 
    "//\t//_CodeFinder.findCode('','next');\t", 
    "//\t//_CodeFinder.findCode('function','next');", 
    "//\t//_CodeFinder.findCode('return','next');\t", 
    "//\t//_CodeFinder.findCode('function.private','next');\t", 
    "//", 
    "//\t//var match_comment = _CodeFinder.findCode('global.comment.dockblock','next');", 
    "//\tvar match_comment = _CodeFinder.findCode('global.comment','next');\t", 
    "//", 
    "//", 
    "//\t_CodeFinder.selectMatch();", 
    "//\t//var Logger\t= new ko.extensions.Logger('CodeFinder.js');", 
    "//\t//var modes = ['', 'next','prev','first','last'];", 
    "//\t", 
    "//\t//for(var m=1; m<=modes.length;m++) {", 
    "//\t//\tvar mode = modes[m-1];", 
    "//\t//\tsetTimeout( function(){ ", 
    "//\t//\t\t_CodeFinder.findCode('function',mode);\t", 
    "//\t//\t\t_CodeFinder.selectMatch();", 
    "//\t//\t\t//Logger.info(mode).log();", 
    "//\t//\t}, (m*1500));", 
    "//\t//}", 
    "}", 
    "////var _CodeFinder\t= new ko.extensions.CodeFinder();", 
    ""
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}