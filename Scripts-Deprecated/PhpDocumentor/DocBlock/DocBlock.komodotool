{
  "keyboard_shortcut": "", 
  "name": "DocBlock", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " */", 
    "ko.extensions.DocBlock = (function() {", 
    "", 
    "\t/** keys for this.tags = {}", 
    "\t *", 
    "\t * Values are parsed via ParseDocBlock.parse() or ParseDocBlock.parse() ", 
    "\t * online reference: https://www.phpdoc.org/docs/latest/references/phpdoc/tags/method.html", 
    "\t *", 
    "\t * ", 
    "\t*/", 
    "\tvar\tall_tag_keys = {\t/* 1 group */\t", 
    "\t\t'summary|description':\t['tag', 'lines'],\t\t\t", 
    "\t\t'@see':\t['tag', 'uri'],", 
    "\t\t'@subpackage':\t['tag', 'name'],", 
    "\t\t'@api|@filesource|@package':\t['tag', 'string'],", 
    "\t\t'@category|@copyright|@ignore|@internal|@todo|@uses':\t['tag', '[description]'],", 
    "\t\t\t/* 2 groups */", 
    "\t\t'@author':\t['tag', 'name',\t'email'],", 
    "\t\t'@license':\t['tag', 'url',\t'name'],", 
    "\t\t'@link':\t['tag', 'url',\t'[description]'],\t\t\t", 
    "\t\t'@return|@throws':\t['tag', 'type',\t'[description]'],\t\t\t\t\t\t\t\t\t\t\t\t", 
    "\t\t'@deprecated|@since|@version':\t['tag', 'version',\t'[description]'],", 
    "\t\t\t/* 3 groups */", 
    "\t\t'@param|@property|@property_read|@property_write|@global|@var':\t['tag', 'type',\t'name',\t'[description]'],", 
    "\t\t'@method':\t['tag', 'return_type',\t'name',\t'param'],", 
    "\t\t'@source':\t['tag', '[start_line]',\t'[number_of_lines]',\t'[description]'],", 
    "\t\t'@example':\t['tag', '[location]',\t'[start_line]',\t'number_of_lines',\t'[description]'],\t\t", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tfunction DocBlock(){", 
    "  ", 
    "\t\t/*----   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3(this, false).clear(false).off(true);", 
    "", 
    "\t\t/*----   PUBLIC PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.tags = {};\t\t", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/\t", 
    "\t\t/** set tags data to DocBlock.tags", 
    "\t\t * ", 
    "\t\t * @param\tobject\ttags\tsource for DockBlock.tags", 
    "\t\t * Example of tags = {  ", 
    "\t\t *\t\t\"summary\":[  ", 
    "\t\t *\t\t   \"Summary Lorem ipsum luctus habitasse ac aenean donec ultrices maecenas arcu,\",", 
    "\t\t *\t\t   \"Second line of summary.\"", 
    "\t\t *\t\t],", 
    "\t\t *\t\t\"description\":[  ", 
    "\t\t *\t\t   \"A Description Lorem ipsum luctus habitasse ac aenean\",", 
    "\t\t *\t\t   \"B donec ultrices maecenas arcu, risus primis sodales\",", 
    "\t\t *\t\t   \"C urna feugiat platea ultrices maecenas arcu.\"", 
    "\t\t *\t\t],", 
    "\t\t *\t\t\"@param\":[  ", 
    "\t\t *\t\t   [  ", 
    "\t\t *\t\t\t  \"@param\",", 
    "\t\t *\t\t\t  \"string\",", 
    "\t\t *\t\t\t  \"$param1\",", 
    "\t\t *\t\t\t  \"parameter to function\"", 
    "\t\t *\t\t   ],", 
    "\t\t *\t\t   [  ", 
    "\t\t *\t\t\t  \"@param\",", 
    "\t\t *\t\t\t  \"boolean\",", 
    "\t\t *\t\t\t  \"$param2\",", 
    "\t\t *\t\t\t  \"true\\false parameter to function\"", 
    "\t\t *\t\t   ]", 
    "\t\t *\t\t],", 
    "\t\t *\t\t\"@return\":[  ", 
    "\t\t *\t\t   [  ", 
    "\t\t *\t\t\t  \"@return\",", 
    "\t\t *\t\t\t  \"string\",", 
    "\t\t *\t\t\t  \"returned value description\"", 
    "\t\t *\t\t   ]", 
    "\t\t *\t\t]", 
    "\t\t *\t}", 
    "\t\t */", 
    "\t\tthis.setDockBlockTags = function(tags){", 
    "\t\t\t//Logger.info(tags, 'tags');", 
    "\t\t\tvar tags_keys = Object.keys(tags);", 
    "\t\t\tLogger.info( tags_keys, 'DocBlock.setDockBlockTags @var tags_keys');\t\t\t", 
    "\t ", 
    "\t\t\tfor(t=0; t<tags_keys.length;t++) {", 
    "\t\t\t\tvar tag = tags_keys[t];", 
    "\t\t\t\t//Logger.info(tag, 'tag');", 
    "\t\t\t\tthis.setDockBlockTag(tag, tags[tag]);", 
    "\t\t\t}", 
    "\t\t\t//Logger.info( this.tags, 'DocBlock.tags').force();", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** set tag to this.tags object", 
    "\t\t *", 
    "\t\t * @param\ttype\ttag_name\ttag keyword name\thttps://www.phpdoc.org/docs/latest/internals/tags.html", 
    "\t\t * @param\tarray\ttag_keys \tvalues for keys in tag_keys\tE.G: for tag var\ttag_keys  = ['boolean','$param2','Description']", 
    "\t\t *", 
    "\t\t * @return void", 
    "\t\t */", 
    "\t\tthis.setDockBlockTag = function( tag_name, tag_values ){", 
    "\t\t\tLogger.info( [tag_name, tag_values], 'DocBlock.setDockBlockTag');", 
    "\t\t\tif(tag_values === '<undefined>')", 
    "\t\t\t\tthis.tags[tag_name] = '<undefined>';", 
    "\t\t\telse{", 
    "\t\t\t\t//var tag_key\t= _getAllTagsKey( tag_name );", 
    "\t\t\t\t//Logger.info(tag_key, 'tag_key');", 
    "\t\t\t\t//if(tag_key){", 
    "\t\t\t\t\tthis.tags[tag_name] = _getTagObject(tag_name, tag_values);", 
    "\t\t\t\t//} else", 
    "\t\t\t\t\t//alert( \"ERROR:\\nDocBlock.setDockBlockTag()\\nvariable tag_key is NOT VALID\\nvar tag_key = \"+tag_key );\t\t\t\t", 
    "\t\t\t}", 
    "\t\t};", 
    "", 
    "\t\t/*----   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** get object representing line or lines of tag", 
    "\t\t * ", 
    "\t\t * @param\tstring\ttag_name\ttag name", 
    "\t\t * @param\tstring\ttag_key\tkey from var tag_keys\tE.G: '@param|@property|@var|...'", 
    "\t\t * @param\tarray\ttag_data\t2D array of tag parts (words) \tE.G: tag_data = [", 
    "\t\t * \t\t\t\t\t['@param', 'string', '$param1','foo text'],", 
    "\t\t * \t\t\t\t\t['@param', 'boolean','$param2','foo text']", 
    "\t\t * \t\t\t\t];", 
    "\t\t *", 
    "\t\t * @return\tobject\ttag_data merged with keys into objects\tE.G: [", 
    "\t\t * \t\t\t\t{tag:'@param', 'type':'string', 'name':'$param1','description':'foo text'},", 
    "\t\t * \t\t\t\t{tag:'@param', 'type':'boolean','name':'$param2','description':'foo text'}", 
    "\t\t * \t\t\t];", 
    "\t\t */", 
    "\t\tfunction _getTagObject( tag_name, tag_data ){", 
    "\t\t\tLogger.info([tag_name, tag_data],'_getTagObject()' );", 
    "\t\t\tvar tag_key\t= _getAllTagsKey( tag_name );", 
    "\t\t\t", 
    "\t\t\t/* return data without change if tag is 'summary' OR 'description' */", 
    "\t\t\tif(tag_key === 'summary|description')", 
    "\t\t\t\treturn tag_data;", 
    "\t\t\t", 
    "\t\t\t/* set tag_data to 2D matrix, IF ONLY ONE TAG ELEMENT... beacause of easy loop when merging */", 
    "\t\t\tif(tag_data[0].constructor !== Array ) tag_data = [tag_data];", 
    "\t\t\t", 
    "\t\t\t/* map array if mutliple tags per tag type, e.g: '@param' can has mutliple occurences  */", 
    "\t\t\tvar tag_object = tag_data.map(function(tag_data){", 
    "\t\t\t\treturn _mergeTagKeysAndValues( tag_name, all_tag_keys[tag_key], tag_data );", 
    "\t\t\t});", 
    "\t\t\t", 
    "\t\t\treturn tag_object.length > 1 ? tag_object : tag_object[0];", 
    "\t\t", 
    "\t\t}", 
    "\t\t\t\t", 
    "\t\t/** merge tag_keys and tag_values to object", 
    "\t\t *", 
    "\t\t * @param\tstring\ttag_name\ttag name E.G: 'param'", 
    "\t\t * @param\tstring\ttag_keys\tkeys from var tag_keys\tE.G: ['type','name','description']", 
    "\t\t * @param\tarray\ttag_values\tvalues for tag\tE.G: ['string', 'param1', 'Foo description']", 
    "\t\t *", 
    "\t\t * `@return\tobject\tmerged keys and values arrays     E.G: {tag:'@param', type:'string', name:'param1', description:'Foo description' }", 
    "\t\t */", 
    "\t\tfunction _mergeTagKeysAndValues( tag_name, tag_keys, tag_values ){", 
    "\t\t\tLogger.info([tag_name, tag_keys, tag_values], '_mergeTagKeysAndValues()');", 
    "\t\t\t//tag_keys\t= tag_keys.concat(['tag']);", 
    "\t\t\t//var doc_block\t= {'tag':tag_name};", 
    "\t\t\tvar doc_block\t= {};\t\t\t", 
    "\t\t\tfor(var k=0; k<tag_keys.length;k++) {", 
    "\t\t\t\tvar tag_key = tag_keys[k].replace(/[\\[\\]]/gi, ''); // get sub value from var\tall_tag_keys and remove brackets '[]' E.G: [description] >>> description", 
    "\t\t\t\tdoc_block[tag_key] = tag_values[k];", 
    "\t\t\t}", 
    "\t\t\tLogger.info(doc_block, '_mergeTagKeysAndValues() @return');", 
    "\t\t\treturn doc_block;", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** find key matching param tag in array tag_keys  ", 
    "\t\t *", 
    "\t\t * @param\tstring\ttag keyword name", 
    "\t\t *", 
    "\t\t * @return\tstring\tkey from tag_object\tE.G: '@return|@throws'", 
    "\t\t */", 
    "\t\tfunction _getAllTagsKey( tag ){", 
    "\t\t\t//Logger.info(tag, '_getAllTagsKey()');", 
    "\t\t\tvar tag_keys\t= Object.keys(all_tag_keys);", 
    "\t\t\tfor(var k=0; k<tag_keys.length;k++) {", 
    "\t\t\t\tif (tag_keys[k].match(tag) !== null )", 
    "\t\t\t\t\treturn tag_keys[k]", 
    "\t\t\t}", 
    "\t\t}", 
    "", 
    "", 
    "\t\t///** setTagToData TO DEETE", 
    "\t\t// */", 
    "\t\t//DocBlock.prototype.setTagToData = function(tag, tag_object ){", 
    "\t\t//\tif(!this.tags[tag]) {", 
    "\t\t//\t\tthis.tags[tag] = tag_object ;\t// assign new tag_object ", 
    "\t\t//\t\treturn;", 
    "\t\t//\t}", 
    "\t\t//\tif( !Array.isArray(this.tags[tag]) )", 
    "\t\t//\t\tthis.tags[tag] = [this.tags[tag]];\t// move tag_object to array if assigned already\t", 
    "\t\t//\t", 
    "\t\t//\tthis.tags[tag].push(tag_object);\t// add tag_object to array", 
    "\t\t//};", 
    "\t}", 
    "\treturn DocBlock;", 
    "", 
    "})();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}