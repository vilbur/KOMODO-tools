{
  "keyboard_shortcut": "Alt+Shift+T", 
  "name": "Komodotool", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " * !!!!!!!!!!!!!", 
    " * \t\tKomodotool is DEPRECATED\\nUse ko.extensions.FindPart() instead", 
    " * !!!!!!!!!!!!!", 
    " * ", 
    " *", 
    " * WRAPPER for part object - RESULT of ko.projects.findPart().", 
    " *  ", 
    " *  Komodo documentation of findPart() http://docs.komodoide.com/SDK/macroapi#macroapi_findPart", 
    " *", 
    " *\t@param\tstring path path OR url OR filename OR name of Komodotool", 
    " *\t\tMUST STARTS WITH:\t'macro2://..'\tOR\t'snippet2://..'", 
    " *\t\tOR MUST END WITH:\t'~/kmdtfile.js'\tOR\t'~/kmdtfile.snippet'", 
    " *", 
    " *\t@param\tstring type of Komodotool 'macro|snippet'", 
    " *\t", 
    " *\t_Komodotool.open();\t// open kmdtool", 
    " *\t_Komodotool.run();\t// invoke Komodotool", 
    " *\t_Komodotool.getPath();\t// get RELATIVE url  to Komodotool_v2 ", 
    " *\t_Komodotool.getPath('absolute');\t// get ABSOLUTE path to Komodotool_v2 ", 
    " *", 
    " * @Example:\texample of path path", 
    " *\tnew ko.extensions.Komodotool_v2('macro2://24499/TestScript.js');", 
    " *\tnew ko.extensions.Komodotool_v2('TestScript.js');", 
    " *\tnew ko.extensions.Komodotool_v2('TestScript', 'macro'); *", 
    " *\tnew ko.extensions.Komokdotool('snippet2://99999/timeout.snippet'); \t", 
    " *\tnew ko.extensions.Komodotool_v2('timeout', 'snippet'); \t", 
    " *", 
    " */", 
    "/* Properties of Komodotool:", 
    "\t\t.hasAttribute", 
    "\t\t.getStringAttribute", 
    "\t\t.getBooleanAttribute", 
    "\t\t.getLongAttribute", 
    "\t\t.id", 
    "\t\t.value", 
    "\t\t.type", 
    "\t\t.name", 
    "\t\t.iconurl", 
    "\t\t.url", 
    "\t\t.path", 
    "\t\t.getFile", 
    "\t\t.setStringAttribute", 
    "\t\t.get_keybinding_description", 
    "\t\t.QueryInterface", 
    "\t\t.observe", 
    "\t\t.prettytype", 
    "\t\t.yaml_url", 
    "\t\t.logic_url", 
    "\t\t.url", 
    "\t\t.project", 
    "\t\t.getAttribute", 
    "\t\t.setAttribute", 
    "\t\t.removeAttribute", 
    "\t\t.setLongAttribute", 
    "\t\t.setBooleanAttribute", 
    "\t\t.prefset", 
    "\t\t.dump", 
    "\t\t.serialize", 
    "\t\t.getDragData", 
    "\t\t.getDragDataByFlavor", 
    "\t\t.getDragFlavors", 
    "\t\t.save", 
    "\t\t.parent", 
    "\t\t.evalAsPython", 
    "\t\t.evalAsPythonObserver", 
    "*/", 
    "/** Komodotool", 
    " */", 
    "ko.extensions.Komodotool = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction Komodotool(_input='', type=null){", 
    "\t\t", 
    "\t\talert('Komodotool is DEPRECATED\\nUse ko.extensions.FindPart() instead')", 
    "\t\trequire('ko/console').warn('Komodotool is DEPRECATED\\nUse ko.extensions.FindPart() instead');", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\t//var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3(this).clear(false).off(true );", 
    "\t\t//alert( \"Komodotool:\" );", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\tthis.input\t= _input;", 
    "\t\t//this.input\t= null;\t\t", 
    "\t\tthis.match\t= {};\t\t", 
    "\t\t", 
    "\t\tthis.Komodotool\t= null;", 
    "\t\tthis.attributes = {", 
    "\t\t\tpath:\tnull,", 
    "\t\t\turl:\tnull,\t\t\t", 
    "\t\t\ttype:\ttype,", 
    "\t\t\tname:\tnull,", 
    "\t\t\text:\tnull\t\t\t", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "\t\t", 
    "\t\t/** setParams", 
    "\t\t */", 
    "\t\tthis.setParams = function(_input, type=null) {", 
    "\t", 
    "\t\t\tthis.input\t= _input;\t\t\t", 
    "\t\t\tthis.attributes.type\t= type;", 
    "", 
    "\t\t\tif(this.input){", 
    "\t\t\t\t_parsePath();", 
    "\t\t\t\tthis._setKomodotool();\t\t\t\t", 
    "\t\t\t}", 
    "", 
    "\t\t\tLogger.info(this, 'this');", 
    "\t\t\tLogger.info(this.Komodotool.url, 'this.Komodotool');\t\t\t\t\t\t", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** run", 
    "\t\t */", 
    "\t\tthis.run = function(){", 
    "\t\t\tko.projects.invokePart(this.Komodotool);\t\t\t", 
    "\t\t};", 
    "\t\t/** open", 
    "\t\t */", 
    "\t\tthis.open = function(){", 
    "\t\t\tko.open.URI( this.Komodotool.url );", 
    "\t\t};", 
    "\t\t/** getPath", 
    "\t\t */", 
    "\t\tthis.getPath = function(type='relative'){", 
    "\t\t\tif(type=='relative')", 
    "\t\t\t\treturn this.url; ", 
    "\t\t\treturn this.path;", 
    "\t\t};", 
    "\t\t   ", 
    "\t\t/**\t_parsePath", 
    "\t\t *\tmatch_full_path\t='C:\\Users\\vilbur\\AppData\\Local\\ActiveState\\KomodoIDE\\10.1\\tools\\Scripts\\Ko_extensions\\Classes\\Komodotool\\Komodotool.Komodotool'", 
    "\t\t *\tmatch_url\t='macro2://27270/Komodotool.js'", 
    "\t\t *\tmatch_full_name\t='Komodotool.js'\t ", 
    "\t\t */", 
    "\t\tfunction _parsePath(){", 
    "\t\t\tLogger.info(_this.input, '_parsePath()');", 
    "\t\t\tvar rx_path = {", 
    "\t\t\t\tfull_path:\t/^[A-Z]:[\\/\\\\]+.*?tools[\\/\\\\]+(.*?(?=[\\/\\\\]+))[\\/\\\\]+(?:.*?[\\/\\\\]+)*(\\S+)\\.(Komodotool)$/gi,\t\t\t\t", 
    "\t\t\t\t//url:\t/^(macro|snippet)\\d:\\/\\/(\\d+)\\/(\\S+)(\\.\\w+)$/gi,", 
    "\t\t\t\turl:\t/^(?!file)([^\\d]+)\\d*:\\/\\/(\\d+)\\/(\\S+)(\\.\\w+)$/gi,\t\t\t\t", 
    "\t\t\t\tfull_name:\t/^([^\\/]+)\\.(\\S*)$/gi", 
    "\t\t\t};", 
    "\t\t", 
    "\t\t\tvar rx_path_keys = Object.keys(rx_path);", 
    "\t\t\tfor(r=0; r<rx_path_keys.length;r++) {", 
    "\t\t\t\tvar key = rx_path_keys[r];", 
    "\t\t\t\t_this.match[key] = _this.input.matchAll_v2(rx_path[key]);", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tif (_this.match.full_path) ", 
    "\t\t\t\t_setAttributes( _this.match.full_path[2][1], _this.match.full_path[3][1], _this.match.full_path[1][1].match(/abbreviations/gi) !== null ? 'snippet' : 'macro' );", 
    "\t\t\t", 
    "\t\t\telse if(_this.match.url) ", 
    "\t\t\t\t_setAttributes( _this.match.url[3][1], _this.match.url[4][1], _this.match.url[1][1] );", 
    "\t\t\t", 
    "\t\t\telse if (_this.match.full_name) ", 
    "\t\t\t\t_setAttributes( _this.match.full_name[1][1], _this.match.full_name[2][1] );", 
    "\t\t\t\t", 
    "\t\t\telse", 
    "\t\t\t\t_this.attributes.name = _this.input;", 
    "\t\t\t\t", 
    "\t\t\t//Logger.info(_this, '_this');", 
    "\t\t\t//Logger.info(_this.match, '_this.match');", 
    "\t\t\t//Logger.info(_this.attributes, '_this.attributes');\t\t\t\t\t\t", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** _setAttributes", 
    "\t\t */", 
    "\t\tfunction _setAttributes( name, ext=null, type=null ){", 
    "\t\t\t//require('ko/console').info('_setAttributes('+name+', '+ext+', '+type+')');", 
    "\t\t\t_this.attributes.name\t= name;", 
    "\t\t\t_this.attributes.ext\t= _getMatchExt(ext);", 
    "\t\t\t_this.attributes.type\t= _getMatchType(type);", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** get Komodotool type by extension if not defined", 
    "\t\t *  TYPE 'snippet' IF _this.ext=='snippet' OTHERWISE TYPE IS 'macro'", 
    "\t\t */", 
    "\t\tfunction _getMatchType(type){", 
    "\t\t\treturn type ? type : _this.attributes.ext=='snippet' ? 'snippet' : 'macro';\t\t\t\t", 
    "\t\t}", 
    "\t\t/** _getExt ", 
    "\t\t */", 
    "\t\tfunction _getMatchExt(ext){", 
    "\t\t\t/* null, js, snippet  */", 
    "\t\t\treturn (!_this.attributes.ext && ext) ? ext : _this.attributes.ext;", 
    "\t\t}", 
    "", 
    "\t\t/** _setKomodotool", 
    "\t\t */", 
    "\t\tthis._setKomodotool = function(){", 
    "\t\t\t//if(this.attributes.type && this.attributes.name)", 
    "\t\t\t\tthis.Komodotool\t= komodo.findPart( this.attributes.type, this.attributes.name );", 
    "\t\t\t\t//this.Komodotool\t= komodo.findPart('macro', 'Komodotool', 'toolbox');", 
    "\t\t\t\tthis.attributes.path = this.Komodotool.path;", 
    "\t\t\t\tthis.attributes.url = this.Komodotool.url;\t\t\t\t", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** dump", 
    "\t\t */", 
    "\t\tthis.dump = function(){", 
    "\t\t\talert( 'Komodotool=\\n'+JSON.stringify( this, null, 2) );", 
    "\t\t};", 
    "\t\t//", 
    "\t\t///** _exception", 
    "\t\t// */", 
    "\t\t//this._exception = function(exception_type){", 
    "\t\t//", 
    "\t\t//\tif(exception_type=='Komodotool' && !_this.Komodotool ) ", 
    "\t\t//\t\treturn true;", 
    "\t\t//\t ", 
    "\t\t//\treturn false; // DEBUG", 
    "\t\t//};", 
    "\t\t", 
    "\t\t", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t\t", 
    "\t\t/*--------   INIT   ------------------------------------------------------------------------------------*/\t\t", 
    "\t\tif(_input)", 
    "\t\t\tthis.setParams(_input, type);", 
    "\t\t//if(this._exception('Komodotool')) return;", 
    "", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn Komodotool;", 
    "})();", 
    "", 
    "", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "/*\tTEST for Komodotool\t*/", 
    "/*\tProperties test for object\t*/", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "", 
    "ko.extensions.KomodotoolTest = (function() {", 
    "\tvar TestObject\t= new ko.extensions.Komodotool();", 
    "\tvar test_properties\t= ['Komodotool.url'];", 
    "\t//var test_properties\t= ['input'];\t", 
    "\tvar test_methods     = {", 
    "\t\t", 
    "\t\t//setParams:\t['macro2://28434/TestScript.js'],", 
    "\t\t//", 
    "\t\t//'setParams~full_path':\t['C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\10.1\\\\tools\\\\Scripts\\\\Ko_extensions\\\\Classes_-_vilbur\\\\Komodotool\\\\Komodotool.komodotool'],", 
    "\t\t//'setParams~backslash':\t['C:/Users/vilbur/AppData/Local/ActiveState/KomodoIDE/10.1/tools/Scripts/Ko_extensions/Classes_-_vilbur/Komodotool/Komodotool.komodotool'],\t\t", 
    "\t\t//'setParams~macro_by_url':\t['macro2://27028/Komodotool.js'],", 
    "\t\t//'setParams~macro_by_fullname':\t['Komodotool.js'],", 
    "\t\t//'setParams~macro_by_type':\t['Komodotool', 'macro' ],", 
    "\t\t//", 
    "\t\t//'setParams~snippet_by_url':\t['snippet2://27028/If.snippet'],", 
    "\t\t//'setParams~snippet_by_fullname':\t['If.snippet'],", 
    "\t\t//'setParams~snippet_by_type':\t['If', 'snippet']", 
    "\t\t", 
    "\t\t'setParams~snippet_by_type':\t['C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\10.1\\\\tools\\\\TestToolboxFolder']", 
    "", 
    "\t};", 
    "", 
    "\tif(ko.extensions.TestObejctProperties)", 
    "\t\t(new ko.extensions.TestObejctProperties(method_toggle=false, properties_toggle=true, clear=true ))", 
    "\t\t\t.test(TestObject, test_methods, test_properties);", 
    "});", 
    "/* RUN TEST */", 
    "//ko.extensions.KomodotoolTest();", 
    "", 
    "/* SINGLE TEST */", 
    "//var Logger\t=  new ko.extensions.Logger_v3('Komodotool.js').clear(true).off(false);", 
    "//(new ko.extensions.Komodotool()).setParams('macro2://28434/TestScript.js');", 
    "//(new ko.extensions.Komodotool()).setParams('macro2://28434/TestScript.js').open();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/wrench-screwdriver.png"
}