{
  "keyboard_shortcut": "Ctrl+U", 
  "name": "characterCaseToggle", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "/* snake_camelCase_toggle.js v1.2*/", 
    "if ( komodo.view ) { komodo.view.setFocus(); }", 
    "var scimoz             = ko.views.manager.currentView.scimoz;", 
    "var converted_lines  = [];", 
    "var lines  = [];", 
    "var wodrs_to_convert = [];", 
    "var words_array = [];", 
    "var final_type_selection;", 
    "var final_type_word;", 
    "", 
    "caseTypes = {", 
    "\t'lowercase'         :'^[^A-Z_]+$',", 
    "\t'Capital'           :'^[A-Z][^A-Z]*$',", 
    "\t'UPPERCASE'         :'^[^a-z_]+$',", 
    "\t'PascalCase'         :'^[A-Z][^A-Z_]+([A-Z][^A-Z]*)+$',", 
    "\t'camelCase'          :'^[^A-Z][^A-Z_]*(([A-Z][^A-Z]*)+)$',", 
    "\t'snake_case_low'    :'^[^A-Z]+_([^A-Z]+_*)+$',", 
    "\t'Snake_Case_Capital':'^[^a-z][^A-Z]+_([^a-z][^A-Z]+_*)+',", 
    "\t'SNAKE_CASE_UPPER'  :'^[^a-z]+_([^a-z]+_*)+$',", 
    "};", 
    "", 
    "ConvertText();", 
    "", 
    "/*-------------------------------------------------------------------------------------------------------------------------*/", 
    "/*\t\t\tFUNCTIONS                                                                                                      */", 
    "/*-------------------------------------------------------------------------------------------------------------------------*/", 
    "", 
    "/**", 
    "**/", 
    "function ConvertText()", 
    "{", 
    "\tgetSelectedText();", 
    "", 
    "\tif ( selectedText!=='')", 
    "\t{", 
    "", 
    "\t\t//var sel_start  = scimoz.wordStartPosition(scimoz.currentPos, true);", 
    "\t\t//var sel_end    = scimoz.wordEndPosition(  scimoz.currentPos, true);", 
    "\t\tvar sel_end    = getSelectionEnd();", 
    "", 
    "\t\tgetLinesArray();", 
    "\t\tconvertLines();", 
    "\t\t//final_text     = selectedText; // DEBUG", 
    "\t\tvar final_text = converted_lines.join('\\n');", 
    "", 
    "\t\t/*\tPASTE NEW TEXT\t*/", 
    "\t\tko.run.output.endSession();", 
    "\t\tko.run.runEncodedCommand( window, 'set /p=\"'+final_text+'\"<nul| clip' );", 
    "\t\t//alert('final_text: '+final_text);", 
    "", 
    "", 
    "\t\tsetTimeout( function(){", 
    "\t\t\tko.commands.doCommand('cmd_paste');", 
    "\t\t\t/*\tSET CURSOR POSITION\t*/", 
    "\t\t\tscimoz.anchor     = sel_end;", 
    "\t\t\tscimoz.currentPos = sel_end + final_text.length;", 
    "\t\t\t//ko.commands.doCommand('cmd_cancel')", 
    "\t\t}, 200);", 
    "\t}", 
    "}", 
    "/**", 
    "* get selection position, cursor will be on START of selection", 
    "**/", 
    "function getSelectionEnd() {", 
    "\tvar scimoz = ko.views.manager.currentView.scimoz;", 
    "\treturn scimoz.currentPos >= scimoz.anchor ? scimoz.anchor : scimoz.currentPos ;", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function convertLines() {", 
    "\tfor (l = 0; l < lines.length; l++) {", 
    "\t\tvar line = lines[l];", 
    "\t\tvar words_line_array = getWordsOnLIneArray(line);", 
    "\t\tvar word_type        = getWordType(words_line_array[0]);", 
    "\t\tsetFinalSelType(word_type);", 
    "\t\t//alert('word_type: '+word_type);", 
    "\t\tvar final_separator       = getSeparator(FinalSelType);", 
    "\t\tvar converted_words_array = convertWords( words_line_array );", 
    "", 
    "\t\t//alert( 'converted_words_array=\\n'+JSON.stringify( converted_words_array, null, 2) )", 
    "\t\tconverted_lines.push( converted_words_array.join( final_separator ) );", 
    "\t}", 
    "}", 
    "/**", 
    "**/", 
    "function convertWords(line) {", 
    "\tvar line_converted = line;", 
    "\tfor (w = 0; w < line.length; w++) {", 
    "\t\tvar word = line[w];", 
    "\t\tif ( word!== '')", 
    "\t\t\tline_converted[w] = convertWord(word);", 
    "\t\t", 
    "\t}", 
    "\treturn line_converted;", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function convertWord( convert_word ) {", 
    "\tvar word_type = getWordType( convert_word );", 
    "\t/*    SPLIT PascalCase AND snake_case WORD    */", 
    "\tswitch ( word_type ) {", 
    "\t\tcase 'PascalCase':", 
    "\t\tcase 'camelCase':", 
    "\t\t\tconvert_word =  convert_word.replace(/([A-Z])/g, ' $1');", 
    "\t\t\tbreak;", 
    "\t\tcase 'snake_case_low':", 
    "\t\tcase 'Snake_Case_Capital':", 
    "\t\tcase 'SNAKE_CASE_UPPER':", 
    "\t\t\tconvert_word =  convert_word.replace(/_/g, ' ');", 
    "\t\t\tbreak;", 
    "\t}", 
    "\tvar snake_word_split = convert_word.replace(/^\\s/g, '').split(' ');", 
    "\tvar result_word      = snake_word_split;", 
    "\tfor (i = 0; i < snake_word_split.length; i++) {", 
    "\t\tvar word = snake_word_split[i];", 
    "\t\tswitch (FinalSelType) {", 
    "\t\t\tcase 'lowercase':", 
    "\t\t\t\tresult_word[i] = word.toLowerCase();", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'Capital':", 
    "\t\t\t\tresult_word[i] = upperCaseFirstLetter(word);", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'UPPERCASE':", 
    "\t\t\t\tresult_word[i] = word.toUpperCase();", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'PascalCase':", 
    "\t\t\t\tresult_word[i] = upperCaseFirstLetter(word);", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'camelCase':", 
    "\t\t\t\t//alert('camelCase');", 
    "\t\t\t\tif (i===0)", 
    "\t\t\t\t\tword = word.toLowerCase();", 
    "\t\t\t\tresult_word[i] = word;", 
    "\t\t\t\t//result_word[i] = 'test'", 
    "", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'snake_case_low':", 
    "\t\t\t\tresult_word[i] = word.toLowerCase();", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'SNAKE_CASE_UPPER':", 
    "\t\t\t\tresult_word[i] = word.toUpperCase();", 
    "\t\t\t\tbreak;", 
    "\t\t\tcase 'Snake_Case_Capital':", 
    "\t\t\t\tresult_word[i] = upperCaseFirstLetter(word);", 
    "\t\t\t\tbreak;", 
    "\t\t\tdefault:", 
    "\t\t\t\tresult_word[i] = word;", 
    "\t\t}", 
    "\t\t/*    EXEPTION if word is 'SIMPLEUPPERCASE' CONVERT to 'simpleuppercase'    !!! NOT TO 'Simpleuppercase'  // IT IS NESSESARY FOR RIGHT TOGGLING    */", 
    "\t\tif ( word_type === 'UPPERCASE' && FinalSelType === 'PascalCase' && selectedText.match(/\\s/g) === null )", 
    "\t\t\tresult_word[i] = word.toLowerCase();", 
    "\t}", 
    "\tvar word_separator = getSeparator(FinalSelType);", 
    "\treturn result_word.join( word_separator );", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function getFetchedLines( final_separator ) {", 
    "\tvar fetched_lines = [];", 
    "\tfor (i = 0; i < words_array.length; i++) {", 
    "\t\tvar line = words_array[i];", 
    "\t\tfetched_lines.push( line.join( final_separator ));", 
    "\t}", 
    "\treturn fetched_lines;", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function getSeparator( word_type ) {", 
    "\tswitch ( word_type ) {", 
    "\t\tcase 'PascalCase':", 
    "\t\tcase 'camelCase':", 
    "\t\t\tseparator= ''; break;", 
    "", 
    "\t\tcase 'snake_case_low':", 
    "\t\tcase 'Snake_Case_Capital':", 
    "\t\tcase 'SNAKE_CASE_UPPER':", 
    "", 
    "\t\t\tseparator= '_'; break;", 
    "", 
    "\t\tdefault:", 
    "\t\t\tseparator =  ' ';", 
    "\t\t\tbreak;", 
    "\t}", 
    "\treturn separator;", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function setFinalSelType(first_word) {", 
    "\tfor ( var caseType in caseTypes )", 
    "\t{", 
    "\t\tif (success)", 
    "\t\t{", 
    "\t\t\tvar selType = caseType;", 
    "\t\t\tbreak;", 
    "\t\t}", 
    "\t\tif ( caseType===first_word )", 
    "\t\t\tvar success = true;", 
    "\t}", 
    "\tif( typeof selType === 'undefined')", 
    "\t\tvar selType = Object.keys(caseTypes)[0];", 
    "\t", 
    "\tFinalSelType = selType;", 
    "}", 
    "", 
    "/*", 
    "fo2o Ba2r baz", 
    "Fo2o Ba2r Baz", 
    "F2OO BA2R BAZ", 
    "F2ooBa2rBaz", 
    "f2ooBa2rBaz", 
    "fo2o_ba2r_baz", 
    "Fo2o_Ba2r_Baz", 
    "FO2O_BA2R_BAZ", 
    "*/", 
    "", 
    "/**", 
    "**/", 
    "function getSelectedText() {", 
    "\t///*    GET SELECTED TEXT    */", 
    "\tselectedText = scimoz.selText;", 
    "\twordCursor   = ko.interpolate.getWordUnderCursor(scimoz);", 
    "\tif ( selectedText==='' && wordCursor !== '') {", 
    "\t\tko.commands.doCommand('cmd_selectWordUnderCursor')", 
    "\t\tselectedText = scimoz.selText;", 
    "\t}", 
    "}", 
    "/*    SPLIT WORDS BY WHITESPACE< TAB OR ENTER    */", 
    "/*    replace space, tab and new line with '\\s', '\\t' , '\\n'    */", 
    "function getLinesArray() {", 
    "\tvar lines_split = selectedText.split(/\\n/gi );", 
    "\t\tfor (l = 0; l < lines_split.length; l++) {", 
    "\t\tlines.push( lines_split[l] );", 
    "\t}", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function getWordsOnLIneArray( words_on_line ) {", 
    "\tvar words_on_line = words_on_line.split(' ');", 
    "\tvar words_on_line_splitted = [];", 
    "\t", 
    "\tfor(var w=0; w<words_on_line.length;w++)", 
    "\t{", 
    "\t\tvar word_on_line = words_on_line[w];", 
    "\t\tif ( word_on_line.length == ' ')", 
    "\t\t\twords_on_line_splitted.push(' ');", 
    "\t\telse", 
    "\t\t\twords_on_line_splitted.push( word_on_line );", 
    "\t}", 
    "\treturn  words_on_line_splitted;", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function getWordType(word) {", 
    "\tfor ( var caseType in caseTypes ) {", 
    "\t\tvar match =  getRegex( word, caseTypes[caseType])", 
    "\t\tif (match) return caseType", 
    "\t}", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function getRegex( word_rx, regEx ) {", 
    "\tvar regex_regEx = new RegExp( regEx, \"g\");", 
    "\treturn  regex_regEx.exec( word_rx );", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function CamelToSnake(CamelCaseWord) {", 
    "\tvar lowcase_array = [];", 
    "\tvar word_split = CamelCaseWord.split(/(?=[A-Z])/)", 
    "\tfor (i = 0; i < word_split.length; i++) {", 
    "\t\tlowcase_array.push( lowerCaseFirstLetter( word_split[i]))", 
    "\t}", 
    "\treturn lowcase_array.join('_');", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function snakeToCamel( snake_case_word ) {", 
    "\tvar upper_array = [];", 
    "\tvar word_split = snake_case_word.split(/_/)", 
    "\tfor (i = 0; i < word_split.length; i++) {", 
    "\t\tupper_array.push( upperCaseFirstLetter( word_split[i]))", 
    "\t}", 
    "\treturn upper_array.join('');", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function lowerCaseFirstLetter(string) {", 
    "\treturn string.charAt(0).toLowerCase() + string.slice(1);", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function upperCaseFirstLetter(string) {", 
    "\t", 
    "\tvar string = string.toLowerCase();", 
    "\treturn string.charAt(0).toUpperCase() + string.slice(1);", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": false, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/style_go.png"
}