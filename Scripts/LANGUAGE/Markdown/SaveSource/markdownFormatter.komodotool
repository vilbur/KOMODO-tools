{
  "keyboard_shortcut": "", 
  "name": "markdownFormatter", 
  "language": "JavaScript", 
  "trigger": "trigger_startup", 
  "value": [
    "/** Merge includes in markdown file", 
    " *", 
    " * Edited file must has name '-source.md'\tE.G: 'readme-source.md'", 
    " * Compiled file has suffix removed\tE.G: 'readme.md'", 
    " *", 
    " * INCLUDE SYNTAX:", 
    " * \t\t{include:relative\\path} ", 
    " * \tE.G:\t{include:\\Documentation\\controls\\controls-items\\controls-items.ahk} ", 
    " * ", 
    " */", 
    "", 
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "\t", 
    "", 
    "ko.extensions.vilbur.markdownFormatter = function()", 
    "{", 
    "\t", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\tvar koEditor\t= require(\"ko/editor\");", 
    "\tvar koFile\t= require(\"ko/file\");", 
    "\tvar koFileEx\t= Components.classes[\"@activestate.com/koFileEx;1\"].createInstance(Components.interfaces.koIFileEx);", 
    "", 
    "\tvar current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\tvar current_dir\t= koFile.dirname(current_file);", 
    "\t//var file_content\t= koEditor.getValue();", 
    "\tvar file_content\t= removeEmptyEverySecondLine(koEditor.getValue());", 
    "\t", 
    "\tvar allowed_extensions\t= /(ahk|php|js|komodotool|html|xul)/gi; // allowed extension for including", 
    "\tvar includes\t= file_content.match(/\\[include:.*\\]/gi);", 
    "\t", 
    "\tif (! current_file.match(/-source.md$/gi) )", 
    "\t\treturn;", 
    "", 
    "\t/** file read add empty line below every line", 
    "\t */", 
    "\tfunction removeEmptyEverySecondLine(string)", 
    "\t{", 
    "\t\t//return string.replace(/^/gm, '~~~').replace(/~~~\\n~~~/gm, '~~~').replace(/~~~/gm, '');", 
    "\t\treturn string", 
    "\t\t\t.replace(/^/gm, '~~~')", 
    "\t\t\t.replace(/~~~\\n~~~/gm, '~~~')", 
    "\t\t\t.replace(/~~~/gm, '');\t\t", 
    "\t}", 
    "\t\t", 
    "\t/** get icluded file content and wraop to codeblock", 
    "\t */", 
    "\tfunction getIncludeContent(path)", 
    "\t{", 
    "\t\t", 
    "\t\t/** Include *.ahk file", 
    "\t\t */", 
    "\t\tthis.include_ahk = function(file_content)", 
    "\t\t{", 
    "\t\t\t/** remove line starts with #", 
    "\t\t\t */", 
    "\t\t\tfunction removeDirectives()", 
    "\t\t\t{", 
    "\t\t\t\t//return string.replace(/#.*([\\r\\n]|$)/gmi, '');", 
    "\t\t\t\tfile_content = file_content.replace(/#.*([\\r\\n]+|$)/gmi, '');\t\t\t\t", 
    "\t\t\t}", 
    "\t\t\t/** remove lines with commented autohotkey dump E.G.: \";;;Dump(...)\"", 
    "\t\t\t */", 
    "\t\t\tfunction removeDumps()", 
    "\t\t\t{", 
    "\t\t\t\tfile_content = file_content.replace(/[\\r\\n]\\s*;+\\s*Dump.*([\\r\\n]|$)/gmi, '');\t\t", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tremoveDirectives();", 
    "\t\t\tremoveDumps();", 
    "\t\t\t", 
    "\t\t\treturn removeEmptyEverySecondLine(file_content).replace(/^\\s+/gi, '');", 
    "\t\t}; ", 
    "\t\t/** Include *.komodotool file", 
    "\t\t */", 
    "\t\tthis.include_komodotool = function(file_content)", 
    "\t\t{", 
    "\t\t\tvar file_content_obj\t= JSON.parse(file_content); ", 
    "\t\t\tvar value\t= file_content_obj.value;", 
    "\t\t", 
    "\t\t\treturn value.join('\\n').trim();", 
    "\t\t};", 
    "\t\t/** getLang", 
    "\t\t */", 
    "\t\tvar getLang = function(extension)", 
    "\t\t{", 
    "\t\t\tswitch (extension) {", 
    "\t\t\t\tcase 'ahk':\treturn \"php\";", 
    "\t\t\t\tcase 'js':case 'komodotool':\treturn \"javascript\";", 
    "\t\t\t\tcase 'html':case 'xul':\treturn \"xml\";\t\t\t\t\t", 
    "\t\t\t\tdefault:\treturn extension;", 
    "\t\t\t}", 
    "\t\t}; ", 
    "\t\t", 
    "\t\t/* INCLUDE BY FILEYPE", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar file_content\t= koFile.read(current_dir+path);", 
    "\t\tvar extension\t= allowed_extensions.exec(path).pop().toLowerCase();", 
    "\t\tvar method\t= 'include_'+extension;", 
    "\t\tvar include_content\t= this[method] ? this[method](file_content) : removeEmptyEverySecondLine(file_content);", 
    "\t\t", 
    "\t\treturn '\\n``` '+getLang(extension)+'\\n'+include_content+'\\n```';", 
    "\t}", 
    "\t", 
    "\tfunction writeToFile(path, content)", 
    "\t{", 
    "\t\tif(koFile.exists(path))", 
    "\t\t\tkoFile.remove(path);", 
    "\t\t\t", 
    "\t\tkoFile.create( path ); ", 
    "\t\tkoFileEx.path = path;  ", 
    "\t\tkoFileEx.open(\"w\");", 
    "\t\tkoFileEx.puts(content);", 
    "\t\tkoFileEx.close();", 
    "\t}", 
    "\t/** Escape for Markdown synatax", 
    "\t */", 
    "\tvar escapeContent = function(string)", 
    "\t{", 
    "\t\treturn string", 
    "\t\t\t\t.replace(/(\\w)\\|(\\w)\\|*/gi, '$1\\\\|$2') // sanitize \"|\" pipe E.G.: \"A|B\"", 
    "\t\t\t\t.replace(/\\t/gi, '    ');", 
    "\t\t\t\t//.replace(/\\|/gi, '$1!\\\\|$2') // sanitize \"|\" pipe E.G.: \"A|B\"\t\t\t\t", 
    "\t}; ", 
    "", 
    "\t", 
    "\t/* Escape readme content wihtout included scripts", 
    "\t **/", 
    "\tfile_content =  escapeContent(file_content);", 
    "\t", 
    "\t", 
    "\t/**", 
    "\t */", 
    "\tif( includes )", 
    "\t\tfor(var i=0; i<includes.length;i++){", 
    "\t\t\tvar path = new RegExp(/\\[include:(.*)\\]/gi).exec(includes[i]).pop();\t\t", 
    "\t\t\tfile_content = file_content.replace(includes[i], getIncludeContent(path));", 
    "\t\t}", 
    "", 
    "\t//writeToFile(current_file.replace(/-source.md$/gi, '.md'), removeEmptyEverySecondLine(file_content));", 
    "\twriteToFile(current_file.replace(/-source.md$/gi, '.md'), file_content);", 
    "\t//writeToFile(current_file.replace(/-source.md$/gi, '.md'),); \t\t", 
    "", 
    "\t", 
    "};", 
    "", 
    "", 
    "/* TEST */", 
    "//ko.extensions.vilbur.markdownFormatter();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": 1, 
  "async": 1, 
  "type": "macro"
}