{
  "keyboard_shortcut": "", 
  "name": "CodeDocumentator", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/** find pairs of functions and theirs comments", 
    " *", 
    " */", 
    "ko.extensions.vilbur.CodeDocumentator = (function()", 
    "{", 
    "\t/**   Constructor", 
    "\t */", 
    "\tfunction CodeDocumentator(content)", 
    "\t{", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('CodeDocumentator.js').clear(false).off(false).header(true);", 
    "\t\tvar CodeMatcher\t= new ko.extensions.vilbur.CodeMatcher();", 
    "", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\t//var content\t= require(\"ko/editor\").getValue();", 
    "\t\tvar matches;", 
    "", 
    "\t\t/** set lang", 
    "\t\t*/", 
    "\t\tthis.lang = function(_lang)", 
    "\t\t{", 
    "\t\t\tlang\t= _lang;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** getDockBlocks", 
    "\t\t */", 
    "\t\tthis.getDocBlocks = function()", 
    "\t\t{", 
    "\t\t\tLogger.info(DocBlocks, 'CodeDocumentator-input: '+'content');", 
    "", 
    "\t\t\tvar matches = CodeMatcher.content(content).lang(lang).search(['comment.dockblock','function']).getSorted();", 
    "\t\t\t//Logger.info(matches, '!!! CodeDocumentator: '+'matches');", 
    "", 
    "\t\t\t/** find pairs of functions and theirs comments", 
    "\t\t\t */", 
    "\t\t\tvar fn_doc_pairs = (function()", 
    "\t\t\t{", 
    "\t\t\t\tvar fn_doc_pairs\t= [];", 
    "\t\t\t\t/**", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getDocBlockIfExist = function(m)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( typeof matches[m-1] !== 'undefined')", 
    "\t\t\t\t\t\treturn matches[m-1].type == 'comment.dockblock' ? matches[m-1] : '';", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tfor(var m=0; m<matches.length;m++)", 
    "\t\t\t\t\tif( matches[m].type.match(/^function/gi) )", 
    "\t\t\t\t\t\tfn_doc_pairs.push({", 
    "\t\t\t\t\t\t\t'code':\tmatches[m],", 
    "\t\t\t\t\t\t\t'comment':\tgetDocBlockIfExist(m)", 
    "\t\t\t\t\t\t});", 
    "\t\t\t\t", 
    "\t\t\t\t//Logger.info(fn_doc_pairs, 'CodeDocumentator: '+'fn_doc_pairs'); ", 
    "\t\t\t\treturn fn_doc_pairs;", 
    "\t\t\t})();", 
    "", 
    "\t\t\t//Logger.info(fn_doc_pairs, 'CodeDocumentator: '+'fn_doc_pairs');", 
    "", 
    "\t\t\tvar DocBlocks = (function( )", 
    "\t\t\t{", 
    "\t\t\t\tvar merged\t= [];", 
    "", 
    "\t\t\t\tvar getDocBlockForCode = function(code)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( ! code )", 
    "\t\t\t\t\t\treturn false;", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tvar code_parsed = new ko.extensions.vilbur.CodeParser(code).lang( lang ).parse();", 
    "\t\t\t\t\t//Logger.info(code_parsed, 'CodeDocumentator: '+'code_parsed');", 
    "\t\t\t\t\tvar DocBlock\t= new ko.extensions.vilbur.DocBlock(code_parsed);", 
    "\t\t\t\t\t//Logger.info(DocBlock.get(), 'CodeDocumentator: '+'DocBlockCode');", 
    "\t\t\t\t\treturn DocBlock;", 
    "\t\t\t\t};", 
    "\t\t\t\tvar getDocBlockForComment = function(comment)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( ! comment )", 
    "\t\t\t\t\t\treturn false;", 
    "\t\t\t\t\tvar\tcomment_parsed\t= new ko.extensions.vilbur.DockBlockParser(comment).parse();", 
    "\t\t\t\t\treturn new ko.extensions.vilbur.DocBlock(comment_parsed);", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\t//Logger.info(fn_doc_pairs, '!!!! CodeDocumentator: '+'fn_doc_pairs');", 
    "", 
    "\t\t\t\tfor(var p=0; p<fn_doc_pairs.length;p++)", 
    "\t\t\t\t{", 
    "\t\t\t\t\t/** Get snippet from match", 
    "\t\t\t\t\t *  Full match OR block of code if exists ", 
    "\t\t\t\t\t *  ", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar getContentOfMatch = function(match)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\t//Logger.info(match, 'CodeDocumentator: '+'match'); ", 
    "\t\t\t\t\t\treturn typeof match.block_of_code!='undefined' ? match.block_of_code : match[0];", 
    "\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\tvar Comment\t= getDocBlockForComment( getContentOfMatch(fn_doc_pairs[p].comment) );", 
    "\t\t\t\t\tvar Code\t= getDocBlockForCode(    getContentOfMatch(fn_doc_pairs[p].code) );", 
    "\t\t\t\t\t//Logger.info(Comment.get(), 'CodeDocumentator: '+'Comment');", 
    "\t\t\t\t\t//Logger.info(Code.get(), 'CodeDocumentator: '+'Code');", 
    "", 
    "\t\t\t\t\tCode.merge(Comment);", 
    "", 
    "\t\t\t\t\tLogger.info(Code.get(), 'CodeDocumentator-output: '+'DocBlock');", 
    "\t\t\t\t\tmerged.push( Code );", 
    "\t\t\t\t}", 
    "", 
    "\t\t\t\treturn merged;", 
    "\t\t\t})();", 
    "\t\t\t", 
    "", 
    "\t\t\treturn DocBlocks;", 
    "", 
    "\t\t};", 
    "", 
    "", 
    "\t}", 
    "", 
    "\treturn CodeDocumentator;", 
    "})();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}