{
  "keyboard_shortcut": "", 
  "name": "$ beforeWord_bak", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "ko.views.manager.currentView.scimoz.beginUndoAction()", 
    "if ( komodo.view ) { komodo.view.setFocus(); }", 
    "", 
    "/*\tCHARACTER PLACED OR REMOVED BEFORE WORD\t*/", 
    "char_replace = '$';", 
    "", 
    "/*\tBLACK LIST OF WORD REGEXES WHICH NOT TO APPLY PREFIX E.G.: \"A_LoopFileName\"\t*/", 
    "blacklist = [", 
    "\t'A_.*'", 
    "]", 
    "/**", 
    "*", 
    "**/", 
    "try {", 
    "", 
    "", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\tcur_pos = scimoz.currentPos;", 
    "\t//var sel_start         = scimoz.wordStartPosition( scimoz.currentPos, true );", 
    "\t//var sel_end           = scimoz.wordEndPosition(   scimoz.currentPos, true );", 
    "\tvar selected_text     = scimoz.selText;", 
    "\tvar word_under_cursor = ko.interpolate.getWordUnderCursor(scimoz);", 
    "", 
    "\tif ( selected_text== '' && word_under_cursor.length > 0 )", 
    "\t\tselected_text     = scimoz.selText;", 
    "", 
    "\tvar char_previous     = getCharBefore();", 
    "", 
    "\t//alert('selected_text: '+selected_text);", 
    "", 
    "", 
    "", 
    "\t/*", 
    "\t\tSELECT BEGGINING OF WORD", 
    "\t*/", 
    "\t//if ( char_previous!='' && char_previous!=char_replace ) {", 
    "\t//\tko.commands.doCommand('cmd_beginningOfWord')", 
    "\t//}", 
    "", 
    "\tvar replacement_allowed = word_under_cursor.length > 0 && !isOnBlacklist(word_under_cursor);", 
    "\t/* IF REPLACEMENT IS ALLOWED, WORD UNDER CURSOR MSUT BE PRESENTED, WORD HAVE NOT TO BE ON BLACKLIST */", 
    "\tif ( replacement_allowed ) {", 
    "\t\tko.commands.doCommand('cmd_right')", 
    "", 
    "\t\tif ( char_previous==char_replace ) {", 
    "\t\t\t/*    REMOVE char_replace from begging of word    */", 
    "\t\t\t//alert('remove: '+count);", 
    "\t\t\t//var count = selected_text.length > 0 ? 2 : word_under_cursor.length + 1;", 
    "\t\t\tvar count = selected_text.length + 1;", 
    "\t\t\t//var count = selected_text.length + 1;", 
    "//alert('selected_text: '+selected_text);", 
    "", 
    "\t\t\tko.statusBar.AddMessage( '---REMOVE--- remove: '+count + ' selected_text:' +selected_text, 'editor', 3000);", 
    "\t\t\t//ko.statusBar.AddMessage( '---REMOVE--- remove: '+count, 'editor', 3000);", 
    "\t\t\tsendAhk( 'Backspace',count , selected_text )", 
    "\t\t\t//sendAhk( 'Backspace', count , '' )", 
    "//", 
    "\t\t}else {", 
    "\t\t\t/*    ADD char_replace to begging of word    */", 
    "\t\t\t//var count = selected_text.length > 0 ? 1 : selected_text.length ;", 
    "\t\t\tvar count =  selected_text.length ;", 
    "\t\t\tko.statusBar.AddMessage( '---ADD--- remove: '+count, 'editor', 3000);", 
    "\t\t\tsendAhk( 'Backspace',count , char_replace+selected_text )", 
    "\t\t}", 
    "", 
    "\t\t//scimoz.anchor     = sel_start ;", 
    "\t\t//scimoz.currentPos = sel_end ;", 
    "\t}", 
    "", 
    "", 
    "", 
    "} finally {", 
    "\tko.views.manager.currentView.scimoz.endUndoAction()", 
    "}", 
    "", 
    "/**", 
    "**/", 
    "function sendAhk( key, count, text ) {", 
    "", 
    "\t//var paths = {", 
    "\t//\t\"send_key\"  : \"C:\\\\GoogleDrive\\\\Programs\\\\common\\\\AutoHotkey\\\\scripts\\\\autohotkey\\\\Autohotkey-send-key.ahk\",", 
    "\t//\t\"send_text\" : \"C:\\\\GoogleDrive\\\\Programs\\\\common\\\\AutoHotkey\\\\scripts\\\\autohotkey\\\\Autohotkey-send-text.ahk\",", 
    "\t//};", 
    "\tvar path = \"C:\\\\GoogleDrive\\\\Programs\\\\common\\\\AutoHotkey\\\\scripts\\\\komodo\\\\Komodo-send-key-and-text.ahk\";", 
    "\tko.run.output.endSession();", 
    "\t//ko.run.runEncodedCommand( window, paths[ahk] + \" \"+key + \" \"+count)       //ko.commands.doCommand('cmd_backSmart')", 
    "\tko.run.runEncodedCommand( window, path+' '+key+' '+count+' \"\"'+text+'\"\"')\t\t\t//ko.commands.doCommand('cmd_backSmart')", 
    "}", 
    "", 
    "", 
    "function isOnBlacklist(string) {", 
    "", 
    "\tko.run.output.endSession();", 
    "\t//var isOnBlacklist =  new RegExp(blacklist.join('|') , \"gi\").exec(string);", 
    "\treturn (new RegExp(blacklist.join('|') , \"gi\").exec(string)!= null) ? true: false;", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "//function setToClip(string) {", 
    "//\tko.run.output.endSession();", 
    "//\tko.run.runEncodedCommand( window, \"set /p=\\\"\"+string+\"\\\"<nul| clip\")", 
    "//", 
    "//}", 
    "", 
    "function goBackEmptySpace(charNum) {", 
    "\tif ( charNum > 0 ) {", 
    "\t\tfor(var i=0; i<charNum;i++) {", 
    "\t\t\tko.commands.doCommand('cmd_left')", 
    "\t\t}", 
    "\t}", 
    "}", 
    "function getCharBefore() {", 
    "", 
    "", 
    "\t\tvar sel_start  = scimoz.wordStartPosition( scimoz.currentPos, true );", 
    "\t\tvar sel_end    = scimoz.wordEndPosition(   scimoz.currentPos, true );", 
    "\t////ko.commands.doCommand('cmd_left')", 
    "\t\tscimoz.anchor     = sel_start - 1 ;", 
    "\t\tscimoz.currentPos = sel_start ;", 
    "\t\tvar char_previous = scimoz.selText;", 
    "\t\tscimoz.anchor     = sel_start ;", 
    "\t\tscimoz.currentPos = sel_end ;", 
    "\treturn char_previous;", 
    "", 
    "}"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": false, 
  "type": "macro"
}