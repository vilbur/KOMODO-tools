{
  "keyboard_shortcut": "", 
  "name": "SnippetRegEx", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "value": [
    "/** SnippetRegEx", 
    " */", 
    "ko.extensions.SnippetRegEx = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction SnippetRegEx(_RegEx){", 
    "\t\t", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tvar wrap\t= lang !== \"Autohotkey\" ? '/' : '';", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\tthis.RegEx\t= _RegEx;", 
    "\t\tthis.SnippetRegExTest\t= new ko.extensions.SnippetRegExTest({quiet:true});", 
    "\t\t", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "\t\t/** get", 
    "\t\t */", 
    "\t\tthis.get = function(){", 
    "\t\t\t//require('ko/console').info( wrap+this.RegEx.source+wrap+_getModifiers());", 
    "\t\t\t//return 'SnippetRegEx';", 
    "\t\t\tif(lang!=='Autohotkey')", 
    "\t\t\t\treturn  wrap+this.RegEx.source+wrap+_getModifiers();", 
    "\t\t\telse", 
    "\t\t\t\treturn  _getModifiers()+')'+ this.RegEx.source;\t\t\t", 
    "\t\t};", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function(strings, quiet=true){", 
    "\t\t\tthis.SnippetRegExTest.options.quiet = quiet;", 
    "\t\t\t//Logger.info(this.SnippetRegExTest, 'this.SnippetRegExTest');", 
    "\t\t\tthis.SnippetRegExTest.test(this.RegEx, strings);", 
    "\t\t};", 
    "\t\t/** quiet - only warning of NOT PASSED TEST IS DISAPLYED", 
    "\t\t */", 
    "\t\tthis.quiet = function(toggle=false){", 
    "\t\t\tthis.SnippetRegExTest.options.quiet = toggle;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t\t/** _getModifiers", 
    "\t\t*/", 
    "\t\tfunction _getModifiers(){", 
    "\t\t\treturn '[[%tabstop:'+ (_this.RegEx.global && lang !=='Autohotkey'\t? 'g'\t: '')+(_this.RegEx.ignoreCase\t? 'i' : '') +']]';", 
    "\t\t}", 
    "\t\t/*--------   INIT METHODS  --------------------------------------------------------------------------------------------*/", 
    "\t}", 
    "\t", 
    "\t", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn SnippetRegEx;", 
    "})();", 
    "", 
    "//", 
    "//var RegExTool\t= new ko.extensions.SnippetRegEx(/^([A-Z]:)*((?:[\\\\]+[^\\\\]+)+)$/gi);", 
    "////require('ko/console').info(RegExTool.get());", 
    "//", 
    "//RegExTool.test([", 
    "//\t//'C:\\\\folder\\\\sub_folder\\\\sub_sub_folder\\\\foo_file.exe',", 
    "//\t'\\\\folder\\\\sub_folder\\\\sub_sub_folder\\\\foo_file.exe',", 
    "//\t'folder\\\\sub_folder\\\\sub_sub_folder\\\\foo_file.exe',", 
    "//\t'C:\\\\root',", 
    "//\t'C:\\\\folder\\\\sub_folder\\\\sub_sub_folder\\\\target',", 
    "//\t'\\\\folder\\\\sub_folder\\\\sub_sub_folder\\\\target',", 
    "//\t'folder\\\\sub_folder\\\\sub_sub_folder\\\\target',", 
    "//]);"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}