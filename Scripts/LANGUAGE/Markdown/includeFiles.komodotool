{
  "keyboard_shortcut": "", 
  "name": "includeFiles", 
  "language": "JavaScript", 
  "trigger": "trigger_startup", 
  "value": [
    "/** Merge includes in markdown file", 
    " *", 
    " * Edited file must has name '-source.md'\tE.G: 'readme-source.md'", 
    " * Compiled file has suffix removed\tE.G: 'readme.md'", 
    " *", 
    " * INCLUDE SYNTAX:", 
    " * \t\t{include:relative\\path} ", 
    " * \tE.G:\t{include:\\Documentation\\controls\\controls-items\\controls-items.ahk} ", 
    " * ", 
    " */", 
    "", 
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "\t", 
    "", 
    "ko.extensions.vilbur.includeFiles = function()", 
    "{", 
    "\t", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\tvar koEditor\t= require(\"ko/editor\");", 
    "\tvar koFile\t= require(\"ko/file\");", 
    "\tvar koFileEx\t= Components.classes[\"@activestate.com/koFileEx;1\"].createInstance(Components.interfaces.koIFileEx);", 
    "", 
    "\tvar current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\tvar current_dir\t= koFile.dirname(current_file);", 
    "\tvar file_content\t= koEditor.getValue();\t", 
    "\tvar includes\t= file_content.match(/\\[include:.*\\]/gi);", 
    "\t", 
    "\tif (! current_file.match(/-source.md$/gi) )", 
    "\t\treturn;", 
    "\t", 
    "\t/** get icluded file content and wraop to codeblock", 
    "\t */", 
    "\tfunction getIncludeContent(path)", 
    "\t{", 
    "\t\t/** remove line starts with #", 
    "\t\t */", 
    "\t\tfunction removeDirectives(string)", 
    "\t\t{", 
    "\t\t\treturn string.replace(/^#.*([\\r\\n]|$)/gmi, '');\t\t", 
    "\t\t}", 
    "\t\t/** file read add empty line below every line", 
    "\t\t */", 
    "\t\tfunction removeEmptyEvenLines(string)", 
    "\t\t{", 
    "\t\t\t//return string.replace(/^/gm, '~~~').replace(/~~~\\n~~~/gm, '~~~').replace(/~~~/gm, '');", 
    "\t\t\treturn string", 
    "\t\t\t\t.replace(/^/gm, '~~~')", 
    "\t\t\t\t.replace(/~~~\\n~~~/gm, '~~~')", 
    "\t\t\t\t.replace(/~~~/gm, '');\t\t", 
    "\t\t}", 
    "\t\t", 
    "\t\tvar include_content\t= koFile.read(current_dir+path);", 
    "\t\tinclude_content\t= removeEmptyEvenLines(include_content);", 
    "\t\tinclude_content\t= removeDirectives(include_content);\t\t", 
    "\t\t", 
    "\t\treturn path.match(/ahk|php/gi) ? '``` php\\n'+include_content+'\\n```' : include_content;", 
    "\t}", 
    "", 
    "\t", 
    "\tfunction writeToFile(path, content)", 
    "\t{", 
    "\t\t", 
    "\t\tif(koFile.exists(path))", 
    "\t\t\tkoFile.remove(path);", 
    "\t\tkoFile.create( path ); ", 
    "\t\tkoFileEx.path = path;  ", 
    "\t\tkoFileEx.open(\"w\");", 
    "\t\tkoFileEx.puts(content);", 
    "\t\tkoFileEx.close();", 
    "\t}", 
    "\t/**", 
    "\t */", 
    "\tif( includes)", 
    "\t\tfor(var i=0; i<includes.length;i++){", 
    "\t\t\tvar path = new RegExp(/\\[include:(.*)\\]/gi).exec(includes[i]).pop();\t\t", 
    "\t\t\tfile_content = file_content.replace(includes[i], getIncludeContent(path));", 
    "\t\t}", 
    "", 
    "\t//writeToFile(current_file.replace(/-source.md$/gi, '.md'), removeEmptyEvenLines(file_content));", 
    "\twriteToFile(current_file.replace(/-source.md$/gi, '.md'), file_content); \t", 
    "\t//Logger.info(file_content, 'INCLUDED');", 
    "", 
    "};", 
    "", 
    "", 
    "/* TEST */", 
    "ko.extensions.vilbur.includeFiles();", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": 1, 
  "async": 1, 
  "type": "macro"
}