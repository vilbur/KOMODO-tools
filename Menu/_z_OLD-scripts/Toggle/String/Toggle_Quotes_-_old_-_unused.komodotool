{
  "keyboard_shortcut": "Ctrl+Shift+S", 
  "name": "Toggle Quotes - old - unused", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "ko.views.manager.currentView.scimoz.beginUndoAction()", 
    "function escapeRegexStr( str ) {", 
    "    return (str + '').replace(/[\\\\\"']/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');", 
    "}", 
    "try {", 
    "", 
    "\t\tvar selectiontType ='';", 
    "", 
    "\t\tvar REGEX_quotedstring = new RegExp('(?<!\\\\\\\\)\"(.+)(?<!\\\\\\\\)\"', 'gi');", 
    "\t\tvar REGEX_phpVar       = new RegExp('^\\\\$(?!\\\\$).*', 'i');", 
    "", 
    "", 
    "", 
    "\t\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\t\tvar selectedText = scimoz.selText;", 
    "\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "\t\t//alert('selectedText: '+selectedText);", 
    "", 
    "\t\t/*///////////////////////////////////////////*/", 
    "\t\t/*\t AUTOSELECT WORD IF NOTHING SELECTED    */", 
    "\t\t/*///////////////////////////////////////////*/", 
    "\t\tif (selectedText == '' ) {", 
    "\t\t\t/*\t____SELECT TEXT\t*/", 
    "\t\t\t//alert();", 
    "\t\t\tko.commands.doCommand('cmd_wordRight')", 
    "\t\t\tko.commands.doCommand('cmd_selectWordLeft')", 
    "\t\t\tvar selectedText=scimoz.selText;", 
    "\t\t\t//alert('selectedText: '+selectedText);", 
    "", 
    "", 
    "\t\t}else {", 
    "\t\t/*???????????????????????????????????????????????????????????*/", 
    "\t\t/*\t IF TEXT IS SELECTED\t  \t\t\t\t\t\t\t\t */", 
    "\t\t\t//alert('selectedText: '+selectedText);", 
    "\t\t\tif (selectedText.match(REGEX_quotedstring)!=null) {selectiontType ='QUOTEDSTRING'}", 
    "\t\t}", 
    "", 
    "\t\t/*???????????????????????????????????????????????????????????*/", 
    "\t\t/*\tTEST IF SELECTION TYPE IS $phpVARIABLE\t\t\t\t\t */", 
    "", 
    "\t\tvar phpVarMatch=selectedText.match(REGEX_phpVar);", 
    "\t\tif(phpVarMatch!=null){varfindVar=unselect_PhpVar(selectedText);selectiontType='phpVARIABLE'}", 
    "", 
    "", 
    "", 
    "\t/*////////////////////////////////////////////////////*/", 
    "\t/*\tRECOGNIZE SELECTION TYPE\t\t\t\t\t\t */", 
    "\t/*////////////////////////////////////////////////////*/", 
    "\tif (selectiontType=='') {", 
    "", 
    "", 
    "\t\t/*---------------------------------------------------------------------------------------*/", 
    "\t\t/*   SELECT LINE        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */", 
    "\t\tif (selectedText != '' ) {", 
    "\t\t\t///// ____SELECT WHOLE LINE ____", 
    "\t\t\tko.commands.doCommand('cmd_end')", 
    "\t\t\tko.commands.doCommand('cmd_selectHome')", 
    "\t\t\tvar LINE =scimoz.selText;", 
    "\t\t\t//alert('LINE: '+LINE);", 
    "\t\t\t//LINE = LINE.replace(\";\", \"\"); ////delete \";\" on the end of line, it causes errors", 
    "\t\t}", 
    "\t\t/*---------------------------------------------------------------------------------------*/", 
    "\t\t/*   TEST: TRY FIND \"QUOTED STRING\" IN LINE\t\t\t  */", 
    "\t\tvar quotedStringMatch=LINE.match(REGEX_quotedstring);", 
    "\t\tif(quotedStringMatch!=null){chooseString(LINE,quotedStringMatch,selectedText);}/*  IF QUOTED STRING FOUNDED\t*/", 
    "\t\t/*---------------------------------------------------------------------------------------*/", 
    "\t\t/*   TEST: TRY FIND $phpVar IN LINE\t\t\t  */", 
    "\t\tvar phpVarMatch=selectedText.match(REGEX_phpVar);", 
    "", 
    "\t}else{", 
    "", 
    "\t\tif(selectiontType=='QUOTEDSTRING'){sel_textOnLine(LINE,(uselectFirsAndLastSpecChar(selectedText)))}", 
    "\t\tif(selectiontType=='phpVARIABLE'){ko.commands.doCommand('cmd_selectCharNext')}", 
    "", 
    "\t} //END if (selectiontType)", 
    "}", 
    "finally { ko.views.manager.currentView.scimoz.endUndoAction()}", 
    "/**/", 
    "/**/", 
    "/*///////////////////////////////////////////////////////////*/", 
    "/*____________FUNCTIONS______________________________________*/", 
    "function chooseString(LINE,selectionMatch,containWord) {", 
    "\t////// selectionMatch - array of strings in line e.g: (\"http://code.jquery.com/jquery-latest.min.js\" ,\"text/javascript\")", 
    "\t///// function will select string on given line contaning var containWord", 
    "\tvar quotedString = '';", 
    "\t\tfor ( i in selectionMatch) {", 
    "\t\t\tif (selectionMatch[i].match(containWord)!=null) {", 
    "\t\t\t\tvar quotedString = selectionMatch[i];", 
    "\t\t\t\t//alert(quotedString);", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t//alert('quotedString: '+quotedString);", 
    "\t\tsel_textOnLine (LINE,quotedString);", 
    "\t\t//var newLine =scimoz.selText;", 
    "\t\t//alert('newLine: '+newLine);", 
    "}", 
    "function sel_textOnLine (LINE,selectString) {", 
    "\t\t///// function select string on given line", 
    "\t\t//// var LINE is content of line in string, like ctrl+C on line", 
    "\t\t///////*   FIND and SELECT LINE in all file\t*/", 
    "\t\tko.find.findNextInMacro(window, 0, LINE, 0, 0, false, false, find, false, true);", 
    "\t\t//alert('LINE: '+LINE);", 
    "\t\tko.commands.doCommand('cmd_right')", 
    "\t\tko.commands.doCommand('cmd_selectHome')", 
    "\t\t//alert('selectString: '+selectString);", 
    "\t\t///////*   FIND and SELECT LINE in all file\t*/", 
    "\t\tko.find.findNextInMacro(window, 0, selectString, 0, 0, false, false, find, false, true);", 
    "}", 
    "", 
    "function uselectFirsAndLastSpecChar(theString) {", 
    "", 
    "    var REGEX = new RegExp('(?!([\"\\'<>]))(.*)(?!\\\\1$)', 'gi');", 
    "", 
    "\tstringMatch = theString.match(REGEX);", 
    "\t//alert('stringMatch: '+stringMatch);", 
    "\tif (stringMatch!=null) {", 
    "        return stringMatch[0];", 
    "\t}", 
    "\t//  else{", 
    "\t//\treturn \"\";", 
    "\t//\talert(\"FUNCTION: uselectFirsAndLastSpecChar\\nstring doesn`t Match\")", 
    "\t//  }", 
    "", 
    "", 
    "}", 
    "function unselect_PhpVar(theString) {", 
    "", 
    "    var REGEX = new RegExp('(?!^\\\\$)\\\\S+', 'gi');", 
    "", 
    "\tstringMatch = theString.match(REGEX);", 
    "\t//alert('stringMatch: '+stringMatch);", 
    "\tif (stringMatch!=null) {", 
    "        return stringMatch[0];", 
    "\t}", 
    "\t//  else{", 
    "\t//\treturn \"\";", 
    "\t//\talert(\"FUNCTION: uselectFirsAndLastSpecChar\\nstring doesn`t Match\")", 
    "\t//  }", 
    "", 
    "", 
    "}", 
    "", 
    "//////////_________NOTES______________", 
    "", 
    "///////// MATCH ANY STRING WITH QUOTES", 
    "//////var selectionMatch=selectedText.match(/[\"'](?:[^\"\\\\]|\\\\.)*[\"']/);", 
    "////////////////////////////////////////////////////////////"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": false, 
  "type": "macro"
}