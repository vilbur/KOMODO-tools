{
  "keyboard_shortcut": "", 
  "name": "insertFunctionsScnippet-bak", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "if( typeof ko.extensions.vilbur.MarkdownDocumentator === 'undefined'  )", 
    "\tko.extensions.vilbur.MarkdownDocumentator = {};", 
    "", 
    "", 
    "/** insertFunctionsScnippet", 
    " */", 
    "ko.extensions.vilbur.MarkdownDocumentator.insertFunctionsScnippet = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction insertFunctionsScnippet(function_objects){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar snippets\t= [];", 
    "\tvar t\t= 1; // index of tabstops", 
    "", 
    "\t\t/*--------   PRIVATE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t/** getSnippets", 
    "\t\t */", 
    "\t\tvar setSnippets = function()", 
    "\t\t{", 
    "\t\t\tfor(var i=0; i<function_objects.length;i++)", 
    "\t\t\t\t snippets.push( getSnippetValue( function_objects[i] ));", 
    "\t\t};", 
    "\t\t/** getSnippetValue", 
    "\t\t */", 
    "\t\tvar getSnippetValue = function(fn_obj)", 
    "\t\t{", 
    "", 
    "\t\t\t/** split Prameter by '='", 
    "\t\t\t *  @return array ['paramName', 'delimeter', 'value']", 
    "\t\t\t */", 
    "\t\t\tvar splitPrameter = function(parameter)", 
    "\t\t\t{", 
    "\t\t\t\tvar match =  /([^:=]+)\\s*([:=]+)+\\s*(.*)/g.exec(parameter);", 
    "", 
    "\t\t\t\treturn [", 
    "\t\t\t\t\tmatch !== null ? match[1] : parameter,", 
    "\t\t\t\t\tmatch !== null ? match[2] : '',", 
    "\t\t\t\t\tmatch !== null ? match[3] : '',", 
    "\t\t\t\t];", 
    "\t\t\t};", 
    "", 
    "\t\t\t/** get Parameter Type by value", 
    "\t\t\t * return string 'string|integer|float|array|object'", 
    "\t\t\t */", 
    "\t\t\tvar getParameterType = function(parameter)", 
    "\t\t\t{", 
    "\t\t\t\tif( parameter.match(/=/gi) )", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar value = splitPrameter(parameter)[2];", 
    "\t\t\t\t\tconsole.log( value );", 
    "\t\t\t\t\tif( ! isNaN(value))", 
    "\t\t\t\t\t\treturn  value.match(/\\./gi) ? 'float' : 'integer';", 
    "\t\t\t\t\telse if( value.match(/\\[.*\\]/gi) )", 
    "\t\t\t\t\t\treturn 'array';", 
    "\t\t\t\t\telse if( value.match(/\\{.*\\}/gi) )", 
    "\t\t\t\t\t\treturn 'object';", 
    "\t\t\t\t}", 
    "\t\t\t\treturn 'string';", 
    "\t\t\t};", 
    "", 
    "", 
    "\t\t\t/** getTableHeader", 
    "\t\t\t */", 
    "\t\t\tvar getTableHeader = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn '|\t|\t|\\n|---';", 
    "\t\t\t};", 
    "\t\t\t/** getFunctionNameRow", 
    "\t\t\t */", 
    "\t\t\tvar getFunctionNameRow = function()", 
    "\t\t\t{", 
    "\t\t\t\t//var params = [];", 
    "\t\t\t\t/** getParamsString", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getParamsString = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\treturn fn_obj.parameters.map(function(parameter){", 
    "\t\t\t\t\t\tvar param_name\t= splitPrameter(parameter)[0];", 
    "\t\t\t\t\t\tvar delimeter\t= splitPrameter(parameter)[1];", 
    "\t\t\t\t\t\tvar param_value\t= splitPrameter(parameter)[2];", 
    "\t\t\t\t\t\tvar param_string\t= '__'+param_name+'__'+delimeter+param_value;", 
    "\t\t\t\t\t\treturn '[[%tabstop:'+param_string+']]';", 
    "", 
    "\t\t\t\t\t}).join(', ');", 
    "\t\t\t\t};", 
    "\t\t\t\tvar params_string\t= getParamsString();", 
    "\t\t\t\tvar whitespace\t= params_string.length ? ' ' :'';", 
    "", 
    "\t\t\t\treturn '|__'+fn_obj.fn_name+'__('+whitespace+params_string+whitespace+')\t|[[%tabstop:]]\t\t|';", 
    "\t\t\t};", 
    "\t\t\t/** getParameterRows", 
    "\t\t\t */", 
    "\t\t\tvar getParameterRows = function()", 
    "\t\t\t{", 
    "\t\t\t\tvar params_rows = [];", 
    "\t\t\t\t/** getParametersRow", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getParametersRow = function( parameter )", 
    "\t\t\t\t{", 
    "\t\t\t\t\treturn '|`@param '+getParameterType(parameter)+'` '+parameter+'\t|[[%tabstop:\t]]\t|';", 
    "", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tfor(var p=0; p<fn_obj.parameters.length;p++)", 
    "\t\t\t\t\tparams_rows.push( getParametersRow( fn_obj.parameters[p] ) );", 
    "", 
    "\t\t\t\treturn params_rows.join('\\n');", 
    "\t\t\t};", 
    "\t\t\t/** getReturnRow", 
    "\t\t\t */", 
    "\t\t\tvar getReturnRow = function()", 
    "\t\t\t{", 
    "\t\t\t\treturn '|`@return [[%tabstop:string]]`\t|[[%tabstop:\t|]]\t|';", 
    "", 
    "\t\t\t};", 
    "", 
    "\t\t\tvar snippet = [", 
    "\t\t\t   getTableHeader(),", 
    "\t\t\t   getFunctionNameRow(),", 
    "\t\t\t   getParameterRows(),", 
    "\t\t\t   getReturnRow(),", 
    "\t\t\t];", 
    "", 
    "\t\t\treturn snippet.filter(function(val) {if(val) return val;}).join('\\n');", 
    "\t\t\t //return snippet.join('\\n')", 
    "\t\t};", 
    "\t\t/** insertFakeSnippet", 
    "\t\t */", 
    "\t\tvar insertFakeSnippet = function()", 
    "\t\t{", 
    "\t\t\tvar fake_snippet = {", 
    "\t\t\t\thasAttribute: function(name) {", 
    "\t\t\t\t\treturn name in this;", 
    "\t\t\t\t},", 
    "\t\t\t\tgetStringAttribute: function(name) {", 
    "\t\t\t\t\treturn this[name];", 
    "\t\t\t\t},", 
    "\t\t\t\tname:\t\"name snippet\",", 
    "\t\t\t\tindent_relative: \"true\",", 
    "\t\t\t\tvalue:\tsnippets.join(\"\\n\\n\")", 
    "\t\t\t};", 
    "\t\t\tko.projects.snippetInsert(fake_snippet);", 
    "\t\t};", 
    "", 
    "\t\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "\t\tsetSnippets();", 
    "\t\tinsertFakeSnippet();", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn insertFunctionsScnippet;", 
    "", 
    "})();", 
    "", 
    "", 
    "/** insertFunctionsScnippetTest", 
    "*/", 
    "function insertFunctionsScnippetTest(){", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "", 
    "\tvar function_objects = [", 
    "\t\t{", 
    "\t\t\t'fn_name':\t'fnNoParameters',", 
    "\t\t\t'parameters':\t[]", 
    "\t\t},", 
    "\t\t{", 
    "\t\t\t'fn_name':\t'fnSingleParamter',", 
    "\t\t\t'parameters':\t['$first']", 
    "\t\t},", 
    "\t\t{", 
    "\t\t\t'fn_name':\t'fnDefaultParamters1',", 
    "\t\t\t'parameters':\t['$pArray=[]', '$pString=\"default\"']", 
    "\t\t},", 
    "\t\t{", 
    "\t\t\t'fn_name':\t'fnDefaultParamters2',", 
    "\t\t\t'parameters':\t['$pInt=123', '$pfloat=9.99']", 
    "\t\t}", 
    "\t];", 
    "", 
    "\tvar fn_definitions = ko.extensions.vilbur.MarkdownDocumentator.insertFunctionsScnippet( function_objects );", 
    "", 
    "}", 
    "", 
    "//insertFunctionsScnippetTest();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}