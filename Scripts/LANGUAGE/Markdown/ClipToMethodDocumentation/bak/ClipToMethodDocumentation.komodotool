{
  "keyboard_shortcut": "", 
  "name": "ClipToMethodDocumentation", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "if( typeof ko.extensions.vilbur.markdown === 'undefined'  )", 
    "\tko.extensions.vilbur.markdown = {};", 
    "ko.extensions.vilbur.markdown.ClipToMethodDocumentation = {};", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "/** ClipToMethodDocumentation", 
    " */", 
    "(function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction ClipToMethodDocumentation(){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar clipboard\t= \"\";", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t\t/** RegEx match all", 
    "\t\t */", 
    "\t\tvar matchAll = function( string, regEx )", 
    "\t\t{", 
    "\t\t\tvar matches_all = [];", 
    "\t\t\twhile((match = regEx.exec(string)) !== null) {", 
    "\t\t\t\tmatches_all.push(match);", 
    "\t\t\t\tstring = string.substring(match.index+1); //this is not the same as /g", 
    "\t\t\t}", 
    "\t\t\treturn matches_all;", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tvar getClip = function() {", 
    "\t\t\treturn  require(\"sdk/clipboard\").get();", 
    "\t\t};", 
    "\t\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t//Logger.info( getClip(), '_getClip' );", 
    "\t\tclipboard = getClip();", 
    "\t\tvar matches_all = matchAll( clipboard, /([A-Z]+)\\([^\\)]*\\)/gi );", 
    "", 
    "\t\tLogger.info( matches_all, 'matches_all');", 
    "", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn ClipToMethodDocumentation;", 
    "", 
    "})().apply( ko.extensions.vilbur.markdown.ClipToMethodDocumentation );", 
    "", 
    "", 
    "", 
    "", 
    "/** ClipToMethodDocumentationTest", 
    "*/", 
    "function ClipToMethodDocumentationTest(){", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "", 
    "\t\trequire(\"sdk/clipboard\").set(", 
    "\t\t\t\"fnWithoutParams()\\n\"+", 
    "\t\t\t\"{\\n\"+", 
    "\t\t\t\"}\\n\"+", 
    "\t\t\t\"fnSingleParam( $single )\\n\"+", 
    "\t\t\t\"{\\n\"+", 
    "\t\t\t\"\treturn $single\\n\"+", 
    "\t\t\t\"}\\n\"+", 
    "\t\t\t\"\\n\"+", 
    "\t\t\t\"fnMultipleParams( $first, $second )\\n\"+", 
    "\t\t\t\"{\\n\"+", 
    "\t\t\t\"\treturn $second\\n\"+", 
    "\t\t\t\"}\\n\"+", 
    "\t\t\t\"\\n\"+", 
    "\t\t\t\"/** foo commanet\\n\"+", 
    "\t\t\t\"*/\\n\"+", 
    "\t\t\t\"\"+", 
    "\t\t\t\"\"", 
    "\t\t);", 
    "", 
    "\tLogger.info( ko.extensions.vilbur.markdown.ClipToMethodDocumentation, 'ClipToMethodDocumentation' );", 
    "", 
    "}", 
    "", 
    "ClipToMethodDocumentationTest();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}