{
  "keyboard_shortcut": "", 
  "name": "SnippetRegExTest", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "value": [
    "/**", 
    "\tvar regexes = {", 
    "\t\ttest_A: /^A+/gi,", 
    "\t\ttest_B: /^B+/gi,\t", 
    "\t};", 
    "\t", 
    "\tvar strings = {", 
    "\t\tglobal:[", 
    "\t\t\t'AAA AAA OK',", 
    "\t\t\t'NOT MATCH'", 
    "\t\t],", 
    "\t\ttest_A: 'AAA',", 
    "\t\ttest_B: [", 
    "\t\t\t'BBB',", 
    "\t\t\t'bbbg'", 
    "\t\t],", 
    "\t};", 
    "\t", 
    "\t(new ko.extensions.SnippetRegExTest({quiet:true })).test(regexes, strings);", 
    "\t *", 
    "\t */", 
    "", 
    "", 
    "/** SnippetRegExTest", 
    " */", 
    "ko.extensions.SnippetRegExTest = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction SnippetRegExTest(options){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\t//this.lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tthis.options\t= options;", 
    "\t\tthis.regexes\t= null;", 
    "\t\tthis.strings\t= null;", 
    "", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t\t/** _loopRegexes", 
    "\t\t*/", 
    "\t\tthis.test = function(regexes, strings){", 
    "\t\t\tif(this.options.quiet)", 
    "\t\t\trequire('ko/console').info('------ SnippetRegExTest -----------------------------------------------------\\n\\nTest strings = '+JSON.stringify(strings, null, 4) );", 
    "\t\t\t", 
    "\t\t\tthis.regexes\t= _getRegexesObject(regexes);", 
    "\t\t\tthis.strings\t=  _getStrings(strings);", 
    "\t\t\tif(regexes.length === 0) return;", 
    "\t\t\t", 
    "\t\t\tvar regexes_keys\t= Object.keys(this.regexes);", 
    "\t\t\tko.statusBar.AddMessage('msg', \"find\", 5000, true);", 
    "\t\t\tLogger.info(this.regexes, 'this.regexes');", 
    "\t\t\t//Logger.info(this.strings, 'this.strings');\t\t\t", 
    "\t\t\t", 
    "\t\t\tfor(r=0; r<regexes_keys.length;r++) {", 
    "\t\t\t\t_testStrings(regexes_keys[r]);", 
    "\t\t\t}", 
    "\t\t\t\t\t", 
    "\t\t};", 
    "\t\t/** _getRegexesObject", 
    "\t\t*/", 
    "\t\tfunction _getRegexesObject(regexes){", 
    "\t\t\t", 
    "\t\t\tif( typeof regexes !== 'object' ) return;", 
    "\t\t\tif(regexes.constructor.name === 'RegExp')", 
    "\t\t\t\treturn {RegEx:regexes};", 
    "\t\t\telse if (Array.isArray(regexes))", 
    "\t\t\t\treturn Object.assign({}, regexes);", 
    "\t\t\t", 
    "\t\t\treturn regexes;", 
    "\t\t}", 
    "\t\t/** _getStrings", 
    "\t\t*/", 
    "\t\tfunction _getStrings(strings){", 
    "\t\t\tif( typeof strings === 'object' && !Array.isArray(strings) )", 
    "\t\t\t\treturn strings;", 
    "\t\t\telse if (Array.isArray(strings))", 
    "\t\t\t\treturn strings;", 
    "\t\t\tif( typeof strings === 'string')", 
    "\t\t\t\treturn [strings];", 
    "\t\t\t", 
    "\t\t}", 
    "\t\t/** _testStrings", 
    "\t\t*/", 
    "\t\tfunction _testStrings(rx_key){", 
    "\t\t\t//require('ko/console').info('_testStrings()');", 
    "\t\t\tvar strings_global\t= typeof _this.strings.global\t!== 'undefined'\t?  _this.strings.global \t: _this.strings;", 
    "\t\t\tvar strings_current\t= typeof _this.strings[rx_key]\t!== 'object'\t? [_this.strings[rx_key]]\t: _this.strings[rx_key];", 
    "\t\t\tvar strings_merged\t= strings_global;", 
    "", 
    "\t\t\tif(typeof _this.strings[rx_key] !== 'undefined')", 
    "\t\t\t\tArray.prototype.push.apply(strings_merged, strings_current);", 
    "\t\t\t\t", 
    "\t\t\t//Logger.info(strings_global, 'strings_global');", 
    "\t\t\t//Logger.info(strings_current, 'strings_current');\t\t\t", 
    "\t\t\tLogger.info(strings_merged, 'strings_merged');", 
    "\t\t\t\t", 
    "\t\t\tfor(s=0; s<strings_merged.length;s++) {", 
    "\t\t\t\t_testString( strings_merged[s],rx_key, s+1);", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\t", 
    "\t\t}", 
    "\t\t/** _testString", 
    "\t\t*/", 
    "\t\tfunction _testString(string, rx_key, index){", 
    "\t\t\tvar RegEx\t=  _this.regexes[rx_key];", 
    "\t\t\t//require('ko/console').info(RegEx.source);", 
    "\t\t\t//var match_string = string.matchAll_v2(RegEx);", 
    "\t\t\tvar match_string = string.match(RegEx);\t\t\t", 
    "\t\t\tvar result = {", 
    "\t\t\t\t_string:\tstring,", 
    "\t\t\t\t_source:\t'/'+RegEx.source+'/'+_getModifiers(RegEx),", 
    "\t\t\t\tregEx:\tRegEx,\t\t\t\t\t\t\t\t", 
    "\t\t\t};", 
    "", 
    "\t\t\tvar label\t= (rx_key.match(/RegEx/gi) ? rx_key +' '+index: rx_key ) +' - \"'+string+'\"';", 
    "\t\t\t//result.match = match_string;", 
    "\t\t\tif (match_string) {", 
    "\t\t\t\t", 
    "\t\t\t\tif(_this.options.quiet){", 
    "\t\t\t\t\tresult.match = match_string;\t\t\t\t\t", 
    "\t\t\t\t\tLogger.info(result,label).force();", 
    "\t\t\t\t\t//Logger.warn(result,label);\t\t\t\t\t", 
    "\t\t\t\t}", 
    "\t\t\t} else {", 
    "\t\t\t\tLogger.warn(result,label).force();\t\t\t\t\t", 
    "\t\t\t} ", 
    "\t\t\t", 
    "\t\t}", 
    "\t\tfunction _getModifiers(RegEx){", 
    "\t\t\treturn (RegEx.global ? 'g'\t: '')+(RegEx.ignoreCase\t? 'i' : '');", 
    " \t\t\t", 
    "\t\t}", 
    "\t\t", 
    "\t\t/*--------   INIT METHODS  --------------------------------------------------------------------------------------------*/", 
    "", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn SnippetRegExTest;", 
    "})();", 
    "", 
    "", 
    "\t//var regexes = {", 
    "\t//\t'match single': /(?:([^\\\\]+)\\\\+|([^\\\\]+$))/gi,", 
    "\t//\t//'match multiple': /(word\\d)/gi,", 
    "\t//\t//'match multiple': /(?:(word[12])\\s)+(word3)/gi,\t\t\t\t", 
    "\t//\t//test_B: /^B+/gi,\t", 
    "\t//};", 
    "\t//", 
    "\t//var strings = {", 
    "\t//\tglobal:[", 
    "\t//\t\t'folder\\\\subfolder\\\\file\\\\123\\\\456\\\\789',", 
    "\t//\t\t//'NOT MATCH'", 
    "\t//\t],", 
    "\t//\t//test_A: 'AAA',", 
    "\t//\t//test_B: [", 
    "\t//\t//\t'BBB',", 
    "\t//\t//\t'bbbg'", 
    "\t//\t//],", 
    "\t//};", 
    "\t//", 
    "\t//(new ko.extensions.SnippetRegExTest({quiet:true })).test(regexes, strings);", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}