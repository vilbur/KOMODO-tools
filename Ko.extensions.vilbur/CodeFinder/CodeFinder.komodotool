{
  "keyboard_shortcut": "", 
  "name": "CodeFinder", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/**", 
    " *", 
    " */", 
    "ko.extensions.vilbur.CodeFinder = (function() {", 
    "", 
    "   \t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/** CONSTRUCT", 
    "\t */", 
    "\tfunction CodeFinder(){", 
    "", 
    "\t\t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar _this\t= this; // make private functions access to public PROPERTIES and METHODS()", 
    "\t\tvar CodeMatcher\t= new ko.extensions.vilbur.CodeMatcher();", 
    "", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tvar current_pos\t= scimoz.currentPos;", 
    "\t\t//var file_content\t= _getFileContent();", 
    "", 
    "\t\tvar search_for\t= [];", 
    "\t\tvar matches\t= [];", 
    "\t\tvar indexes;", 
    "\t\tvar match_found = null;", 
    "", 
    "\t\tif( lang=='Node.js' )", 
    "\t\t\tlang='JavaScript';", 
    "", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** searchFor", 
    "\t\t */", 
    "\t\tthis.searchFor = function(keys)", 
    "\t\t{", 
    "\t\t\t//keys = ['function.public','function.private']; // DEBUG", 
    "\t\t\t//keys = ['function'];// DEBUG", 
    "\t\t\t//keys = ['function.prototype'];// DEBUG", 
    "\t\t\tsearch_for = keys;", 
    "", 
    "\t\t\tsetMatches();", 
    "\t\t\tsetIndexes();", 
    "", 
    "\t\t\tLogger.info(matches, 'matches');", 
    "\t\t\tLogger.info(indexes, 'indexes');", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** findCode", 
    "\t\t *", 
    "\t\t * @param\tstring\tfind\t'void|next|prev' search in whole file, after ('next'), or before ('prev') cursor", 
    "\t\t *", 
    "\t\t * @return\tobject\tmatch_found", 
    "\t\t */", 
    "\t\tthis.findCode = function( find, loop=true )", 
    "\t\t{", 
    "\t\t\tsetMatchFound(find);", 
    "", 
    "\t\t\tif( match_found===null && loop===true )", 
    "\t\t\t\tgetNextMatchInLoop( find );", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** getMatchFound", 
    "\t\t */", 
    "\t\tthis.getMatchFound = function()", 
    "\t\t{", 
    "\t\t\treturn match_found;", 
    "\t\t};", 
    "", 
    "\t\t/** selectFirstMatch", 
    "\t\t */", 
    "\t\tthis.selectMatch = function()", 
    "\t\t{", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "", 
    "\t\t\tif(match_found)", 
    "\t\t\t\t//scimoz.setSel( match_found.index,  match_found.index );", 
    "\t\t\t\tscimoz.setSel( match_found.index,  match_found.index + match_found[0].length );", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/*------   PRIVATE METHODS    -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** setMatches", 
    "\t\t */", 
    "\t\tvar setMatches = function()", 
    "\t\t{", 
    "\t\t\tvar matches_by_type = CodeMatcher.searchFor(search_for).getMatches();", 
    "", 
    "\t\t\t/** set Match", 
    "\t\t\t */", 
    "\t\t\tvar setMatch = function(match)", 
    "\t\t\t{", 
    "\t\t\t\tmatches[ match.index ] = match;", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var match_type in matches_by_type)", 
    "\t\t\t\tif (matches_by_type.hasOwnProperty(match_type))", 
    "\t\t\t\t\tfor(var m=0; m<matches_by_type[match_type].length;m++)", 
    "\t\t\t\t\t\tsetMatch( matches_by_type[match_type][m] );", 
    "", 
    "\t\t\t//Logger.info(matches, 'matches');", 
    "\t\t};", 
    "", 
    "\t\t/** setIndexes", 
    "\t\t */", 
    "\t\tvar setIndexes = function()", 
    "\t\t{", 
    "\t\t\tindexes = Object.keys(matches).sort(function(e1, e2) { return e1 - e2; });", 
    "\t\t};", 
    "", 
    "\t\t/** get first item from this.matches_all", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tvar setMatchFound = function(find)", 
    "\t\t{", 
    "\t\t\tLogger.info(find, 'setMatchFound');", 
    "", 
    "\t\t\tswitch (find) {", 
    "\t\t\t\tcase 'first':", 
    "\t\t\t\t\tpos_found = indexes[0];break;", 
    "\t\t\t\tcase 'last':", 
    "\t\t\t\t\tpos_found = indexes[indexes.length-1];break;", 
    "\t\t\t\tcase 'prev':", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos, 'down');break;", 
    "\t\t\t\tcase 'next':", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos, 'up');break;", 
    "\t\t\t\tdefault:", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos); // find closest 'up' OR 'down'", 
    "\t\t\t}", 
    "\t\t\tLogger.info(pos_found, 'pos_found');", 
    "", 
    "\t\t\tmatch_found\t= matches[pos_found] ? matches[pos_found] : null;", 
    "", 
    "\t\t\tif(match_found)", 
    "\t\t\t\tcurrent_pos\t= match_found.index;", 
    "", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t * FIND CLOSEST NUMBER IN ARRAY", 
    "\t\t *", 
    "\t\t * @param\tarray\tnumbers\tSORTED array for searching", 
    "\t\t * @param\tnumber\tnum\tvalue for search", 
    "\t\t * @param\tmode\tstring\t'void|down|up'\t// 'void' find ABSOLUTE closest, 'down' find closest but lower number, 'up' find closest but higher number", 
    "\t\t *", 
    "\t\t\tvar numbers\t= [2, 5, 12, 13];", 
    "\t\t\tvar closest_absolute\t= getClosestNumber(arr, 7);", 
    "\t\t\tvar closest_lower\t= getClosestNumber(arr, 7, 'down');\t// 5", 
    "\t\t\tvar closest_upper\t= getClosestNumber(arr, 7, 'up');\t// 12", 
    "\t\t */", 
    "\t\tvar getClosestKey = function(array, num, mode='')", 
    "\t\t{", 
    "\t\t\tLogger.info(array, 'search '+num );", 
    "", 
    "\t\t\tvar diff=10000;", 
    "\t\t\tvar result;", 
    "\t\t\tfor(var k=0; k<array.length;k++) {", 
    "", 
    "\t\t\t\tvar m;", 
    "\t\t\t\t/* GET ABSOLUTE CLOSEST NUMBER*/", 
    "\t\t\t\tif(mode ===''){", 
    "\t\t\t\t\tm = Math.abs(num-array[k]);", 
    "\t\t\t\t\tif(m<diff){", 
    "\t\t\t\t\t\tdiff\t= m;", 
    "\t\t\t\t\t\tresult\t= array[k];", 
    "\t\t\t\t\t}", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tm = num-array[k];", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER LOWER */", 
    "\t\t\t\t\tif( mode ==='down' && m>0 )", 
    "\t\t\t\t\t\tresult=array[k];", 
    "", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER HIGHER */", 
    "\t\t\t\t\telse if( mode ==='up' && m<0 )", 
    "\t\t\t\t\t\treturn array[k];", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "", 
    "\t\t\treturn result;", 
    "\t\t};", 
    "", 
    "\t\t/** select first or last match, if find=='next|prev' and there is not next or previous match", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar getNextMatchInLoop = function( find )", 
    "\t\t{", 
    "\t\t\t//alert( 'getNextMatchInLoop' );", 
    "\t\t\tsetMatchFound( find=='next' ? 'first' : 'last' );", 
    "\t\t};", 
    "", 
    "\t\t/** set single match object to var match_all.", 
    "\t\t *", 
    "\t\t * @param\tarray\tmatch result object of RegEx match: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match#Return_value", 
    "\t\t * @param\tstring\trx_key\tis dot notation key of regex from var regexe E.G: 'function.private'", 
    "\t\t*/", 
    "\t\tfunction _setMatch(match, rx_key)", 
    "\t\t{", 
    "", 
    "\t\t\tvar match_full\t= match[0];", 
    "\t\t\tvar match_group\t= match.pop();", 
    "\t\t\t//var index_start\t= currentPos + match.index + ( match_full.length - match_group.length ); // correct group start position", 
    "\t\t\tvar index_start\t= match.index + ( match_full.length - match_group.length ); // correct group start position", 
    "\t\t\tvar index_end\t= _getMatchEndPosition(match);", 
    "\t\t\t_this.matches_all[index_start] = {'start':index_start, 'end':index_end, 'rx_key':rx_key, 'match':match_group};", 
    "\t\t}", 
    "", 
    "\t\t/** FIND CLOSING BRACKET if opening bracket is find on the end of string", 
    "\t\t *", 
    "\t\t * @param\tstring\tfile_content\tpart of file file_content", 
    "\t\t * @param\tint\tstart_pos\tstart position of param file_content", 
    "\t\t *", 
    "\t\t * @return\tinteger\tend position of closing bracket OR end postion of given file_content", 
    "\t\t */", 
    "\t\tfunction _getMatchEndPosition(match_obj)", 
    "\t\t{", 
    "", 
    "\t\t\tvar match_content\t= match_obj[0];", 
    "", 
    "\t\t\tif ( match_content.match(/[{\\(\\[]\\s*$/gi) !== null ) {", 
    "", 
    "\t\t\t\t/* GO TO OPEN BRACKET ON THE END OF MATCH */", 
    "\t\t\t\tscimoz.currentPos = match_obj.index + match_content.length;", 
    "\t\t\t\t//scimoz.currentPos = match_obj.index + match_content.length + 1;", 
    "\t\t\t\tko.commands.doCommand('cmd_jumpToMatchingBrace');", 
    "", 
    "\t\t\t\treturn _getEndingCharacter(match_content, scimoz.currentPos + 1);\t// Add 1 to position, because of position AFTER bracket\tis needed", 
    "\t\t\t\t//return scimoz.currentPos + 1;", 
    "\t\t\t}", 
    "\t\t\treturn match_obj.index + match_content.length;", 
    "\t\t}", 
    "", 
    "\t\t/** FIND EOL character after bracket // try to find ';' OR ');'", 
    "\t\t *", 
    "\t\t * @return\tinteger\tposition of closing bracket and EOL character if presented", 
    "\t\t*/", 
    "\t\tfunction _getEndingCharacter(match_content, end_pos)", 
    "\t\t{", 
    "", 
    "\t\t\tif (lang.match(/JavaScript|PHP/gi)) {", 
    "\t\t\t\t/* exception if javascript function declaration wrapped in '()' E.G: 'var fnName = (function() {' */", 
    "\t\t\t\tvar rx_ending_character\t= match_content.match(/\\(\\s*function/gi) ? /^[\\r\\n\\s]*\\)[\\r\\n\\s]*;*/ : /^[\\r\\n\\s]*;/;", 
    "\t\t\t\tvar match_ending_char\t= scimoz.getTextRange( end_pos, scimoz.textLength).match(rx_ending_character);", 
    "", 
    "\t\t\t\tif (match_ending_char)", 
    "\t\t\t\t\treturn end_pos + match_ending_char.index + match_ending_char[0].replace(/\\s+$/gi, '').length; // remove WhiteSpace on end of selection", 
    "\t\t\t}", 
    "\t\t\treturn end_pos;", 
    "\t\t}", 
    "", 
    "\t\t/** _restoreInitPosition", 
    "\t\t */", 
    "\t\tfunction _restoreInitPosition()", 
    "\t\t{", 
    "\t\t\tscimoz.currentPos\t= current_pos;", 
    "\t\t\tscimoz.anchor\t= current_pos;", 
    "\t\t\tscimoz.scrollCaret();", 
    "\t\t}", 
    "", 
    "\t}", 
    "", 
    "\t///** _getRegExMatch", 
    "\t// */", 
    "\t//CodeFinder.prototype._getRegExMatch = function(key, regex){", 
    "\t//\tvar match_string = this.file_content.after.match(regex);", 
    "\t//\tif (match_string)", 
    "\t//\t\tthis.matches_all[key] = match_string[0];", 
    "\t//};", 
    "", 
    "\treturn CodeFinder;", 
    "", 
    "})();", 
    "", 
    "", 
    "", 
    "var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "if(current_filename === 'CodeFinder_test_on_document.js'){", 
    "", 
    "", 
    "\t\tvar _CodeFinder\t= new ko.extensions.vilbur.CodeFinder();", 
    "", 
    "\t\t//_CodeFinder.findCode('function','next')", 
    "\t\t\t_CodeFinder", 
    "\t\t\t.searchFor('parameters')", 
    "\t\t\t//.searchFor('function')", 
    "\t\t\t//.searchFor('function.private')", 
    "\t\t\t.findCode('next')", 
    "\t\t\t//.findCode('first')", 
    "\t\t\t.selectMatch();", 
    "", 
    "\t\t//.selectMatch();", 
    "\t\t//_CodeFinder.findCode('','next').selectMatch();", 
    "", 
    "//\t//_CodeFinder.findCode();", 
    "//\t//_CodeFinder.findCode('function','');", 
    "//\t//_CodeFinder.findCode('function','next');", 
    "//\t//_CodeFinder.findCode('function','prev');", 
    "//\t//_CodeFinder.findCode('function','first');", 
    "//\t//_CodeFinder.findCode('function','last');", 
    "//", 
    "//\t//_CodeFinder.findCode('','next');", 
    "//\t//_CodeFinder.findCode('function','next');", 
    "//\t//_CodeFinder.findCode('return','next');", 
    "//\t//_CodeFinder.findCode('function.private','next');", 
    "//", 
    "//\t//var match_comment = _CodeFinder.findCode('global.comment.dockblock','next');", 
    "//\tvar match_comment = _CodeFinder.findCode('global.comment','next');", 
    "//", 
    "//", 
    "//\t_CodeFinder.selectMatch();", 
    "//\t//var Logger\t= new ko.extensions.Logger('CodeFinder.js');", 
    "//\t//var modes = ['', 'next','prev','first','last'];", 
    "//", 
    "//\t//for(var m=1; m<=modes.length;m++) {", 
    "//\t//\tvar mode = modes[m-1];", 
    "//\t//\tsetTimeout( function(){", 
    "//\t//\t\t_CodeFinder.findCode('function',mode);", 
    "//\t//\t\t_CodeFinder.selectMatch();", 
    "//\t//\t\t//Logger.info(mode).log();", 
    "//\t//\t}, (m*1500));", 
    "//\t//}", 
    "}", 
    "//var _CodeFinder\t= new ko.extensions.vilbur.CodeFinder();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}