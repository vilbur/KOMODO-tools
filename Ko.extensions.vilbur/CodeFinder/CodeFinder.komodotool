{
  "keyboard_shortcut": "", 
  "name": "CodeFinder", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/**", 
    " *", 
    " */", 
    "ko.extensions.vilbur.CodeFinder = (function()", 
    "{", 
    "", 
    "   \t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/** CONSTRUCT", 
    "\t */", 
    "\tfunction CodeFinder(){", 
    "", 
    "\t\t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar _this\t= this; // make private functions access to public PROPERTIES and METHODS()", 
    "\t\tvar CodeMatcher\t= new ko.extensions.vilbur.CodeMatcher();", 
    "", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tvar current_pos\t= scimoz.currentPos;", 
    "\t\t//var file_content\t= _getFileContent();", 
    "", 
    "\t\tvar search_for\t= [];", 
    "\t\tvar matches\t= [];", 
    "\t\tvar indexes;", 
    "\t\tvar match_found = null;", 
    "", 
    "\t\tvar select_groups\t= null;", 
    "\t\tvar selected_group\t= null;", 
    "", 
    "\t\tif( lang=='Node.js' )", 
    "\t\t\tlang='JavaScript';", 
    "", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** searchFor", 
    "\t\t */", 
    "\t\tthis.searchFor = function(keys)", 
    "\t\t{", 
    "\t\t\t//keys = ['function.public','function.private']; // DEBUG", 
    "\t\t\t//keys = ['function'];// DEBUG", 
    "\t\t\t//keys = ['function.prototype'];// DEBUG", 
    "\t\t\tsearch_for = keys;", 
    "", 
    "\t\t\tsetMatches();", 
    "\t\t\tsetIndexes();", 
    "", 
    "\t\t\tLogger.info(matches, 'matches');", 
    "\t\t\tLogger.info(indexes, 'indexes');", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** define which groups in match should be selected", 
    "\t\t * \tE.G.: { 'function.private':[1,2] }", 
    "\t\t */", 
    "\t\tvar selectGroups = function(_select_groups)", 
    "\t\t{", 
    "\t\t\tselect_groups\t= _select_groups;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** findCode", 
    "\t\t *", 
    "\t\t * @param\tstring\tfind\t'void|next|prev' search in whole file, after ('next'), or before ('prev') cursor", 
    "\t\t *", 
    "\t\t * @return\tobject\tmatch_found", 
    "\t\t */", 
    "\t\tthis.findCode = function( find, loop=true )", 
    "\t\t{", 
    "\t\t\tsetMatchFound(find);", 
    "", 
    "\t\t\tif( match_found===null && loop===true )", 
    "\t\t\t\tgetNextMatchInLoop( find );", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** getMatchFound", 
    "\t\t */", 
    "\t\tthis.getMatchFound = function()", 
    "\t\t{", 
    "\t\t\treturn match_found;", 
    "\t\t};", 
    "", 
    "\t\t/** selectFirstMatch", 
    "\t\t */", 
    "\t\tthis.selectMatch = function()", 
    "\t\t{", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "", 
    "\t\t\tif(match_found)", 
    "\t\t\t\tscimoz.setSel( match_found.index,  match_found.index + match_found[0].length );", 
    "", 
    "\t\t\tselectGroup(1);", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** select group in match", 
    "\t\t */", 
    "\t\tvar selectGroup = function(group_index)", 
    "\t\t{", 
    "\t\t\t///** getSelectedContent", 
    "\t\t\t// */", 
    "\t\t\t//var getSelectedContent = function()", 
    "\t\t\t//{", 
    "\t\t\t//\tvar sel_text\t= scimoz.selText;", 
    "\t\t\t//};", 
    "", 
    "\t\t\tif(match_found && typeof match_found[group_index] !== 'undefined' )", 
    "\t\t\t{", 
    "\t\t\t\tvar match_group = new RegExp( match_found[group_index], 'gi').exec(match_found[0]);", 
    "\t\t\t\tif( match_group )", 
    "\t\t\t\t{", 
    "\t\t\t\t\tLogger.info(match_group, 'match_group');", 
    "\t\t\t\t\tscimoz.setSel( match_found.index+match_group.index, match_found.index+match_group.index + match_group[0].length );", 
    "\t\t\t\t}", 
    "", 
    "\t\t\t}", 
    "\t\t};", 
    "", 
    "\t\t/*------   PRIVATE METHODS    -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** setMatches", 
    "\t\t */", 
    "\t\tvar setMatches = function()", 
    "\t\t{", 
    "\t\t\tvar matches_by_type = CodeMatcher.searchFor(search_for).getMatches();", 
    "", 
    "\t\t\t/** set Match", 
    "\t\t\t */", 
    "\t\t\tvar setMatch = function(match)", 
    "\t\t\t{", 
    "\t\t\t\tmatches[ match.index ] = match;", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var match_type in matches_by_type)", 
    "\t\t\t\tif (matches_by_type.hasOwnProperty(match_type))", 
    "\t\t\t\t\tfor(var m=0; m<matches_by_type[match_type].length;m++)", 
    "\t\t\t\t\t\tsetMatch( matches_by_type[match_type][m] );", 
    "", 
    "\t\t\t//Logger.info(matches, 'matches');", 
    "\t\t};", 
    "", 
    "\t\t/** setIndexes", 
    "\t\t */", 
    "\t\tvar setIndexes = function()", 
    "\t\t{", 
    "\t\t\tindexes = Object.keys(matches).sort(function(e1, e2) { return e1 - e2; });", 
    "\t\t};", 
    "", 
    "\t\t/** get first item from this.matches_all", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tvar setMatchFound = function(find)", 
    "\t\t{", 
    "\t\t\t//Logger.info(find, 'setMatchFound');", 
    "", 
    "\t\t\tswitch (find) {", 
    "\t\t\t\tcase 'first':", 
    "\t\t\t\t\tpos_found = indexes[0];break;", 
    "\t\t\t\tcase 'last':", 
    "\t\t\t\t\tpos_found = indexes[indexes.length-1];break;", 
    "\t\t\t\tcase 'prev':", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos, 'down');break;", 
    "\t\t\t\tcase 'next':", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos, 'up');break;", 
    "\t\t\t\tdefault:", 
    "\t\t\t\t\tpos_found = getClosestKey(indexes, current_pos); // find closest 'up' OR 'down'", 
    "\t\t\t}", 
    "\t\t\t//Logger.info(pos_found, 'pos_found');", 
    "", 
    "\t\t\tmatch_found\t= matches[pos_found] ? matches[pos_found] : null;", 
    "", 
    "\t\t\tLogger.info(match_found, 'match_found');", 
    "\t\t\tif(match_found)", 
    "\t\t\t\tcurrent_pos\t= match_found.index;", 
    "", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t * FIND CLOSEST NUMBER IN ARRAY", 
    "\t\t *", 
    "\t\t * @param\tarray\tnumbers\tSORTED array for searching", 
    "\t\t * @param\tnumber\tnum\tvalue for search", 
    "\t\t * @param\tmode\tstring\t'void|down|up'\t// 'void' find ABSOLUTE closest, 'down' find closest but lower number, 'up' find closest but higher number", 
    "\t\t *", 
    "\t\t\tvar numbers\t= [2, 5, 12, 13];", 
    "\t\t\tvar closest_absolute\t= getClosestNumber(arr, 7);", 
    "\t\t\tvar closest_lower\t= getClosestNumber(arr, 7, 'down');\t// 5", 
    "\t\t\tvar closest_upper\t= getClosestNumber(arr, 7, 'up');\t// 12", 
    "\t\t */", 
    "\t\tvar getClosestKey = function(array, num, mode='')", 
    "\t\t{", 
    "\t\t\t//Logger.info(array, 'search '+num );", 
    "", 
    "\t\t\tvar diff=10000;", 
    "\t\t\tvar result;", 
    "\t\t\tfor(var k=0; k<array.length;k++) {", 
    "", 
    "\t\t\t\tvar m;", 
    "\t\t\t\t/* GET ABSOLUTE CLOSEST NUMBER*/", 
    "\t\t\t\tif(mode ===''){", 
    "\t\t\t\t\tm = Math.abs(num-array[k]);", 
    "\t\t\t\t\tif(m<diff){", 
    "\t\t\t\t\t\tdiff\t= m;", 
    "\t\t\t\t\t\tresult\t= array[k];", 
    "\t\t\t\t\t}", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tm = num-array[k];", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER LOWER */", 
    "\t\t\t\t\tif( mode ==='down' && m>0 )", 
    "\t\t\t\t\t\tresult=array[k];", 
    "", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER HIGHER */", 
    "\t\t\t\t\telse if( mode ==='up' && m<0 )", 
    "\t\t\t\t\t\treturn array[k];", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "", 
    "\t\t\treturn result;", 
    "\t\t};", 
    "", 
    "\t\t/** select first or last match, if find=='next|prev' and there is not next or previous match", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar getNextMatchInLoop = function( find )", 
    "\t\t{", 
    "\t\t\t//alert( 'getNextMatchInLoop' );", 
    "\t\t\tsetMatchFound( find=='next' ? 'first' : 'last' );", 
    "\t\t};", 
    "", 
    "\t}", 
    "", 
    "\t///** _getRegExMatch", 
    "\t// */", 
    "\t//CodeFinder.prototype._getRegExMatch = function(key, regex){", 
    "\t//\tvar match_string = this.file_content.after.match(regex);", 
    "\t//\tif (match_string)", 
    "\t//\t\tthis.matches_all[key] = match_string[0];", 
    "\t//};", 
    "", 
    "\treturn CodeFinder;", 
    "", 
    "})();", 
    "", 
    "", 
    "", 
    "var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "if(current_filename === 'CodeFinder_test_on_document.js'){", 
    "", 
    "", 
    "\t\tvar _CodeFinder\t= new ko.extensions.vilbur.CodeFinder();", 
    "", 
    "\t\t//_CodeFinder.findCode('function','next')", 
    "\t\t\t_CodeFinder", 
    "\t\t\t//.searchFor('parameters')", 
    "\t\t\t.searchFor('function')", 
    "\t\t\t//.searchFor('function.private')", 
    "\t\t\t.selectGroups({'function.private':[1,2]})", 
    "", 
    "\t\t\t.findCode('next')", 
    "", 
    "\t\t\t//.findCode('first')", 
    "\t\t\t.selectMatch();", 
    "", 
    "", 
    "}"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}