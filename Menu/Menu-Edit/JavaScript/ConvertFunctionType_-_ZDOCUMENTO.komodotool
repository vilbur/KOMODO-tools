{
  "keyboard_shortcut": "", 
  "name": "ConvertFunctionType - ZDOCUMENTOVAT A PREJMENOVAT", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "value": [
    "/** ConvertFunction", 
    " */", 
    "ko.extensions.ConvertFunction = (function() {", 
    "", 
    "\t", 
    "\t/* CONSTRUCT */", 
    "\tfunction ConvertFunction(sel_text=''){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\t//alert( \"Presat funkci ConvertFunction()\" );", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3(this).clear(false).off(false);\t\t", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar koEditor\t= require(\"ko/editor\");", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\tthis.regex_all = {", 
    "\t\t\t'prototype':\t/\\w+\\.prototype\\.(\\w+)\\s*=\\s*function\\s*\\((.*)\\).*[\\r\\n\\s]*?{/gi,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t'variable_fn':\t/(?:this\\.|var\\s+)(\\w+)\\s*=\\s*\\(*\\s*function\\s*\\(.*\\).*[\\r\\n\\s]*?{/gi,\t// match fn in variable\tE.G: 'this.fnName = (function (parameters){' OR 'var fnName = function (parameters){' etc...", 
    "\t\t\t//'private':\t/(function\\s+\\w+\\s*\\(.*\\)[\\r\\n\\s]*?{)/gi,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t'private':\t/function\\s+(\\w+)\\s*\\(.*\\)[\\r\\n\\s]*?{/gi,\t// match function\tE.G: 'function fnName(parameters){'\t\t\t\t", 
    "\t\t};", 
    "\t\tthis.regex\t= null;\t", 
    "\t\tthis.input\t= null;", 
    "\t\t//var pos = {currentPos:}", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t\t/** _getRegex", 
    "\t\t*/", 
    "\t\tfunction _getRegex(input){", 
    "\t\t\tvar regex_all_keys = Object.keys(_this.regex_all);", 
    "\t\t\tfor(r=0; r<regex_all_keys.length;r++) {", 
    "\t\t\t\tvar key\t= regex_all_keys[r];", 
    "\t\t\t\tvar match\t= _this.regex_all[key].exec(input);", 
    "\t\t\t\t//Logger.info(match, 'match');", 
    "\t\t\t\tif(match)", 
    "\t\t\t\t\treturn {'key': key, 'object': _this.regex_all[key],'match': match};\t\t\t\t", 
    "\t\t\t\t\t//return {'key': key, 'match': match};", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t", 
    "\t\t", 
    "\t\t/** convert", 
    "\t\t*/", 
    "\t\t//this.convert = function(input){", 
    "\t\tthis.convert = function(input){", 
    "\t\t\tthis.input\t= input;", 
    "\t\t\t", 
    "\t\t\tthis.start\t= scimoz.currentPos;", 
    "\t\t\tthis.end\t= scimoz.anchor;", 
    "", 
    "\t\t\tthis.regex\t= _getRegex(input);", 
    "\t\t\t", 
    "\t\t\tLogger.info(this.regex, 'this.regex');", 
    "\t\t\t", 
    "\t\t\tvar fn_replaced=''; ", 
    "\t\t\tif (this.regex ) {", 
    "\t\t\t\tif(this.regex.key==='prototype') ", 
    "\t\t\t\t\tfn_replaced = convertPrototypeToPrivate(this.regex);", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\t/* CONVERT FILE CONTENTS TO LAUNCH ONVERTED PRIVATE FUNCTION */", 
    "", 
    "\t\t\tvar match_string = new RegExp('this\\.('+this.regex.match[1]+')', \"gi\");", 
    "\t\t\t", 
    "\t\t\t// in file contetnt BEFORE and AFTER replaced function REPLACE 'this.fnName()' TO 'fnName()'", 
    "\t\t\tvar text_before\t= scimoz.getTextRange(0, this.start).replace( match_string, '$1');", 
    "\t\t\tvar text_after\t= scimoz.getTextRange(this.end, koEditor.getLength() ).replace( match_string, '$1');\t\t", 
    "", 
    "\t\t\t/* SET FILE CONTENT*/", 
    "\t\t\tkoEditor.setValue(text_before+fn_replaced+text_after);", 
    "\t\t\t", 
    "\t\t\t/* SELECT REPLACED FUNCTION  */", 
    "\t\t\tscimoz.currentPos\t= text_before.length;", 
    "\t\t\tscimoz.anchor\t= scimoz.currentPos + fn_replaced.length;", 
    "\t\t\t", 
    "\t\t\tsetTimeout( function(){ ", 
    "\t\t\t\t//scimoz.lineScrollDown();", 
    "\t\t\t\tscimoz.scrollCaret();\t\t\t\t\t\t\t\t", 
    "\t\t\t\t//scimoz.pageDown();", 
    "\t\t\t\t", 
    "\t\t\t}, 500);", 
    "\t\t\t//scimoz.lineScroll(0, 250);\t\t\t", 
    "", 
    "\t\t};", 
    "\t\t", 
    "\t", 
    "\t\t", 
    "\t\t", 
    "\t\t", 
    "\t\t", 
    "\t\t/** convertPrototypeToPrivate", 
    "\t\t*/", 
    "\t\tfunction convertPrototypeToPrivate(regex){", 
    "\t\t\t//Logger.info( _this.regex.match[0], 'convertPrototypeToPrivate()');", 
    "\t\t\tLogger.info(_this.input, '_this.input');", 
    "\t\t\t//Logger.info(_this, '_this');", 
    "\t\t\t\tvar fn_replaced = _this.input.replace(_this.regex_all[_this.regex.key], 'function $1($2){' )", 
    "\t\t\t\t\t.replace(/}\\)[;\\r\\n\\s]$/gi, '}')", 
    "\t\t\t\t\t.replace(/;\\s*$/gi, '') // remove empty space and eol character ", 
    "\t\t\t\t\t//.replace(/this.(\\w+)\\s*=/gi, 'var $1 =')", 
    "\t\t\t\t\t.replace(/this./gi, '_this.');", 
    "\t\t\t", 
    "\t\t\treturn fn_replaced;", 
    "\t\t\t", 
    "\t\t}", 
    "\t\t", 
    "\t\t/*--------   RUN INIT METHODS   ------------------------------------------------------------------------------------*/\t\t", 
    "\t\tif(sel_text!=='')", 
    "\t\t\tthis.convert(sel_text);", 
    "\t}", 
    "\t", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "\treturn ConvertFunction;", 
    "})();", 
    "", 
    "//ko.views.manager.currentView.scimoz.beginUndoAction()", 
    "//try {", 
    "//\tnew ko.extensions.ConvertFunction(ko.views.manager.currentView.scimoz.selText);", 
    "//", 
    "//} finally {", 
    "//\tko.views.manager.currentView.scimoz.endUndoAction()", 
    "//}"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}