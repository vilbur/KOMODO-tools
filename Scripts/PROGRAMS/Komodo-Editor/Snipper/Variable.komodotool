{
  "keyboard_shortcut": "", 
  "name": "Variable", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/*", 
    " *\t@Properties", 
    "\t\tstring\tprefix\tcharacter before variable\te.g: '$'\tin PHP\t// $foo", 
    "\t\tstring\tidentifier\tidentifier of declarated variable\te.g: 'var'\tin JavaScript\t// var Foo", 
    "\t\tstring\tdelimeter\tdelimeter of variable name and value\te.g: '='\tin PHP \t// $foo = value", 
    "\t\tstring\tlineEnd\tcharacter on end of line\te.g: ';'\tin PHP\t// code on line end with ;", 
    "", 
    "\t\tint\tNumericFactor\tsnippet repeats n times\te.g: http://docs.komodoide.com/SDK/api/legacy/snippets#snippets_functions_consumeleadingnumericfactor", 
    "", 
    " */", 
    "", 
    "ko.extensions.Variable = (function() {", 
    "", 
    "\t/* construct */", 
    "\tfunction Variable() {", 
    "\t\tthis.lang\t= this._getLang();", 
    "\t\tthis.prefix \t= this._getPrefix();", 
    "\t\tthis.identifier \t= this._getIdentifier();", 
    "\t\tthis.delimeter \t= this._getDelimeter();", 
    "\t\tthis.lineEnd \t= this._getCharLineEnd();", 
    "\t\tthis.NumericFactor\t= this._getNumericFactor();", 
    "\t\t//alert( this.lang );", 
    "\t\t//this.variable_pairs\t= []", 
    "\t\tthis.variables = [];", 
    "", 
    "\t}", 
    "\t/*", 
    "\t */", 
    "\tVariable.prototype.findParametersInBrackets = function(content) {", 
    "\t\t//var content = \";;flooFlyyFlaj(  $par, $string:=\\\"test string\\\", $str_empty:=\\\") @\" // !!! DEVELOP", 
    "\t\tvar variable_pairs\t= [];", 
    "\t\trx_parameters_in_brackets = /\\(\\s*(\\S.*)\\s*\\)/gi;", 
    "\t\tvar match =  rx_parameters_in_brackets.exec(content);", 
    "\t\tif (typeof  match[1] != 'undefined')", 
    "\t\t\tvariable_pairs = match[1].split(',');", 
    "\t\tthis.splitVariablePairs(variable_pairs);", 
    "\t\t//this._LineObejct.setTabspaces()", 
    "\t};", 
    "", 
    "\t/**", 
    "\t */", 
    "\tVariable.prototype.findVariablesInString = function(string){", 
    "\t\t//alert( \"findVariablesInString()\\n\"+string );", 
    "\t\tvar lines\t= string.split(/[\\r\\n]/);", 
    "\t\tthis.variables\t= this.splitVariablePairs(lines);", 
    "\t\treturn this.variables;", 
    "\t\t//alert( 'variables=\\n'+JSON.stringify( this.variables, null, 2) );", 
    "\t};", 
    "\t/*", 
    "\t */", 
    "\tVariable.prototype.getValueDataType = function(value) {", 
    "\t\t//alert( value );", 
    "\t\tvar dataTypeMatches = {", 
    "\t\t\t\"array\":'[\\\\[\\\\]]',", 
    "\t\t\t\"object\":'[\\{\\}]',", 
    "\t\t\t\"float\":'[\\\\d]+\\\\.[\\\\d]+',", 
    "\t\t\t\"integer\":'\\\\d+',", 
    "\t\t\t\"string\":'[\\'\"].*[\\'\"]',", 
    "\t\t};", 
    "", 
    "\t\tfor ( var key in dataTypeMatches ) {", 
    "\t\t\tif ( value.trim().match(dataTypeMatches[key]) !== null )", 
    "\t\t\t\treturn key;", 
    "\t\t}", 
    "\t\treturn 'undefined';", 
    "\t};", 
    "", 
    "\t/*", 
    "\t *", 
    "\t */", 
    "\tVariable.prototype.splitVariablePairs = function(variable_pairs) {", 
    "", 
    "\t\tvar variables = [];", 
    "", 
    "\t\tfor (i = 0; i < variable_pairs.length; i++) {", 
    "", 
    "\t\t\tif ( variable_pairs[i].match(/^\\s*$/gi) === null ) {", 
    "", 
    "\t\t\t\tvar variable_split = variable_pairs[i].split(this.delimeter);", 
    "\t\t\t\t//alert( 'variable_split=\\n'+JSON.stringify( variable_split, null, 2) )", 
    "\t\t\t\tvariables.push({", 
    "\t\t\t\t\t\"name\"\t: variable_split[0].split(/\\s+/).pop().trim(),\t\t//  e.g: GET 'var_name' FROM 'var var_name'", 
    "\t\t\t\t\t\"type\"\t: typeof variable_split[1]!= 'undefined' ? this.getValueDataType(variable_split[1])\t: 'type',\t//'[[%tabstop:type]]',", 
    "\t\t\t\t\t\"value\"\t: typeof variable_split[1]!= 'undefined' ? variable_split[1].trim()\t: 'value',\t//'[[%tabstop:value]]'", 
    "\t\t\t\t});", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\treturn variables;", 
    "", 
    "\t};", 
    "", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tGET MAIN PROPERTIES\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*", 
    "\t*/", 
    "\tVariable.prototype._getLang = function() {", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\treturn (lang=='Komodo Snippet') ? 'JavaScript' : lang;", 
    "\t};", 
    "\t/*", 
    "\t */", 
    "\tVariable.prototype._getNumericFactor = function(delimeter=' ') {", 
    "\t\tvar NumericFactor\t= ko.snippets.consumeLeadingNumericFactor(delimeter);", 
    "\t\treturn NumericFactor > 0 ? NumericFactor : 1;", 
    "\t};", 
    "\t/* get line end character", 
    "\t */", 
    "\tVariable.prototype._getCharLineEnd = function(){", 
    "\t\treturn (this.lang=='PHP' || this.lang==\"JavaScript\" || this.lang=='Less' || this.lang=='SCSS' ) ? ';' : '';", 
    "\t};", 
    "\t/*", 
    "\t */", 
    "\tVariable.prototype._getPrefix = function(){", 
    "\t\tswitch (this.lang) {", 
    "\t\t\tcase 'PHP': case 'LaravelBlade': case 'Autohotkey':", 
    "\t\t\t\treturn '$';", 
    "\t\t\tcase 'Less': case 'SCSS':", 
    "\t\t\t\treturn '@';", 
    "\t\t\tdefault:", 
    "\t\t\t\treturn '';", 
    "\t\t}", 
    "\t};", 
    "", 
    "\t/*", 
    "\t */", 
    "\tVariable.prototype._getIdentifier = function(){", 
    "\t\treturn ( this.lang == 'JavaScript' ) ? 'var ' : '';", 
    "\t};", 
    "\t/*", 
    "\t */", 
    "\tVariable.prototype._getDelimeter = function(){", 
    "", 
    "\t\tswitch (this.lang) {", 
    "\t\t\tcase 'Autohotkey':", 
    "\t\t\t\treturn ':=';", 
    "\t\t\tcase 'Less': case 'SCSS':", 
    "\t\t\t\treturn ':';", 
    "\t\t\tdefault:", 
    "\t\t\t\treturn '=';", 
    "\t\t}", 
    "\t};", 
    "", 
    "\treturn Variable;", 
    "})();", 
    "", 
    "", 
    "", 
    "/** Variable", 
    "*/", 
    "function VariableTest(){", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\tvar Variable\t= ko.extensions.Variable();", 
    "\tLogger.info(Variable);", 
    "", 
    "}", 
    "/*", 
    "*/", 
    "//VariableTest();", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/money_dollar.png"
}