{
  "keyboard_shortcut": "Ctrl+W", 
  "name": "find WORD", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "/*\tfind_WORD\t*/", 
    "/* example", 
    "\tmatches = {", 
    "\t\tglobal: {", 
    "\t\t\t'searchFoo': 'replaceBar',                // match \"searchFoo\", search \"searchFoo\" relace with \"replaceBar\"", 
    "\t\t\t'matchFaz': ['searchFoo', 'replaceBar'],  // match \"matchFaz\", search \"searchFoo\" replace with \"replaceBar\"", 
    "\t\t}", 
    "\t}", 
    "*/", 
    "", 
    "", 
    "", 
    "/* =========== OPTIONS =========== */", 
    "\tALERT_LANG=false", 
    "\ttestRegExString = '^([^\\\\\\\\s]*\\\\[^\\\\\\\\s]*)+$';", 
    "", 
    "\tbackwards = false;", 
    "\tcommand_file \t\t   = \"C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\8.5\\\\tools\\\\_Functions\\\\find_WORD.komodotool\";", 
    "\tcommand_file_backwords = \"C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\8.5\\\\tools\\\\_Functions\\\\find_WORD_backwards.komodotool\";", 
    "\tcache_file \t\t\t   = \"c:\\\\windows\\\\temp\\\\komodo_find_word.txt\";;", 
    "", 
    "\t//////var REPLACE = true;", 
    "", 
    "", 
    "/* =========== REGEXES =========== */", 
    "rx_string = '[\\'\"][^\\'\"]+[\\'\"]';", 
    "", 
    "", 
    "/* ============================================================================================== */", 
    "/*\t\t\tMATCHES                                                                               */", 
    "/* ============================================================================================== */", 
    "", 
    "var matches = {", 
    "\tglobal: {", 
    "\t\t'[\\'\"][^\\'\"]+[\\'\"]':'', \t\t\t\t\t// ['\"]string['\"]", 
    "\t\t'null':'',", 
    "\t\t'\\\\w*(\\\\\\\\\\\\w+)+':'',\t\t\t\t\t    //  some\\foo\\url\\with\\single\\slash", 
    "\t\t//'->\\\\w+':'(\\\\w+)'\t\t\t\t\t\t\t//  FIND ->methodInPhpChain() SELECT \"methodInPhpChain\"", 
    "\t\t'\\\\(\\\\s*\\\\S+\\\\s*\\\\)':'',         \t\t\t\t\t\t // SELECT brackets and text between", 
    "", 
    "", 
    "", 
    "\t},", 
    "\t/* =========== Batch =========== */", 
    "\tBatch: {", 
    "\t\t'%.*%':'',", 
    "\t\t':\\\\w+':':(\\\\w+)',", 
    "\t},", 
    "", 
    "\t/* =========== PHP =========== */", 
    "\tPHP: {", 
    "\t\t'public\\\\s+function\\\\s+\\\\w+':'function\\\\s+(\\\\w+)',       // match 'public function fooFunction()' and select 'fooFunction'", 
    "\t    '[\\\\\\$]*\\\\w+([:\\\\->])+(\\\\$*\\\\w+(\\\\([\\\\w\\'\"]*\\\\)|->)*)*':'',  // SELECT \"methodInPhpChain\" IN $this->methodInPhpChain() OR foo->methodInPhpChain()", 
    "\t\t'\\\\$((?!this)[\\\\w-]+)':'',                               // match php $variable, EXCEPT '$this'  e.g: $variable", 
    "\t////[\\\\\\$]*\\w+([:\\->])+(\\w+(\\([\\w'\"]*\\)|->)*)*               // SELECT \"methodInPhpChain\" IN ->methodInPhpChain()", 
    "\t\t'\\\\w+\\\\s*\\\\(.*\\\\)':'(\\\\w+).*',\t\t\t\t\t\t     // SELECT FooFunction name IN FooFunction([$arguments])", 
    "", 
    "", 
    "\t},", 
    "", 
    "\t/* =========== LaravelBlade =========== */", 
    "\tLaravelBlade: {", 
    "\t\t'\\\\$((?!this)[\\\\w-]+)':'',                               // match php $variable, EXCEPT '$this'  e.g: $variable", 
    "\t},", 
    "", 
    "\t/* =========== JavaScript =========== */", 
    "\tJavaScript: {", 
    "\t\t'var\\\\s+\\\\w+':'var\\\\s+(\\\\w+)',                           // FIND var fooVar SELCT fooVar", 
    "\t\t'\\\\s+function\\\\s+\\\\w+\\\\s*\\\\(.*\\\\)':'function\\\\s+(\\\\w+)', // match 'public function fooFunction()' and select 'fooFunction'", 
    "\t\t//'public\\\\s+function\\\\s+\\\\w+':'function\\\\s+(\\\\w+)',     // match 'public function fooFunction()' and select 'fooFunction'", 
    "", 
    "\t},", 
    "", 
    "\t/* =========== Node =========== */", 
    "\tNode: {", 
    "\t},", 
    "", 
    "\t/* =========== SCSS =========== */", 
    "\tSCSS: {", 
    "\t\t'\\\\$([\\\\w-]+)':'',                               \t\t// match  $foo-variable", 
    "\t\t'^\\\\s*(\\\\S+)(?:\\\\:)':'(\\\\S+)(?=\\\\:)',                   // SELECT foo-parametr IN foo-parametr:", 
    "\t\t'^\\\\s*[\\\\.#](\\\\S+)\\\\s*(?:{)':'([\\\\.#]\\\\S+)(?=\\\\s*{)',         // SELECT .foo-class or #foo-id", 
    "", 
    "", 
    "\t},", 
    "", 
    "\t/* =========== Maxscript =========== */", 
    "\tMaxscript: {", 
    "\t},", 
    "", 
    "\t/* =========== Autohotkey =========== */", 
    "\tAutohotkey: {", 
    "\t\t'%\\\\S+%':'',\t\t\t\t\t\t\t\t   // MATCH %variable%", 
    "\t\t'\\\\$((?!this)\\\\w+)':'',                            // match php $variable, EXCEPT '$this'  e.g: $variable", 
    "\t\t'\\\\w+\\\\(([^\\\\)]+)\\\\)':'(\\\\w+)\\\\(([^\\\\)]+)\\\\)',\t\t\t\t\t   // select text before parentheses() ....typicaly finction E.G.: FooFunction($att) SELECTS FooFunction", 
    "", 
    "", 
    "\t},", 
    "};", 
    "", 
    "", 
    "", 
    "/**", 
    "* =============== COMMAND =================", 
    "**/", 
    "copyCommandFile( command_file );", 
    "", 
    "ko.views.manager.currentView.scimoz.beginUndoAction()", 
    "try {", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\tvar REPLACED = false;", 
    "\tvar lang = ko.views.manager.currentView.languageObj.name.split('.').shift();", 
    "\tvar matches_lang = matches[lang];", 
    "\t//if (ALERT_LANG==true) alert( lang );", 
    "", 
    "\tvar NextCharacter = getNextCharacter();", 
    "\t//alert( NextCharacter.match(/['\"]/g) );", 
    "\t/*\tEXCEPTION FOR QUOTES\t*/ // go behind quote if next character is quote e.g: '|\"", 
    "\tif (  NextCharacter.match(/['\"]/g) != null ) {", 
    "\t\tko.commands.doCommand('cmd_right')", 
    "\t\tko.commands.doCommand('cmd_right')", 
    "\t}", 
    "", 
    "", 
    "\tif ( typeof matches_lang != 'undefined') {", 
    "\t\tvar finds = Object.keys(matches_lang).map( function(REGEX_SEARCH){return matches_lang[REGEX_SEARCH]})", 
    "", 
    "\t\t/*    MERGE WITH GLOBAL MATCHES            */", 
    "\t\t//for ( var attrname in  matches.global ) { matches_lang[attrname] =  matches.global[attrname]; }", 
    "\t\tvar merged_matches = {};", 
    "\t\tfor ( var attrname in  matches_lang   ) { merged_matches[attrname] =  matches_lang[attrname]; }", 
    "\t\tfor ( var attrname in  matches.global ) { merged_matches[attrname] =  matches.global[attrname]; }", 
    "\t\t//matches_lang = merged_matches", 
    "\t\t//alert( JSON.stringify( merged_matches, null, 2) )", 
    "", 
    "", 
    "\t\t/*", 
    "\t\t\tFIND TEXT", 
    "\t\t*/", 
    "\t\tvar regExString = Object.keys(merged_matches).join('|');", 
    "\t\tko.find.findNextInMacro( window, 0, regExString, 2, 0, backwards, false, find, false, true );", 
    "\t\t/*", 
    "\t\t\tFOUND_TEXT", 
    "\t\t*/", 
    "\t\tvar FOUND_TEXT = scimoz.selText;", 
    "", 
    "\t\t/*", 
    "\t\t\tLOOP ALL REGEXES AND FIND CURRENT USED", 
    "\t\t*/", 
    "\t\t//alert( 'merged_matches=\\n'+JSON.stringify( merged_matches, null, 2) )", 
    "\t\tfoundUsedRegex(merged_matches, FOUND_TEXT);", 
    "", 
    "\t\twriteToFile( cache_file, scimoz.selText )", 
    "\t}", 
    "} finally {", 
    "\tko.views.manager.currentView.scimoz.endUndoAction()", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "/**", 
    "**/", 
    "function foundUsedRegex(merged_matches, FOUND_TEXT) {", 
    "", 
    "\tfor ( var REGEX_SEARCH in merged_matches ) {", 
    "\t\tif ( REGEX_SEARCH != '') {", 
    "\t\t\t/*    SELECT TEXT BY REGEX VALUE    */", 
    "\t\t\tvar match_key  = new RegExp( REGEX_SEARCH , \"g\").exec(FOUND_TEXT);", 
    "", 
    "\t\t\tif ( match_key ) {", 
    "\t\t\t\tvar REGEX_SELECT = merged_matches[REGEX_SEARCH];", 
    "\t\t\t\tselectedTextInFoundMatch(FOUND_TEXT,REGEX_SELECT);", 
    "\t\t\t}", 
    "\t\t}else {", 
    "\t\t\tko.commands.doCommand('cmd_right')", 
    "\t\t}", 
    "", 
    "\t}", 
    "}", 
    "", 
    "", 
    "", 
    "/**", 
    "**/", 
    "function selectedTextInFoundMatch(FOUND_TEXT,REGEX_SELECT) {", 
    "", 
    "\t/**", 
    "\t\tIF REGEX_SELECT VALUE is defined", 
    "\t\tmatches={", 
    "\t\t\tLanguage:{ 'REGEX_SEARCH': 'REGEX_SELECT'}", 
    "\t\t}", 
    "\t**/", 
    "\t//alert('REGEX_SELECT: '+REGEX_SELECT);", 
    "", 
    "\tif ( REGEX_SELECT!='') {", 
    "", 
    "\t\tvar FOUND_TEXT = scimoz.selText;", 
    "\t\tvar regEx = new RegExp( REGEX_SELECT, \"gi\");", 
    "\t\tvar match =  regEx.exec(FOUND_TEXT);", 
    "\t\t//alert( JSON.stringify( match, null, 2) )", 
    "\t\t/**", 
    "\t\t*", 
    "\t\t**/", 
    "\t\tif ( match!= null ) {", 
    "\t\t\tvar FindText = typeof match[1]!='undefined' ?  match[1] :  match[0] ;", 
    "\t\t\t//alert('FindText: '+FindText);", 
    "\t\t\tko.commands.doCommand('cmd_left')", 
    "\t\t\tko.find.findNextInMacro( window, 0, FindText, 2, 0, false, false, find, false, true );", 
    "\t\t\treturn", 
    "\t\t}", 
    "\t}", 
    "", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "function getNextCharacter() {", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "", 
    "\tvar selection_start = scimoz.wordStartPosition( scimoz.currentPos, true );", 
    "\tvar selection_end = scimoz.wordEndPosition( scimoz.currentPos, true );", 
    "", 
    "\tscimoz.anchor     = selection_end;", 
    "\tscimoz.currentPos = selection_end+1;", 
    "", 
    "\tvar nextCharacter  = scimoz.selText;", 
    "\t//alert(selection_start+' - '+selection_end);", 
    "", 
    "\tscimoz.anchor     = selection_start;", 
    "\tscimoz.currentPos = selection_end;", 
    "\t//alert( nextCharacter );", 
    "\treturn nextCharacter;", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "/* ============================================================================================== */", 
    "/*\t\t\tCOMPILE                                                                               */", 
    "/* ============================================================================================== */", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function writeToFile( file, string ) {", 
    "\tvar filePath = file;", 
    "\tvar koFileEx = Components.classes[\"@activestate.com/koFileEx;1\"]", 
    "\t\t\t\t\t\t.createInstance( Components.interfaces.koIFileEx );", 
    "\tkoFileEx.path = filePath; // forward slashes fine", 
    "\tkoFileEx.open(\"w\");", 
    "\tkoFileEx.puts(string);", 
    "\tkoFileEx.close();", 
    "}", 
    "", 
    "function getCommandFileContent(filePath) {", 
    "\tvar reader = Components.classes[\"@activestate.com/koFileEx;1\"]", 
    "\t\t\t\t\t\t.createInstance( Components.interfaces.koIFileEx );", 
    "\treader.path = filePath; // backslashes if you insist", 
    "\treader.open(\"r\");", 
    "\tvar file_content = reader.readfile();", 
    "\treader.close();", 
    "\treturn file_content", 
    "}", 
    "", 
    "function copyCommandFile(filePath) {", 
    "\tvar command_file_content = getCommandFileContent(filePath)", 
    "\tvar command_file_content_obj = JSON.parse( command_file_content )", 
    "", 
    "\t/* =========== CHANGE CHORTCUT =========== */", 
    "\t\tcommand_file_content_obj['keyboard_shortcut'] = \"Alt+W\"", 
    "\t\tcommand_file_content_obj['name'] = \"find WORD backwards\"", 
    "\t//alert( JSON.stringify( command_file_content_obj['value'], null, 2) )", 
    "\tfor(var i=0; i<command_file_content_obj['value'].length;i++) {", 
    "\t\tvar line = command_file_content_obj['value'][i];", 
    "", 
    "\t\t/* =========== SEARCH AND REPLACE IN SCRIPT=========== */", 
    "\t\tif ( line.match(/var backwards\\s+=\\s+false;/g) != null ) {", 
    "\t\t\talert(line);", 
    "\t\t\tcommand_file_content_obj['value'][i] = line.replace(/false/gi,'true')", 
    "\t\t}", 
    "", 
    "", 
    "", 
    "\t}", 
    "\twriteToFile( command_file_backwords, JSON.stringify( command_file_content_obj ))", 
    "}"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": false, 
  "type": "macro"
}