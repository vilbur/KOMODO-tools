{
  "keyboard_shortcut": "", 
  "name": "ProjectFilesOpener", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "ko.extensions.ProjectFilesOpener = {};", 
    "", 
    "/**.ProjectFilesOpener", 
    " */", 
    "var ProjectFilesOpener = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction ProjectFilesOpener(){", 
    "\t\t/** _Tabbox", 
    "\t\t */", 
    "\t\tvar Tabbox = (function() {", 
    "\t\t\t/* CONSTRUCT */", 
    "\t\t\tfunction Tabbox(){", 
    "\t\t\t\t//var blacklist = ['chrome://komodo/content/quickstart.xml#view-quickstart'];", 
    "\t\t\t\t//var koFile\t= require(\"ko/file\");", 
    "\t\t\t\tvar _timeout\t= 0;", 
    "", 
    "\t\t\t\tthis.closeAllBuffers = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tsetTimeout( function(){", 
    "\t\t\t\t\t\tLogger.info( 'cmd_closeAll');", 
    "\t\t\t\t\t\tko.commands.doCommand('cmd_closeAll');", 
    "\t\t\t\t\t}, timeout(1500));//2", 
    "\t\t\t\t};", 
    "\t\t\t\t/*", 
    "\t\t\t\t * @var {\"1\":[],\"2\":[]} views_paths object of arrays of file paths per view", 
    "\t\t\t\t*/", 
    "\t\t\t\tthis.openFiles = function(views_paths)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tthis.closeAllBuffers();", 
    "\t\t\t\t\tLogger.info( views_paths, 'openFiles()');", 
    "\t\t\t\t\tif(views_paths.view2.length>0){", 
    "\t\t\t\t\t\tsplitViews();", 
    "\t\t\t\t\t\topenFilesInPane(views_paths.view2);//3", 
    "\t\t\t\t\t\tswitchViews();", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\topenFilesInPane(views_paths.view1);", 
    "", 
    "\t\t\t\t\teventsOn(timeout(500));//4", 
    "\t\t\t\t\t_timeout = 0; // reset timeout", 
    "\t\t\t\t};", 
    "\t\t\t\tvar splitViews = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tsetTimeout( function(){", 
    "\t\t\t\t\t\tLogger.info( 'splitViews');", 
    "\t\t\t\t\t\tko.commands.doCommand('cmd_splittab');", 
    "\t\t\t\t\t}, timeout(1500));//2", 
    "\t\t\t\t};", 
    "\t\t\t\tvar switchViews = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tsetTimeout( function(){", 
    "\t\t\t\t\t\tLogger.info( 'switchViews');", 
    "\t\t\t\t\t\tko.commands.doCommand('cmd_switchpane');", 
    "\t\t\t\t\t}, timeout(1500));//2", 
    "\t\t\t\t};", 
    "\t\t\t\tvar openFilesInPane = function(paths)", 
    "\t\t\t\t{", 
    "\t\t\t\t\t//Logger.info( paths, 'openFilesInPane');", 
    "\t\t\t\t\tfor(var f=0; f<paths.length;f++)", 
    "\t\t\t\t\t\topenFile( paths[f]);", 
    "\t\t\t\t};", 
    "\t\t\t\tvar openFile = function(path)", 
    "\t\t\t\t{", 
    "\t\t\t\t\t//if(koFile.exists(path))", 
    "\t\t\t\t\tsetTimeout( function(){", 
    "\t\t\t\t\t\tLogger.info( 'openFile');", 
    "\t\t\t\t\t\tko.open.URI( path );", 
    "\t\t\t\t\t}, timeout(100));", 
    "\t\t\t\t};", 
    "\t\t\t\t/**", 
    "\t\t\t\t */", 
    "\t\t\t\tthis.getOpenedTabsFiles = function(){", 
    "\t\t\t\t\tvar file_views\t= ko.views.manager.topView.getDocumentViews(true);", 
    "\t\t\t\t\tvar opened_files_all\t= {view1:[], view2:[]};", 
    "", 
    "\t\t\t\t\tfor (var v = 0; v < file_views.length; v++) {", 
    "\t\t\t\t\t\tvar file_view = file_views[v];", 
    "", 
    "\t\t\t\t\t\tif (file_view.koDoc && file_view.koDoc.file) {", 
    "\t\t\t\t\t\t\tvar view\t= 'view'+ file_view.parentView.getAttribute('id').match(/\\d/gi);", 
    "\t\t\t\t\t\t\tvar file_URI\t= file_view.koDoc.file.URI;", 
    "\t\t\t\t\t\t\tvar file_path = file_URI.substring(0,4)==='file' ? file_view.koDoc.file.path : file_URI;", 
    "", 
    "\t\t\t\t\t\t\topened_files_all[view].push( file_path );", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\t//Logger.info( opened_files_all, 'getOpenedTabsFiles()');", 
    "\t\t\t\t\treturn opened_files_all;", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\t/* add timeout TO NEXT STEP", 
    "\t\t\t\t *", 
    "\t\t\t\t * @param integer timeout how much time is waiting to next step", 
    "\t\t\t\t *", 
    "\t\t\t\t * @return integer current timeout", 
    "\t\t\t\t*/", 
    "\t\t\t\tvar timeout = function(timeout_add)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar _timeout_current = _timeout;", 
    "\t\t\t\t\t_timeout += timeout_add;", 
    "\t\t\t\t\t//Logger.info( _timeout, '_timeout');", 
    "\t\t\t\t\treturn _timeout_current;", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t}", 
    "\t\t\treturn Tabbox;", 
    "\t\t})();", 
    "\t\t/** Project", 
    "\t\t */", 
    "\t\tvar Project = (function() {", 
    "\t\t\t/* CONSTRUCT */", 
    "\t\t\tfunction Project(){", 
    "\t\t\t\tthis.current\t= ko.projects.manager.currentProject;", 
    "\t\t\t\tthis.id\t= this.current ? this.current.id : null;", 
    "\t\t\t\tthis.name\t= this.current ? this.current.url.split('/').pop().replace(/.komodoproject/gi, '') : null;", 
    "\t\t\t\tthis.data = {", 
    "\t\t\t\t\tfile:\tthis.current ? this.current.url : null,", 
    "\t\t\t\t\tviews:\t{view1:[], view2:[]},", 
    "\t\t\t\t};", 
    "\t\t\t\tthis.removeFile = function(path)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(var view in this.data.views){if (this.data.views.hasOwnProperty(view)){", 
    "\t\t\t\t\t\tvar index\t= this.data.views[view].indexOf( path );", 
    "\t\t\t\t\t\tif(index>-1)", 
    "\t\t\t\t\t\t\tthis.data.views[view].splice( index, 1 );", 
    "\t\t\t\t\t}}", 
    "\t\t\t\t\tLogger.info( path, 'removeFile' );", 
    "\t\t\t\t};", 
    "\t\t\t\tthis.hasNoFiles = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\treturn this.data.views.view1.length===0 && this.data.views.view2.length===0;", 
    "\t\t\t\t};", 
    "", 
    "", 
    "\t\t\t}", 
    "\t\t\t//Logger.info( this );", 
    "\t\t\treturn Project;", 
    "\t\t})();", 
    "\t\t/** Project", 
    "\t\t */", 
    "\t\tvar Preferences  = (function()", 
    "\t\t{", 
    "\t\t\t/* CONSTRUCT */", 
    "\t\t\tfunction Preferences (){", 
    "", 
    "\t\t\t\tvar prefs\t= Components.classes['@activestate.com/koPrefService;1'].getService(Components.interfaces.koIPrefService).prefs;", 
    "\t\t\t\tthis.variables\t= {};", 
    "", 
    "\t\t\t\tthis.disableDefaultActionsOnProjectOpen = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tprefs.setStringPref('donotask_action_open_recent_files_on_project_open',\t'No');", 
    "\t\t\t\t\tprefs.setStringPref('donotask_action_close_all_files_on_project_close',\t'No');", 
    "\t\t\t\t\tprefs.setBooleanPref('donotask_open_recent_files_on_project_open',\ttrue);", 
    "\t\t\t\t\tprefs.setBooleanPref('donotask_close_all_files_on_project_close',\ttrue);", 
    "\t\t\t\t};", 
    "\t\t\t\tthis.envVarsLoad\t= function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar prefs_array = prefs.getStringPref('userEnvironmentStartupOverride').split('\\n').map(function(value){", 
    "\t\t\t\t\t\treturn value.split('=');", 
    "\t\t\t\t\t});", 
    "\t\t\t\t\t//Logger.info( prefs_array, 'prefs_array' );", 
    "\t\t\t\t\tif(prefs_array.length>0)", 
    "\t\t\t\t\t\tfor(var i=0; i<prefs_array.length;i++)", 
    "\t\t\t\t\t\t\tif(prefs_array[i].length==2)", 
    "\t\t\t\t\t\t\t\tthis.variables[prefs_array[i][0]]\t= prefs_array[i][1].match(/[{\\[].*[\\]}]/g) ? JSON.parse(prefs_array[i][1]) : prefs_array[i][1];", 
    "\t\t\t\t\t//Logger.info( this.variables, '_Preferences.setVariables()' );", 
    "\t\t\t\t\tif( typeof this.variables.projects === 'undefined' )", 
    "\t\t\t\t\t\tthis.variables.projects = {};", 
    "\t\t\t\t};", 
    "\t\t\t\tthis.envVarsSave\t= function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar save_data = [];", 
    "", 
    "\t\t\t\t\tfor(let key in this.variables){if (this.variables.hasOwnProperty(key)) {", 
    "\t\t\t\t\t\tsave_data.push(key +'=' +(typeof this.variables[key] === 'object' ? JSON.stringify(this.variables[key]) : this.variables[key]));", 
    "\t\t\t\t\t}}", 
    "\t\t\t\t\tif( save_data.length > 0 )", 
    "\t\t\t\t\t\tprefs.setStringPref(\"userEnvironmentStartupOverride\", save_data.join('\\n'));", 
    "\t\t\t\t\t//Logger.info( this.variables.projects, 'envVarsSave');", 
    "\t\t\t\t};", 
    "\t\t\t\tthis.setProject = function(key, value)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( key )", 
    "\t\t\t\t\t\tthis.variables.projects[key] = value;", 
    "\t\t\t\t};", 
    "\t\t\t\tthis.removeProject = function(key)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tdelete this.variables.projects[key];", 
    "\t\t\t\t\tko.statusBar.AddMessage('Project \"'+_Project.name+'\" removed - Project has not opened files', 'ProjectFilesOpener');", 
    "", 
    "\t\t\t\t\t//Logger.info( this.variables, 'removeProject' );", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tthis.envVarsLoad();", 
    "\t\t\t}", 
    "\t\t\treturn Preferences ;", 
    "\t\t})();", 
    "", 
    "\t\t/*", 
    "\t\t */", 
    "\t\t_self\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "", 
    "\t\tvar _Project\t= null;", 
    "\t\tvar _Preferences\t= new Preferences();", 
    "\t\tvar _Tabbox\t= new Tabbox();", 
    "", 
    "\t\t//var file = {", 
    "\t\t//\tgetPath: function()", 
    "\t\t//\t{", 
    "\t\t//\t\treturn ko.views.manager.currentView.koDoc.file.path;", 
    "\t\t//\t},", 
    "\t\t//\tgetName: function()", 
    "\t\t//\t{", 
    "\t\t//\t\treturn ko.views.manager.currentView.koDoc.file.path.split(/[\\\\\\/]+/g).pop();", 
    "\t\t//\t},", 
    "\t\t//\tgetView: function()", 
    "\t\t//\t{", 
    "\t\t//\t\treturn 'view'+ ko.views.manager.currentView.parentView.getAttribute('id').match(/\\d/gi);", 
    "\t\t//\t}", 
    "\t\t//};", 
    "", 
    "\t\t/** setProject;", 
    "\t\t */", 
    "\t\tvar setProject = function()", 
    "\t\t{", 
    "\t\t\t_Project = new Project();", 
    "\t\t\tif(isProjectInPreferences(_Project.name))", 
    "\t\t\t\t_Project.data = _Preferences.variables.projects[_Project.name];", 
    "\t\t\t//Logger.info( _Project.data.file.split('/').pop().replace(/.komodoproject/gi, '') , 'setProject' );", 
    "\t\t};", 
    "\t\tvar isProjectInPreferences = function(project_name)", 
    "\t\t{", 
    "\t\t\treturn typeof _Preferences.variables.projects[project_name] !== 'undefined' ;", 
    "\t\t};", 
    "\t\tvar setProjectViewsByOpenedFiles = function()", 
    "\t\t{", 
    "\t\t\tif(_Project.current)", 
    "\t\t\t\t_Project.data.views = _Tabbox.getOpenedTabsFiles();", 
    "\t\t};", 
    "\t\tvar checkProjectFilesExistence = function()", 
    "\t\t{", 
    "\t\t\tvar file_removed\t= false;", 
    "\t\t\tvar koFile\t= require(\"ko/file\");", 
    "\t\t\tvar paths_all\t= [].concat.apply( _Project.data.views.view1, _Project.data.views.view1\t);", 
    "", 
    "\t\t\tfor(var p=0; p<paths_all.length; p++){", 
    "\t\t\t\tif(koFile.exists(paths_all[p].replace(/[\\\\\\/]/gi, '\\\\'))===false){", 
    "\t\t\t\t\t_Project.removeFile( paths_all[p] );", 
    "\t\t\t\t\tfile_removed = true;", 
    "\t\t\t\t\tLogger.info( paths_all[p], 'File Removed');", 
    "", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t\tif(file_removed)", 
    "\t\t\t\tsaveProject();", 
    "\t\t};", 
    "\t\tvar checkProjectFilesPanes = function()", 
    "\t\t{", 
    "\t\t\tif(_Project.data.views.view1.length === 0 && _Project.data.views.view2.length > 0){", 
    "\t\t\t\t_Project.data.views = {view1:_Project.data.views.view2, view2:[]};", 
    "\t\t\t\t//saveProject();", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\tvar saveProject = function()", 
    "\t\t{", 
    "\t\t\tif(_Project.hasNoFiles())", 
    "\t\t\t\t_Preferences.removeProject(_Project.name);", 
    "\t\t\telse", 
    "\t\t\t\t_Preferences.setProject( _Project.name, _Project.data);", 
    "\t\t\t_Preferences.envVarsSave();", 
    "", 
    "\t\t\tLogger.info( _Project.data.views , 'Project saved: - '+_Project.name);", 
    "", 
    "\t\t};", 
    "\t\t/* EVENTS", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.onProjectOpen = function()", 
    "\t\t{", 
    "\t\t\tLogger.clear();", 
    "", 
    "\t\t\t//setProjectViewsByOpenedFiles(); // save current tabs if project is closing", 
    "\t\t\tsetProject();", 
    "", 
    "\t\t\teventsOff();", 
    "", 
    "\t\t\tcheckProjectFilesExistence();", 
    "\t\t\tcheckProjectFilesPanes();", 
    "", 
    "\t\t\t_Tabbox.openFiles( _Project.data.views );", 
    "", 
    "\t\t\tko.statusBar.AddMessage('Project \"'+_Project.name+'\" opened', 'ProjectFilesOpener');", 
    "\t\t\tLogger.info( _Project.data.views , 'Project Open: - '+_Project.name);", 
    "", 
    "\t\t};", 
    "\t\tthis.onFileOpen = function()", 
    "\t\t{", 
    "\t\t\tsetProjectViewsByOpenedFiles();", 
    "\t\t\tsaveProject();", 
    "\t\t\t//Logger.info( _Project.data.views, 'onFileOpen');", 
    "\t\t};", 
    "\t\tthis.onFileClose =  function()", 
    "\t\t{", 
    "", 
    "\t\t\tsetProjectViewsByOpenedFiles();", 
    "\t\t\tsaveProject();", 
    "\t\t\t//Logger.info( _Project.data.views, 'onFileClose');", 
    "", 
    "\t\t};", 
    "\t\tvar eventsOn = function(timeout=0)", 
    "\t\t{", 
    "\t\t\tsetTimeout( function(){", 
    "\t\t\t\tLogger.info( 'eventsOn');", 
    "\t\t\t\t//window.addEventListener(\"current_project_changed\",\t_self.onProjectChanged);", 
    "\t\t\t\twindow.addEventListener(\"project_opened\",\t_self.onProjectOpen);", 
    "\t\t\t\twindow.addEventListener(\"view_opened\",\t_self.onFileOpen);", 
    "\t\t\t\twindow.addEventListener(\"view_closed\",\t_self.onFileClose);", 
    "\t\t\t}, timeout);", 
    "\t\t};", 
    "\t\tvar eventsOff = function()", 
    "\t\t{", 
    "\t\t\tLogger.info( 'eventsOff');", 
    "\t\t\t//window.removeEventListener(\"current_project_changed\",\tko.extensions.ProjectFilesOpener.onProjectChanged);", 
    "\t\t\twindow.removeEventListener(\"project_opened\",\tko.extensions.ProjectFilesOpener.onProjectOpen);", 
    "\t\t\twindow.removeEventListener(\"view_opened\",\tko.extensions.ProjectFilesOpener.onFileOpen);", 
    "\t\t\twindow.removeEventListener(\"view_closed\",\tko.extensions.ProjectFilesOpener.onFileClose);", 
    "\t\t};", 
    "", 
    "\t\t/* wait few second for Komodo starts, skip default opened project", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar init = function()", 
    "\t\t{", 
    "\t\t\t_Preferences.disableDefaultActionsOnProjectOpen();", 
    "\t\t\tsetProject();", 
    "\t\t\t//setProjectViewsByOpenedFiles();", 
    "\t\t\teventsOff();", 
    "\t\t\teventsOn();", 
    "\t\t\tko.statusBar.AddMessage('Extension ProjectFilesOpener initialized', 'ProjectFilesOpener');", 
    "\t\t};", 
    "\t\tinit();", 
    "\t}", 
    "", 
    "\treturn ProjectFilesOpener;", 
    "", 
    "})();", 
    "", 
    "setTimeout( function(){", 
    "\twindow.removeEventListener(\"project_opened\",\tko.extensions.ProjectFilesOpener.onProjectOpen);", 
    "\twindow.removeEventListener(\"view_opened\",\tko.extensions.ProjectFilesOpener.onFileOpen);", 
    "\twindow.removeEventListener(\"view_closed\",\tko.extensions.ProjectFilesOpener.onFileClose);", 
    "", 
    "\tProjectFilesOpener.apply(ko.extensions.ProjectFilesOpener);", 
    "}, 2000);", 
    "", 
    "", 
    "", 
    "//console.log( ko.extensions.ProjectFilesOpener );"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}