{
  "keyboard_shortcut": "", 
  "name": "tabsLongNames", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "komodo.assertMacroVersion(3);", 
    "", 
    "", 
    "", 
    "String.prototype.matchAll = function(regexp) {", 
    "  var matches = [];", 
    "  this.replace(regexp, function() {", 
    "    var arr = ([]).slice.call(arguments, 0);", 
    "    var extras = arr.splice(-2);", 
    "    //arr.index = extras[0];", 
    "    /*\tremove empty lemelemts\t*/", 
    "    array=[];", 
    "    for (var key in arr) {", 
    "         if ( arr[key] != '' )", 
    "         array.push(arr[key])", 
    "    }", 
    "    matches.push(array.pop());", 
    "  });", 
    "  return matches.length ? matches : null;", 
    "};", 
    "", 
    "//alert( getFilenamePrefix( \"app.php\",\"c:\\wamp\\laravel\\veblur_local.com\\confXig\\app.php\") );", 
    "/**", 
    "**/", 
    "function getFilenamePrefix(  filepath) {", 
    "", 
    "    var keywords = [", 
    "        \"\\(config)\",", 
    "        \"\\(lang)\",", 
    "        \"\\(config)\",", 
    "        \"\\(routes)\",", 
    "", 
    "", 
    "        \"\\(views)\",", 
    "        \"\\(views\\(?!layout).*)\\\",", 
    "        \"\\views\\(layout\\.*)\\\",", 
    "    ];", 
    "", 
    "    //var regex_string   = new RegExp(keywords.join('|'), \"gi\");", 
    "    var regex_string   = new RegExp(keywords.reverse().join('|'), \"gi\");", 
    "", 
    "    var all_matches = filepath.matchAll(regex_string)", 
    "    if (all_matches) {", 
    "        //alert( 'all_matches=\\n'+JSON.stringify( all_matches, null, 2) )", 
    "        return all_matches.join('\\')+'\\';", 
    "    }", 
    "    return \"\"", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "try {", 
    "    var vm = ko.views.manager.topView;", 
    "    var box = document.getAnonymousNodes(vm)[0];", 
    "    // get the views-tabbed elements", 
    "    var tabset1 = box.firstChild;", 
    "    var tabset2 = box.lastChild;", 
    "    // replace the updateLeafName implementation to use something different", 
    "    // for the tab label", 
    "", 
    "", 
    "    tabset1.updateLeafName =", 
    "    tabset2.updateLeafName = function(view) {", 
    "        view.parentNode._tab.label = view.title;", 
    "        if (view.koDoc) {", 
    "            var language = view.koDoc.language;", 
    "            //alert('language: '+language);", 
    "", 
    "            if ( language == 'LaravelBlade' || language == 'PHP') {", 
    "", 
    "                //alert('test');", 
    "                var prefix = getFilenamePrefix( view.koDoc.file.path )", 
    "                ////label += parts[len-1];", 
    "                //alert( filename_prefixeds );", 
    "                //view.parentNode._tab.setAttribute('crop', 'start');", 
    "                ////view.parentNode._tab.label = label;", 
    "                var filename = view.koDoc.file.path.split(/(\\|\\/)/g).pop();", 
    "", 
    "                view.parentNode._tab.label = prefix+filename;", 
    "", 
    "                view.parentNode._tab.setAttribute('tooltiptext',view.koDoc.displayPath);", 
    "                ////view.parentNode._tab.setAttribute('tooltiptext', filename_prefixed );", 
    "                ////view.parentNode._tab.setAttribute('tooltiptext',filename );", 
    "                //this.tabbox.firstChild.scrollBoxObject.ensureElementIsVisible(this.tabbox.firstChild.selectedItem);", 
    "            }", 
    "        }", 
    "    };", 
    "    //var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/(\\|\\/)/g).pop().split(/\\./g).shift();", 
    "", 
    "    /*\t the \"on startup\" trigger happens after files\t*/", 
    "    /*\t are opened, so we need to call updateLeafName\t*/", 
    "    /*\t for each opened view.  Files opened after startup\t*/", 
    "    /*\t will be fine\t*/", 
    "    var views = ko.views.manager.topView.getViews(true);", 
    "    for (var i=0; i < views.length; i++) {", 
    "        if (views[i].koDoc) {", 
    "            views[i].updateLeafName(views[i]);", 
    "        }", 
    "    }", 
    "", 
    "", 
    "", 
    "} catch(e) {", 
    "    alert(e);", 
    "}"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/cross-script.png"
}