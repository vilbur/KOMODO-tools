{
  "keyboard_shortcut": "", 
  "name": "class", 
  "value": [
    "<%", 
    "/* generate following kind of snippet", 
    "\t\t<?php", 
    "\t\tnamespace \\App\\Namespace;", 
    "\t\tclass ClassName extends ExtClass implements InterfaceClass", 
    "\t\t{", 
    "\t\t}", 
    "*/", 
    "", 
    "var Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "/** SnippetData", 
    " */", 
    "var SnippetData = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction SnippetData(){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\t//var _self\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tvar path_current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\t\tvar snippet_keys\t= ['class_type', 'namespace', 'class_name', 'extends', 'implements', 'use'];", 
    "\t\tvar file_types\t= ['Model', 'Controller', 'Command', 'Provider', 'Interface', 'Test']; // this items can be added to ifFileIsEmpty(), for auto inserting of this snippet", 
    "\t\tvar file_type\t= '';", 
    "\t\tvar defaults = {", 
    "\t\t\t'extends': {", 
    "\t\t\t\tmodel:\t'Illuminate\\\\Database\\\\Eloquent\\\\Model',", 
    "\t\t\t\tcontroller:\t'App\\\\Http\\\\Controllers\\\\Controller',", 
    "\t\t\t\tprovider:\t'Illuminate\\\\Support\\\\ServiceProvider',", 
    "\t\t\t\ttest:\t'Illuminate\\\\Foundation\\\\Testing\\\\TestCase as BaseTestCase',", 
    "\t\t\t},", 
    "\t\t\t'implements': {", 
    "\t\t\t\ttest:\t'Cviebrock\\\\EloquentSluggable\\\\Sluggable',", 
    "\t\t\t},", 
    "\t\t\t'use': {", 
    "\t\t\t\t//model:\t'',", 
    "\t\t\t\tcontroller:\t'Illuminate\\\\Http\\\\Request',", 
    "\t\t\t}", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t*/", 
    "\t\tvar data = {", 
    "\t\t\t'class_type':\t'class',", 
    "\t\t\t'namespace':\t ko.extensions.getNamespace(path_current_file),", 
    "\t\t\t'class_name':\t ko.views.manager.currentView.koDoc.file.path.split(/[\\\\\\/]+/g).pop().split(/\\./g).shift(),", 
    "\t\t};", 
    "", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "\t\t/** getClassType", 
    "\t\t */", 
    "\t\tthis.getClassType = function() {", 
    "\t\t\treturn data.class_type ? data.class_type : 'class';", 
    "\t\t};", 
    "\t\t/** getNamespace", 
    "\t\t */", 
    "\t\tthis.getNamespace = function() {", 
    "\t\t\treturn data.namespace ? 'namespace '+data.namespace+';' : '';", 
    "\t\t};", 
    "\t\t/** getUsed", 
    "\t\t */", 
    "\t\tthis.getUsed = function() {", 
    "\t\t\tvar used_classes\t= '';", 
    "\t\t\tvar namespaces\t= getUsedNamespaces();", 
    "", 
    "\t\t\tfor(var n=0; n<namespaces.length;n++){", 
    "\t\t\t\tvar namespaces_split = splitNamespaces(namespaces[n]);", 
    "\t\t\t\tfor(var nn=0; nn<namespaces_split.length;nn++)", 
    "\t\t\t\t\tused_classes += namespaces_split[nn].match(/\\\\/gi) ? '\\nuse ' + namespaces_split[nn] + ';' : '';", 
    "\t\t\t}", 
    "\t\t\treturn used_classes ? '\\n'+used_classes : '';", 
    "\t\t};", 
    "\t\t/** get namespaces used in class", 
    "\t\t * @return array", 
    "\t\t */", 
    "\t\tvar getUsedNamespaces = function() {", 
    "\t\t\tvar namespaces\t= getDefaultsNamespaces();", 
    "\t\t\tnamespaces.push(data.extends);", 
    "\t\t\tnamespaces.push(data.implements);", 
    "\t\t\treturn namespaces.filter(function (value, index, self) {", 
    "\t\t\t\treturn self.indexOf(value) === index;", 
    "\t\t\t});", 
    "\t\t};", 
    "", 
    "\t\t/** Get items from defaults by file_type", 
    "\t\t * @return array", 
    "\t\t */", 
    "\t\tvar getDefaultsNamespaces = function() {", 
    "\t\t\tvar namespaces = [];", 
    "\t\t\tfor(var type in defaults){if (defaults.hasOwnProperty(type)){", 
    "\t\t\t\tnamespaces.push(defaults[type][file_type]);", 
    "\t\t\t}}", 
    "\t\t\treturn namespaces;", 
    "\t\t};", 
    "", 
    "\t\t/** getClassName", 
    "\t\t */", 
    "\t\tthis.getClassName = function() {", 
    "\t\t\tLogger.info(data, 'data');", 
    "\t\t\treturn capitalize(data.class_name) + ( !data.class_name.match( new RegExp(file_type, 'gi')) ? capitalize(file_type) : ''); // addclass suffix if not presented E.g: 'Foo' >>> 'FooController'", 
    "\t\t};", 
    "\t\t/** getExtends", 
    "\t\t */", 
    "\t\tthis.getExtends = function() {", 
    "\t\t\treturn data.extends ? ' extends ' + getClassNameFromNamespace(data.extends) : '';", 
    "\t\t};", 
    "\t\t/** getImplemenets", 
    "\t\t */", 
    "\t\tthis.getImplemenets = function() {", 
    "\t\t\treturn data.implements ? ' implements ' + splitNamespaces(data.implements).map(getClassNameFromNamespace).join(', ') : '';", 
    "\t\t};", 
    "", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t\t/** setSnippetData", 
    "\t\t */", 
    "\t\tvar setSnippetData = function() {", 
    "\t\t\tvar answer   = askSnippetData();", 
    "\t\t\tfor(var k=0; k<snippet_keys.length;k++)", 
    "\t\t\t\tdata[snippet_keys[k]] = snippet_keys[k]=='class_type' ? answer[k] : capitalize(answer[k]);", 
    "\t\t};", 
    "\t\t/** askSnippetData", 
    "\t\t */", 
    "\t\tvar askSnippetData = function() {", 
    "\t\t\treturn ko.interpolate.interpolateString([", 
    "\t\t\t\t\t\t'%(ask1:Type:'\t+ data.class_type+')',", 
    "\t\t\t\t\t\t'%(ask2:Namespace:'\t+ data.namespace+')',", 
    "\t\t\t\t\t\t'%(ask3:ClassName:'\t+ data.class_name+')',", 
    "\t\t\t\t\t\t'%(ask4:Extends:'\t+ getDefault('extends')+')',", 
    "\t\t\t\t\t\t'%(ask5:Implements:'\t+ getDefault('implements')+')',", 
    "\t\t\t\t\t\t'%(ask6:Use)',", 
    "\t\t\t\t\t]).split(',');", 
    "\t\t};", 
    "", 
    "\t\t/** is ClassName matching any item from file_types ?", 
    "\t\t *\tE.G:\t'ClassNameController'\t>>> 'Controller'", 
    "\t\t *\t\t'ClassNameProvider'\t>>> 'Provider'", 
    "\t\t *\t\t'ClassNameFoo'\t>>> ''", 
    "\t\t * @return string", 
    "\t\t*/", 
    "\t\tvar setFileType = function() {", 
    "\t\t\t//Logger.info(file_types, 'file_types');", 
    "\t\t\tfile_type = getMatch('(\\\\'+file_types.join('|\\\\')+')', data.namespace).toLowerCase();", 
    "\t\t};", 
    "\t\t/** getMatch", 
    "\t\t*/", 
    "\t\tvar getMatch = function(regex, string){", 
    "\t\t\tvar match_string\t= new RegExp(regex, 'gi').exec(string);", 
    "\t\t\treturn match_string\t? match_string[0] : '';", 
    "\t\t};", 
    "\t\t/** getDefault", 
    "\t\t*/", 
    "\t\tvar getDefault = function(type){", 
    "\t\t\treturn defaults[type][file_type] ? defaults[type][file_type] : '';", 
    "\t\t};", 
    "\t\t/** splitNamespaces", 
    "\t\t */", 
    "\t\tvar splitNamespaces = function(namespaces) {", 
    "\t\t\t//return namespaces ? namespaces.split(/\\s+/) : [];", 
    "\t\t\t//var result = namespaces ? namespaces.split(/\\s+(?!\\sas\\sBaseTestCase)/) : [];", 
    "\t\t\tvar result = namespaces ? namespaces.replace(/\\s+as\\s+/gi,'_as_').replace(/\\s+/gi,'~').replace(/_/gi,' ').split(/~/) : [];", 
    "\t\t\tLogger.info(result, 'result');", 
    "\t\t\treturn result;", 
    "\t\t};", 
    "\t\t/** getClassNameFromNamespace", 
    "\t\t */", 
    "\t\tvar getClassNameFromNamespace = function(_namespace) {", 
    "\t\t\treturn  _namespace.match(/\\s+as\\s+/gi) ?_namespace.split(/as\\s+/).pop() : _namespace.split(/\\\\+/).pop();", 
    "\t\t};", 
    "\t\t/** capitalize", 
    "\t\t */", 
    "\t\tvar capitalize = function(string) {", 
    "\t\t\treturn string.charAt(0).toUpperCase() + string.slice(1);", 
    "\t\t};", 
    "", 
    "\t\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "\t\tsetFileType();", 
    "\t\tsetSnippetData();", 
    "\t}", 
    "", 
    "\treturn SnippetData;", 
    "})();", 
    "", 
    "var _snippet = new SnippetData();", 
    "Logger.info(_snippet, '_snippet');", 
    "%>", 
    "<%= _snippet.getNamespace() %><%= _snippet.getUsed() %>", 
    "", 
    "<%= _snippet.getClassType() %> <%= _snippet.getClassName() %><%= _snippet.getExtends() %><%= _snippet.getImplemenets() %>", 
    "{", 
    "\t[[%tabstop:]]", 
    "}!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "treat_as_ejs": "true", 
  "type": "snippet", 
  "indent_relative": "true", 
  "auto_abbreviation": "false"
}