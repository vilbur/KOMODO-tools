{
  "keyboard_shortcut": "", 
  "name": "Build and Install Extension", 
  "language": "JavaScript", 
  "trigger": "trigger_startup", 
  "value": [
    "/*", 
    "\tPROJECT:", 
    "\t\tGet opened extension project", 
    "\t\t\tIf not opened, get last extension project", 
    "\t", 
    "\tFILES:", 
    "\t\tLoop opened files, save opened *.komodotools which belongs to project as *.js files", 
    "\t", 
    "\tEXTENSION:", 
    "\t\tBuild and install extension", 
    "\t", 
    "\tKOMODO:", 
    "\t\tRestart Komodo ", 
    "*/", 
    "/* Path to file which can click on dialog", 
    " */", 
    "var click_on_restart_dialolg_path\t= '\\\\tools\\\\Scripts\\\\PROGRAMS\\\\Komodo-Editor\\\\Extension\\\\click-on-restart-dialog.exe';", 
    "", 
    "/* Full path to click on dialog file", 
    " */", 
    "var click_on_restart_dialog = ko.interpolate.interpolateString('%(path:userDataDir)') + click_on_restart_dialolg_path;", 
    "", 
    "", 
    "/** BuildAndInstallExtension", 
    " */", 
    "ko.extensions.BuildAndInstallExtension = (function()", 
    "{", 
    "\tfunction BuildAndInstallExtension()", 
    "\t{", 
    "\t\tvar koFile\t= require(\"ko/file\");", 
    "\t\t/** Search file or dir in path backwards", 
    "\t\t */", 
    "\t\tvar fileSearchInPath = function( path, search )", 
    "\t\t{", 
    "\t\t\tvar koFile\t= require(\"ko/file\"); ", 
    "\t\t\tvar path_split\t= path.split('\\\\');", 
    "\t\t\tvar found_path\t= null;", 
    "\t\t\t", 
    "\t\t\tif( search.constructor.name !== 'RegExp' )", 
    "\t\t\t\tsearch = new RegExp(search, 'gi');", 
    "\t\t\t", 
    "\t\t\t/** fileExists", 
    "\t\t\t*/", 
    "\t\t\tfunction fileExists()", 
    "\t\t\t{", 
    "\t\t\t\tvar dir_path\t= path_split.join('\\\\') + '\\\\';", 
    "\t\t\t\tvar list\t= koFile.list(dir_path);", 
    "\t\t\t\t", 
    "\t\t\t\tfor(var i=0; i<list.length;i++)", 
    "\t\t\t\t\tif( list[i].match(  search ) && ! found_path )", 
    "\t\t\t\t\t\tfound_path = dir_path + list[i];", 
    "\t\t", 
    "\t\t\t\treturn  found_path !== null;", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\twhile ( ! fileExists() && path_split.length > 1 )", 
    "\t\t\t\tpath_split.pop();", 
    "\t\t", 
    "\t\t\treturn found_path ? found_path : null;", 
    "\t\t};", 
    "", 
    "\t\t/** Build And InstallExtension", 
    "\t\t */", 
    "\t\tvar project_path = (function()", 
    "\t\t{", 
    "\t\t\tvar prefs\t= Components.classes['@activestate.com/koPrefService;1'].getService(Components.interfaces.koIPrefService).prefs;", 
    "\t\t\tvar project\t= ko.projects.manager.currentProject;", 
    "", 
    "\t\t\t/**", 
    "\t\t\t */", 
    "\t\t\tvar getKomodoEnvVariable = function(key=null,_default=null)", 
    "\t\t\t{", 
    "\t\t\t\tvar values_string\t= prefs.getStringPref(\"userEnvironmentStartupOverride\");", 
    "\t\t\t\tvar values_split\t= values_string.split('\\n');", 
    "\t\t\t\t", 
    "\t\t\t\t/* string to object */", 
    "\t\t\t\tvar values = {};", 
    "\t\t\t\tfor(var i=0; i<values_split.length;i++) {", 
    "\t\t\t\t\tvar pair_split =  values_split[i].split('=');", 
    "\t\t\t\t\tvalues[pair_split[0]] = pair_split[1];", 
    "\t\t\t\t}", 
    "\t\t\t\t", 
    "\t\t\t\tvar variable = key===null ? values : values[key];", 
    "\t\t\t", 
    "\t\t\t\tif( isNaN(variable)===false )", 
    "\t\t\t\t\tvariable = Number(variable);", 
    "\t\t\t\t\t", 
    "\t\t\t\t/* RETURN DEFAULT */", 
    "\t\t\t\tif(!variable)", 
    "\t\t\t\t\treturn _default;", 
    "\t\t\t\t", 
    "\t\t\t\t/* IF variable is stringified boolean */", 
    "\t\t\t\tif(variable === \"true\" || variable === \"false\")", 
    "\t\t\t\t\treturn variable === \"true\" ? true : false;", 
    "\t\t\t\t\t", 
    "\t\t\t\treturn variable;", 
    "\t\t\t};", 
    "\t\t\t/**", 
    "\t\t\t */", 
    "\t\t\tvar setKomodoEnvVariable = function(key,value)", 
    "\t\t\t{", 
    "\t\t\t\tvar allValues\t= getKomodoEnvVariable();", 
    "\t\t\t\tvar values_array\t= [];", 
    "\t\t\t\t", 
    "\t\t\t\tif ( typeof value == 'undefined' )", 
    "\t\t\t\t\tdelete allValues[key];", 
    "\t\t\t\telse", 
    "\t\t\t\t\tallValues[key] = value;", 
    "\t\t\t", 
    "\t\t\t\tfor\t(var k in allValues)", 
    "\t\t\t\t\tif( typeof allValues[k] != \"undefined\")", 
    "\t\t\t\t\t\tvalues_array.push(k +'=' + allValues[k]);", 
    "\t\t\t", 
    "\t\t\t\tvar values_String\t= values_array.length > 0 ? values_array.join('\\n') : '';", 
    "\t\t\t\t", 
    "\t\t\t\tprefs.setStringPref(\"userEnvironmentStartupOverride\", values_String);\t\t", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tif( project )", 
    "\t\t\t\tsetKomodoEnvVariable( 'BuildAndInstallExtension', project.liveDirectory );", 
    "", 
    "\t\t\treturn project ? project.liveDirectory : getKomodoEnvVariable( 'BuildAndInstallExtension'); ", 
    "\t\t})();", 
    "\t\t/** Convert opened komodotools", 
    "\t\t */", 
    "\t\tvar convertOpenedKomodotoolsToScripts = function(extension_dir)", 
    "\t\t{\t\t\t", 
    "\t\t\t/** Search file or dir", 
    "\t\t\t * Default serach is not case sensitive", 
    "\t\t\t * @example\tfileSearch( 'c:\\\\Foo\\\\Dir', 'file.js' );", 
    "\t\t\t * \tfileSearch( 'c:\\\\Foo\\\\Dir', /.*\\.js/ );", 
    "\t\t\t *", 
    "\t\t\t * @param\tstring\tpath\tPath where to search", 
    "\t\t\t * @param\tstring|RegExp\tsearch\tSearch mask", 
    "\t\t\t * ", 
    "\t\t\t * @return\tarray|null\tFull paths of found files or dirs", 
    "\t\t\t */", 
    "\t\t\tvar fileSearch = function( path, search )", 
    "\t\t\t{", 
    "\t\t\t\tvar found\t= [];", 
    "\t\t\t\tvar mask\t= new RegExp( search, 'gi');", 
    "", 
    "\t\t\t\t/** Search in dir", 
    "\t\t\t\t */", 
    "\t\t\t\tvar searchInDir = function(dir_path)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar items = koFile.list(dir_path);", 
    "", 
    "\t\t\t\t\tfor(let i=0; i<items.length;i++)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar path_full = dir_path +'\\\\'+ items[i];", 
    "", 
    "\t\t\t\t\t\tif( items[i].match(mask) )", 
    "\t\t\t\t\t\t\treturn found.push(path_full);", 
    "", 
    "\t\t\t\t\t\tif( ! koFile.isFile(path_full) )", 
    "\t\t\t\t\t\t\tsearchInDir(path_full);", 
    "\t\t\t\t\t}", 
    "\t\t\t\t}; ", 
    "\t\t\t\tsearchInDir(path);", 
    "\t\t\t\t", 
    "\t\t\t\treturn found.length ? found.pop() : null; ", 
    "\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\t/** Get all opened macro files & js files", 
    "\t\t\t*/", 
    "\t\t\tvar opened_js_files = (function()", 
    "\t\t\t{", 
    "\t\t\t\t/** Add to files if *.s file", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addToFiles = function(ko_file)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tif( ! ko_file.URI.match(/\\.js$/gi)  )", 
    "\t\t\t\t\t\treturn;", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tvar type = /^(macro|file)/.exec( ko_file.URI );", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( type)", 
    "\t\t\t\t\t\tfiles[type.pop()].push(ko_file.path);", 
    "\t\t\t\t}; ", 
    "\t\t\t\t", 
    "\t\t\t\tvar files\t= {file:[], macro:[]};", 
    "\t\t\t\tvar file_views\t= ko.views.manager.topView.getDocumentViews(true);", 
    "\t\t\t\t", 
    "\t\t\t\tfor (let i = 0; i < file_views.length; i++)", 
    "\t\t\t\t\tif (file_views[i].koDoc )", 
    "\t\t\t\t\t\taddToFiles( file_views[i].koDoc.file );", 
    "\t\t\t\t", 
    "\t\t\t\treturn files;", 
    "\t\t\t})();", 
    "\t\t\t", 
    "\t\t\t/** Get all opened regiular *.js which are in extensions dir", 
    "\t\t\t */", 
    "\t\t\tvar extensions_script_files = opened_js_files.file.filter(function(path)", 
    "\t\t\t{", 
    "\t\t\t\treturn ( extension_dir === path.substring( 0, extension_dir.length ) ) ? path : null;", 
    "\t\t\t});", 
    "\t\t\t", 
    "\t\t\t/** Get all opened komodotool which are in extensions dir", 
    "\t\t\t */", 
    "\t\t\tvar extensions_komodotool_files = opened_js_files.macro.map(function(macro_name)", 
    "\t\t\t{", 
    "\t\t\t\tvar macro_path\t= fileSearch(extension_dir, macro_name.replace('/', '').replace(/js$/, 'komodotool')  );", 
    "", 
    "\t\t\t\treturn macro_path ? macro_path : null;", 
    "\t\t\t", 
    "\t\t\t}).filter(function(macro_path){return macro_path ? macro_path : null;});", 
    "", 
    "\t\t\t/** files_to_update", 
    "\t\t\t */", 
    "\t\t\tvar files_to_update = (function()", 
    "\t\t\t{", 
    "\t\t\t\t/* Get Pairs of komodotool and js file in same dir", 
    "\t\t\t\t * Key is js file, it avoids duplicates in pairs", 
    "\t\t\t\t * ", 
    "\t\t\t\t * @return {path_js:path_komodotool}", 
    "\t\t\t\t */", 
    "\t\t\t\tvar files_pairs\t= {};", 
    "\t\t\t\t", 
    "\t\t\t\t/** Add to pairs", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addToPair = function(path)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfiles_pairs[path.replace(/komodotool$/, 'js')] = path.replace(/js$/, 'komodotool');", 
    "\t\t\t\t}; ", 
    "\t\t\t\t/** Add js files", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addJavaScript = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(let i=0; i<extensions_script_files.length;i++)", 
    "\t\t\t\t\t\taddToPair( extensions_script_files[i] );", 
    "\t\t\t\t})(); ", 
    "\t\t\t\t/** Add komodotool files", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addKomodotools = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(let i=0; i<extensions_komodotool_files.length;i++)", 
    "\t\t\t\t\t\taddToPair( extensions_komodotool_files[i] );", 
    "\t\t\t\t})(); ", 
    "", 
    "\t\t\t\treturn files_pairs;", 
    "\t\t\t})(); ", 
    "\t\t\t", 
    "\t\t\t/** Sync js & komodotool files", 
    "\t\t\t *", 
    "\t\t\t * @return self", 
    "\t\t\t */", 
    "\t\t\tvar syncFiles = (function()", 
    "\t\t\t{", 
    "", 
    "\t\t\t\t/** Sync file", 
    "\t\t\t\t */", 
    "\t\t\t\tvar syncFile = function(path_js, path_komodotool)", 
    "\t\t\t\t{", 
    "\t\t\t\t\t//console.log( path_js );", 
    "\t\t\t\t\t//console.log( path_komodotool );", 
    "\t\t\t\t\t/** Get last modified time", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar lastModifiedTime = function(path)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar koFileEx\t= Components.classes['@activestate.com/koFileEx;1'].createInstance(Components.interfaces.koIFileEx);", 
    "\t\t\t\t\t\t//console.log( path );", 
    "\t\t\t\t\t\tkoFileEx.path = path;", 
    "\t\t\t\t\t\t//console.log( koFileEx.lastModifiedTime );", 
    "\t\t\t\t\t\treturn koFileEx.lastModifiedTime;", 
    "\t\t\t\t\t}; ", 
    "\t\t\t\t\t/** Write to file", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar writeToFile = function(path, content)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar koFileEx\t= Components.classes['@activestate.com/koFileEx;1'].createInstance(Components.interfaces.koIFileEx);", 
    "", 
    "\t\t\t\t\t\tkoFileEx.path\t= path;", 
    "\t\t\t\t\t\tkoFileEx.open('w');", 
    "\t\t\t\t\t\tkoFileEx.puts(content);", 
    "\t\t\t\t\t\tkoFileEx.close();", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t", 
    "\t\t\t\t\t/** Update js file by komodotool content", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar updateJsFile = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\twriteToFile( path_js, JSON.parse(koFile.read(path_komodotool)).value.join('\\n') );", 
    "\t\t\t\t\t}; ", 
    "\t\t\t\t\t/** Update komodotool file by js content", 
    "\t\t\t\t\t *", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar updateKomodotoolFile = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tconsole.log( 'updateKomodotoolFile' );", 
    "\t\t\t\t\t\tconsole.log( path_komodotool );", 
    "\t\t\t\t\t\tvar content_js\t= koFile.read(path_js);", 
    "\t\t\t\t\t\tvar content_komodotool\t= JSON.parse(koFile.read(path_komodotool));\t\t\t\t\t\t", 
    "", 
    "\t\t\t\t\t\tcontent_komodotool.value = content_js.split(/\\n/g);\t\t\t\t\t\t", 
    "", 
    "\t\t\t\t\t\twriteToFile( path_komodotool, JSON.stringify(content_komodotool) );", 
    "\t\t\t\t\t}; ", 
    "\t\t", 
    "\t\t\t\t\tif( lastModifiedTime(path_js) > lastModifiedTime(path_komodotool) )", 
    "\t\t\t\t\t\tupdateKomodotoolFile();", 
    "\t\t\t\t\t", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\tupdateJsFile();", 
    "\t\t\t\t}; ", 
    "", 
    "\t\t\t\tvar js_files = Object.keys(files_to_update);", 
    "\t\t\t\t", 
    "\t\t\t\tfor(var f=0; f<js_files.length;f++)", 
    "\t\t\t\t\tsyncFile( js_files[f], files_to_update[js_files[f]] );", 
    "\t\t\t})();", 
    "", 
    "\t\t}; ", 
    "\t\t/** clikckOnDialogPAthExists", 
    "\t\t */", 
    "\t\tvar clikck_on_dialog_path_exists = (function()", 
    "\t\t{", 
    "\t\t\treturn koFile.exists(click_on_restart_dialog);", 
    "\t\t})();", 
    "\t\t/** RunClickOnRestartDialog", 
    "\t\t */", 
    "\t\tvar RunClickOnRestartDialog = function()", 
    "\t\t{", 
    "\t\t\tko.run.output.endSession();", 
    "\t\t", 
    "\t\t\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t\t\t.RunAndNotify( 'start \"\" \"\"'+click_on_restart_dialog +'\"\"', \"\", \"\" , \"\" );", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar BuildExtension = function(chrome_manifest_dir)", 
    "\t\t{", 
    "\t\t\tvar python_exe =  ko.interpolate.interpolateString('%(path:installDir)') + \"\\\\lib\\\\python\\\\python.exe\";", 
    "\t\t\t", 
    "\t\t\tvar python_koext\t=  ko.interpolate.interpolateString('%(path:sdkDir)') + \"\\\\bin\\\\koext.py\";", 
    "\t\t\t", 
    "\t\t\tvar command\t= '\"' + python_exe + '\" \"'+python_koext + '\" build -i chrome.manifest -d \"' + chrome_manifest_dir + '\"';\t", 
    "\t\t", 
    "\t\t\tko.run.output.endSession();", 
    "\t\t", 
    "\t\t\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t\t\t.RunAndNotify(command, '', '' , '' );", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar InstallExtension = function(xpi_path)", 
    "\t\t{", 
    "\t\t\tvar command\t= 'ping 127.0.0.1 -n 2 > nul  &start \"\" komodo.exe \"' + xpi_path + '\"';", 
    "\t\t\tko.run.output.endSession();", 
    "\t\t\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t\t\t.RunAndNotify(command, \"\", \"\" , \"\" );", 
    "\t\t};", 
    "\t\t/** Exceptions", 
    "\t\t */", 
    "\t\tvar exceptions = (function()", 
    "\t\t{", 
    "\t\t\tif( project_path && clikck_on_dialog_path_exists )", 
    "\t\t\t\treturn false;", 
    "\t\t\t", 
    "\t\t\tif( ! project_path )", 
    "\t\t\t\talert( 'No active project of extension' );", 
    "\t\t\t\t", 
    "\t\t\tif( ! clikck_on_dialog_path_exists )", 
    "\t\t\t\talert( \"ERROR: Wrong path to 'click-on-restart-dialog.exe'\\n\\nPlease set right path in variable click_on_restart_dialolg_path\\n\\nin 'Build_and_Install.komodotool'\" ); ", 
    "\t\t\treturn true;", 
    "\t\t})();", 
    "\t\t", 
    "\t\tif( exceptions )", 
    "\t\t\treturn;", 
    "\t", 
    "\t\t//alert( project_path ); ", 
    "\t\tvar chrome_manifest_path\t= fileSearchInPath( project_path, 'chrome.manifest$' );", 
    "\t\tvar chrome_manifest_dir\t= chrome_manifest_path ? koFile.dirname(chrome_manifest_path) : null;", 
    "\t\t", 
    "", 
    "\t\t", 
    "\t\tconvertOpenedKomodotoolsToScripts(chrome_manifest_dir +'\\\\content');", 
    "\t\t//RunClickOnRestartDialog();", 
    "\t\t//BuildExtension(chrome_manifest_dir);", 
    "\t\t//InstallExtension( fileSearchInPath( chrome_manifest_dir, /.xpi/gi ) );", 
    "", 
    "\t\t", 
    "\t}", 
    "\treturn BuildAndInstallExtension;", 
    "})();", 
    "", 
    "ko.extensions.BuildAndInstallExtension();"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": 1, 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/build.png"
}