{
  "keyboard_shortcut": "", 
  "name": "CaseConverter", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "", 
    "//if( typeof ko.extensions.CaseConverter === 'undefined' )", 
    "\tko.extensions.CaseConverter = {};", 
    "\t", 
    "/** Convert any case of string to any case", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction CaseConverter()", 
    "\t{\t\t", 
    "\t\tvar case_types = [", 
    "\t\t\t'Lower',", 
    "\t\t\t'Capital',", 
    "\t\t\t'Title',", 
    "\t\t\t'Upper',", 
    "\t\t\t'Snake lower',", 
    "\t\t\t'Snake capital',", 
    "\t\t\t'Snake title',", 
    "\t\t\t'Snake upper',", 
    "\t\t\t'Kebab lower',", 
    "\t\t\t'Kebab capital',", 
    "\t\t\t'Kebab title',", 
    "\t\t\t'Kebab upper',", 
    "\t\t\t'Camel',", 
    "\t\t\t'Pascal',", 
    "\t\t];", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "\t\t", 
    "\t\tvar self\t= this;", 
    "\t\tvar koEditor\t= require(\"ko/editor\");", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\t", 
    "\t\tvar current_pos\t= scimoz.currentPos;", 
    "\t\tvar current_anchor\t= scimoz.anchor;", 
    "\t\t\t", 
    "\t\tvar sel_text\t= '';", 
    "\t\tvar new_text\t= '';\t\t", 
    "\t\tvar selection_starts\t= [];", 
    "\t\t", 
    "\t\t/** convertSelection", 
    "\t\t */", 
    "\t\tthis.convertSelection = function()", 
    "\t\t{", 
    "\t\t\tsetSelectedText();", 
    "\t\t\tsetSelectionStarts();\t\t\t", 
    "\t\t\tsetNewText();", 
    "\t\t\t", 
    "\t\t\tko.views.manager.currentView.scimoz.beginUndoAction();", 
    "\t\t\t", 
    "\t\t\ttry {", 
    "\t\t\t\t", 
    "\t\t\t\tif( selection_starts.length == 1 )", 
    "\t\t\t\t\treplaceSingleSelection();", 
    "\t\t\t\t\t", 
    "\t\t\t\telse", 
    "\t\t\t\t\treplaceMultiSelection();", 
    "\t\t\t\t\t", 
    "\t\t\t} finally {", 
    "\t\t\t\tko.views.manager.currentView.scimoz.endUndoAction();", 
    "\t\t\t} ", 
    "\t\t\t", 
    "", 
    "\t\t\t\t", 
    "\t\t}; ", 
    "\t\t/** Test", 
    "\t\t */", 
    "\t\tthis.convert = function(string)", 
    "\t\t{", 
    "\t\t\tvar type\t= this.StringCaseType.getStringType(string);", 
    "\t\t\tvar next_type\t= getNextType(type);", 
    "", 
    "\t\t\treturn new this.StringCaseConverter(string)['to' + next_type[0]](next_type[1] ? next_type[1] : '');", 
    "\t\t};", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tREPLACE SELECTION", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** replaceSingleSelection", 
    "\t\t */", 
    "\t\tvar replaceSingleSelection = function()", 
    "\t\t{", 
    "\t\t\tsaveSelection();", 
    "\t\t\t\t\t\t\t\t\t", 
    "\t\t\tkoEditor.replaceSelection(new_text);", 
    "\t\t\t", 
    "\t\t\trestoreSelection();", 
    "\t\t};", 
    "\t\t/** replaceMultiSelection", 
    "\t\t */", 
    "\t\tvar replaceMultiSelection = function()", 
    "\t\t{", 
    "\t\t\tvar last_sel_pos\t= 0;", 
    "\t\t\t//var new_text_tabstop\t= '[[%tabstop:'+new_text+']]';", 
    "", 
    "\t\t\tvar file_content\t= koEditor.getValue()", 
    "\t\t\t//.replace(/\\r/gm, '') // remove even empty line for file write;", 
    "\t\t\tvar new_content = '';", 
    "\t\t\t", 
    "\t\t\t/** setNewContent", 
    "\t\t\t */", 
    "\t\t\tvar setNewContent = function()", 
    "\t\t\t{", 
    "\t\t\t\t/** Parse file content and add new text`s tabstop to each selection", 
    "\t\t\t\t */", 
    "\t\t\t\tvar addTabstopToNewContent = function(sel_start)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tnew_content += file_content.substring( last_sel_pos, sel_start ) + '[[%tabstop1:'+new_text+']]';", 
    "\t\t\t\t\t\t\t\t\t", 
    "\t\t\t\t\tlast_sel_pos\t= sel_start + sel_text.length;\t\t\t\t", 
    "\t\t\t\t}; ", 
    "\t\t\t\t\t", 
    "\t\t\t\tfor(var s=0; s<selection_starts.length;s++)", 
    "\t\t\t\t\taddTabstopToNewContent(selection_starts[s]);", 
    "\t\t\t\t\t", 
    "\t\t\t\t/* Add content after last tabstop */", 
    "\t\t\t\tnew_content += file_content.substring( last_sel_pos, file_content.length );", 
    "\t\t\t};", 
    "\t\t\t/** removeContent", 
    "\t\t\t */", 
    "\t\t\tvar removeContent = function()", 
    "\t\t\t{", 
    "\t\t\t\tkoEditor.setValue('');\t", 
    "\t\t\t};", 
    "\t\t\t/** insertSnippet", 
    "\t\t\t */", 
    "\t\t\tvar insertSnippet = function()", 
    "\t\t\t{", 
    "\t\t\t\tvar content_snippet = {", 
    "\t\t\t\t\thasAttribute: function(name) {", 
    "\t\t\t\t\t\treturn name in this;", 
    "\t\t\t\t\t},", 
    "\t\t\t\t\tgetStringAttribute: function(name) {", 
    "\t\t\t\t\t\treturn this[name];", 
    "\t\t\t\t\t},", 
    "\t\t\t\t\tname:\t\"content snippet\",", 
    "\t\t\t\t\tindent_relative: \"true\",", 
    "\t\t\t\t\tvalue:\tnew_content", 
    "\t\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\t\tko.projects.snippetInsert(content_snippet); ", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tsetNewContent();", 
    "\t\t\tremoveContent();", 
    "\t\t\tinsertSnippet();", 
    "\t\t\t//Logger.info(new_content, 'CaseConverter: '+'new_content'); ", 
    "", 
    "\t\t};", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tANALYZE SELECTIONS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** setSelectedText", 
    "\t\t */", 
    "\t\tvar setSelectedText = function()", 
    "\t\t{", 
    "\t\t\tsel_text\t= koEditor.getSelection();", 
    "\t\t};", 
    "\t\t/** setNewText", 
    "\t\t */", 
    "\t\tvar setNewText = function()", 
    "\t\t{", 
    "\t\t\tnew_text = self.convert(sel_text);", 
    "\t\t}; ", 
    "\t\t/** setSelectionStarts", 
    "\t\t */", 
    "\t\tvar setSelectionStarts = function()", 
    "\t\t{", 
    "\t\t\tselection_starts\t= [];", 
    "\t\t\t", 
    "\t\t\twhile ( selection_starts.indexOf( koEditor.getCursorPosition('absolute')-sel_text.length) === -1 )", 
    "\t\t\t{", 
    "\t\t\t\tselection_starts.push(koEditor.getCursorPosition('absolute')-sel_text.length);", 
    "\t\t\t\tko.commands.doCommand('cmd_removePrevWordInCaretSet');", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tselection_starts.sort(); ", 
    "\t\t\t", 
    "\t\t\tLogger.info(selection_starts, 'CaseConverter: '+'selection_starts');", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar saveSelection = function()", 
    "\t\t{", 
    "\t\t\tcurrent_pos\t= scimoz.currentPos;", 
    "\t\t\tcurrent_anchor\t= scimoz.anchor;", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar restoreSelection = function()", 
    "\t\t{", 
    "\t\t\tscimoz.currentPos\t= current_anchor > current_pos ? current_pos : current_anchor;", 
    "\t\t\tscimoz.anchor\t= scimoz.currentPos + new_text.length;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tGET NEXT CASE TYPE ", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** getNextType", 
    "\t\t */", 
    "\t\tvar getNextType = function(type)", 
    "\t\t{", 
    "\t\t\tvar next_index\t= getNextIndex( type );", 
    "\t\t\t", 
    "\t\t\treturn case_types[next_index].split(/\\s/);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** getNextIndex", 
    "\t\t */", 
    "\t\tvar getNextIndex = function(type)", 
    "\t\t{", 
    "\t\t\tvar index\t= case_types.indexOf( type ) ;", 
    "\t\t\t", 
    "\t\t\treturn index < case_types.length-1 ? index +1 : 0;", 
    "\t\t};", 
    "\t\t", 
    "\t}", 
    "\treturn CaseConverter;", 
    "", 
    "})().apply(ko.extensions.CaseConverter);", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "/*---------------------------------------------------------------------------------------------------------------------", 
    "\tDEVELOP ", 
    "-----------------------------------------------------------------------------------------------------------------------", 
    "*/", 
    "if( typeof ko.extensions.CaseConverter === 'undefined' )", 
    "\tko.extensions.CaseConverter = {};", 
    "\t", 
    "//ko.extensions.CaseConverter.StringCaseConverter = {};", 
    "", 
    "/** Convert any case of string to any case", 
    " */", 
    "//var StringCaseConverter = (function()", 
    "ko.extensions.CaseConverter.StringCaseConverter = (function()\t\t\t\t\t\t   ", 
    "{", 
    "\tfunction StringCaseConverter(string)", 
    "\t{\t\t", 
    "\t\tvar self\t= this;", 
    "\t\tvar string_lower\t= '';", 
    "", 
    "\t\t/*---------------------------------------", 
    "\t\t\tBASE CASE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tthis.toLower = function()", 
    "\t\t{", 
    "\t\t\treturn string.replace(/[-_]/gi, ' ').replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\\s+/g, ' ').toLowerCase().trim();", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tthis.toUpper = function()", 
    "\t\t{", 
    "\t\t\treturn string.toUpperCase();", 
    "\t\t};", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tthis.toCapital = function()", 
    "\t\t{", 
    "\t\t\treturn capitalize(string_lower);", 
    "\t\t}; ", 
    "\t\t/** toTitle", 
    "\t\t */", 
    "\t\tthis.toTitle = function()", 
    "\t\t{", 
    "\t\t\treturn string_lower.split(/\\s/).map(function(word){", 
    "\t\t\t\treturn capitalize(word);", 
    "\t\t\t}).join(' '); ", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tSPLITTER CASE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Convert to snake case with secondary case", 
    "\t\t * @example snake_case|Snake_capital_case|Snake_Title_Case|SNAKE_UPPER_CASE", 
    "\t\t * ", 
    "\t\t * @param\tstring\tsecondary_case\t'capital|title|upper'", 
    "\t\t */", 
    "\t\tthis.toSnake = function(secondary_case='')", 
    "\t\t{", 
    "\t\t\treturn getSecondaryCase(secondary_case).replace(/\\s/gi, '_'); ", 
    "\t\t};", 
    "\t\t/** Convert to snake case with secondary case", 
    "\t\t * @example snake_case|Snake_capital_case|Snake_Title_Case|SNAKE_UPPER_CASE", 
    "\t\t * ", 
    "\t\t * @param\tstring\tsecondary_case\t'capital|title|upper'", 
    "\t\t */", 
    "\t\tthis.toKebab = function(secondary_case='')", 
    "\t\t{", 
    "\t\t\treturn getSecondaryCase(secondary_case).replace(/\\s/gi, '-'); ", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tCONCAT CASE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tthis.toCamel = function()", 
    "\t\t{", 
    "\t\t\treturn decapitalize( this.toTitle().replace(/\\s+/gi, '') );", 
    "\t\t}; ", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tthis.toPascal =  function()", 
    "\t\t{", 
    "\t\t\treturn string_lower.toLowerCase().replace(/(?:(^.)|(\\s+.))/g, function(match){", 
    "\t\t\t\treturn match.charAt(match.length-1).toUpperCase();", 
    "\t\t\t});", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPRIVATE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** capitalize", 
    "\t\t */", 
    "\t\tvar capitalize = function(string)", 
    "\t\t{", 
    "\t\t\treturn string.charAt(0).toUpperCase() + string.slice(1);", 
    "\t\t};", 
    "\t\t/** capitalize", 
    "\t\t */", 
    "\t\tvar decapitalize = function(string)", 
    "\t\t{", 
    "\t\t\treturn string.charAt(0).toLowerCase() + string.slice(1);", 
    "\t\t};", 
    "\t\t/** Convert to desired case before kebab or snake conversion", 
    "\t\t */", 
    "\t\tvar getSecondaryCase = function(secondary_case)", 
    "\t\t{", 
    "\t\t\tvar method\t= 'to' + capitalize(secondary_case.toLowerCase());", 
    "\t\t\treturn secondary_case ? self[method]() : string_lower;", 
    "\t\t}; ", 
    "\t\t", 
    "\t\tstring_lower = this.toLower();", 
    "", 
    "\t}", 
    "\treturn StringCaseConverter;", 
    "", 
    "})();", 
    "", 
    "if( typeof ko.extensions.CaseConverter === 'undefined' )", 
    "\tko.extensions.CaseConverter = {};", 
    "", 
    "ko.extensions.CaseConverter.StringCaseType = {};", 
    "", 
    "/** Get case type of string", 
    " *", 
    " * @param\tstring\tstring", 
    " * @return\tstring\tCase type of string", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction StringCaseType()", 
    "\t{\t\t", 
    "\t\tvar string\t= '';\t\t", 
    "\t\tvar words\t= [];", 
    "\t\t", 
    "\t\tvar snake_or_kebab\t= '';", 
    "\t\t", 
    "\t\tvar case_types = [", 
    "\t\t\t'lower',", 
    "\t\t\t'upper',", 
    "\t\t\t'capital',", 
    "\t\t\t'title',", 
    "\t\t\t'camel',", 
    "\t\t\t'pascal',", 
    "\t\t];", 
    "\t\t\t\t/** Test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert('StringCaseType');", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tBASE CASE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get type of string", 
    "\t\t * @return\tstring\tType of string E.g.: C", 
    "\t\t */", 
    "\t\tthis.getStringType = function(_string)", 
    "\t\t{", 
    "\t\t\tstring = _string;", 
    "\t\t\tsetSnakeOrKebab();", 
    "\t\t\tsanitizeString();", 
    "\t\t\t", 
    "\t\t\twords\t= string.split(/\\s/g);", 
    "", 
    "\t\t\t/** concat type name", 
    "\t\t\t * @return\tstring\tE.G.: 'Capital snake case'", 
    "\t\t\t */", 
    "\t\t\tvar concatTypeName = function(case_type)", 
    "\t\t\t{", 
    "\t\t\t\treturn capitalize( (snake_or_kebab? snake_or_kebab+' ' : '') + case_type );", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tfor(var c=0; c<case_types.length;c++)", 
    "\t\t\t\tif( this[method(case_types[c])]() )", 
    "\t\t\t\t\treturn concatTypeName(case_types[c]);", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tSTRING TEST", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Match string which has not lower case", 
    "\t\t */", 
    "\t\tthis.isLowerCase = function()", 
    "\t\t{", 
    "\t\t\treturn string.match(/[A-Z]/g)===null;", 
    "\t\t}; ", 
    "\t\t/** Match string which has not upper case", 
    "\t\t */", 
    "\t\tthis.isUpperCase = function()", 
    "\t\t{", 
    "\t\t\treturn string.match(/[a-z]/g)===null;", 
    "\t\t}; ", 
    "\t\t/** If only first word is capital", 
    "\t\t */", 
    "\t\tthis.isCapitalCase = function()", 
    "\t\t{", 
    "\t\t\tvar is_capital\t= false;", 
    "\t\t\t", 
    "\t\t\tfor(var w=0; w<words.length;w++)", 
    "\t\t\t\tif( isCapitalWord(words[w]) && w===0 )", 
    "\t\t\t\t\tis_capital = true;", 
    "\t\t\t\t\t", 
    "\t\t\t\telse if( ! isLowerCaseWord(words[w]) )", 
    "\t\t\t\t\tis_capital = false;", 
    "\t\t\t\t", 
    "\t\t\treturn is_capital;", 
    "\t\t}; ", 
    "\t\t/** If all words are capital", 
    "\t\t */", 
    "\t\tthis.isTitleCase = function()", 
    "\t\t{", 
    "\t\t\tvar is_title\t= true;", 
    "\t\t\t", 
    "\t\t\tfor(var w=0; w<words.length;w++)", 
    "\t\t\t\tif( ! isCapitalWord(words[w]) )", 
    "\t\t\t\t\tis_title = false;", 
    "", 
    "\t\t\treturn is_title;", 
    "\t\t};", 
    "\t\t/** isCamelCase", 
    "\t\t */", 
    "\t\tthis.isCamelCase = function()", 
    "\t\t{", 
    "\t\t\treturn string.match(/^[^A-Z][^A-Z]*(([A-Z][^A-Z]*)+)$/g)!==null;", 
    "\t\t}; ", 
    "\t\t/** isPascalCase", 
    "\t\t */", 
    "\t\tthis.isPascalCase = function()", 
    "\t\t{", 
    "\t\t\treturn  string.match(/^[A-z]+$/gi)!==null && string.match(/^[A-Z][^A-Z]+(([A-Z][^A-Z]*)+)$/g)!==null;", 
    "\t\t}; ", 
    "\t\t", 
    "\t\t/*---------------------------------------", 
    "\t\t\tPRIVATE", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** setSnakeOrKebab", 
    "\t\t */", 
    "\t\tvar setSnakeOrKebab = function()", 
    "\t\t{", 
    "\t\t\tsnake_or_kebab = string.match(/_/gi) ? 'snake' : (string.match(/-/gi) ? 'kebab' : ''); ", 
    "\t\t};", 
    "\t\t/** Replace '_' and '-' with whitespace ' '", 
    "\t\t */", 
    "\t\tvar sanitizeString = function()", 
    "\t\t{", 
    "\t\t\tstring\t= string.replace(/[-_]+/gi, ' ').replace(/\\s+/gi, ' ').trim(); ", 
    "\t\t}; ", 
    "\t\t/*---------------------------------------", 
    "\t\t\tWORD TETS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar isCapitalWord = function(word)", 
    "\t\t{", 
    "\t\t\treturn word.match(/^[A-Z][^A-Z]*$/g);", 
    "\t\t}; ", 
    "\t\t/** ", 
    "\t\t */", 
    "\t\tvar isLowerCaseWord = function(word)", 
    "\t\t{", 
    "\t\t\treturn word.match(/[A-Z]/g)===null;", 
    "\t\t};", 
    "\t\t/*---------------------------------------", 
    "\t\t\tHELPERS", 
    "\t\t-----------------------------------------", 
    "\t\t*/", 
    "\t\t/** Get method in this object by case type", 
    "\t\t * @example 'isCamelCase'", 
    "\t\t */", 
    "\t\tvar method = function(case_type)", 
    "\t\t{", 
    "\t\t\treturn 'is'+capitalize(case_type)+'Case';", 
    "\t\t}; ", 
    "\t\t/** capitalize", 
    "\t\t */", 
    "\t\tvar capitalize = function(string)", 
    "\t\t{", 
    "\t\t\treturn string.charAt(0).toUpperCase() + string.slice(1);", 
    "\t\t};", 
    "", 
    "\t}", 
    "\treturn StringCaseType;", 
    "", 
    "})().apply(ko.extensions.CaseConverter.StringCaseType);"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.12", 
  "async": false, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/text_uppercase.png"
}