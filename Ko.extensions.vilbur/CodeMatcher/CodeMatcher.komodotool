{
  "keyboard_shortcut": "", 
  "name": "CodeMatcher", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/**", 
    " *", 
    " *", 
    " *", 
    " */", 
    "ko.extensions.vilbur.CodeMatcher = (function()", 
    "{", 
    "", 
    "\t/* THESE regExes will be searched in code, first occurrence will be taken", 
    "\t\tGROUP IS TAKEN IF PRESENTED,", 
    "\t\tit is because negative lookbehind doesn't work in JavaScript E.G: SELECT 'return' AND DO NOT SELECT '@return'", 
    "\t*/", 
    "\tvar regex_definition={", 
    "\t\tglobal:{", 
    "\t\t\t'comment':{", 
    "\t\t\t\t'dockblock':\t/\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/)/gi,\t// match multiline docBlock with 2 stars on start E.G: '/**'", 
    "\t\t\t\t'block':\t/\\/\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/)/gi,\t// match any multiline", 
    "\t\t\t},", 
    "\t\t\t'parameters':\t/\\(([^\\)]*)\\)/gi,\t// match any multiline", 
    "", 
    "\t\t},", 
    "\t\tJavaScript:{", 
    "\t\t\t//'function':\t/(?:function\\s+(\\w+)|\\S+\\.prototype\\.(\\w+)|this\\.(\\w+)\\s*=\\s*\\(*function).*[\\r\\n\\s]*?{/gi,", 
    "", 
    "\t\t\t'function':{", 
    "\t\t\t\t'simple':\t/function\\s+(\\w+)\\s*\\(([^\\)]*)\\)[\\r\\n\\s]*?{/gi,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t\t'private':\t/var\\s+(\\w+)\\s*=\\s*\\(*\\s*function\\s*\\(([^\\)]*)\\).*[\\r\\n\\s]*?{/gi,\t// match fn in variable\tE.G: 'this.fnName = (function (parameters){' OR 'var fnName = function (parameters){' etc...", 
    "\t\t\t\t'public':\t/this\\.(\\w+)\\s*=\\s*\\(*\\s*function\\s*\\(([^\\)]*)\\).*[\\r\\n\\s]*?{/gi,\t// match fn in variable\tE.G: 'this.fnName = (function (parameters){' OR 'var fnName = function (parameters){' etc...", 
    "\t\t\t\t'prototype':\t/\\w+\\.prototype\\.(\\w+)\\s*=\\s*function\\s*\\(([^\\)]*)\\).*[\\r\\n\\s]*?{/gi,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t},", 
    "", 
    "\t\t\t//'test':{", 
    "\t\t\t//\t'test1':\t/test1/i,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t//\t'test2':\t/test2/i,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t//},", 
    "\t\t\t'return':\t/[\\s](return\\s+.*)/gi,", 
    "\t\t\t//'return':\t/[\\s](return\\s+.*?(?=[\\r\\n\\t;]))/gi, // clean match, remove unwanted characters on end", 
    "\t\t\t'variable':\t/[\\s](var\\s*\\w+\\s*=\\s*.*)/gi,", 
    "\t\t},", 
    "\t\tPHP:{", 
    "\t\t\t\t///(function\\s+\\S+.*[\\r\\n]?{)/gi,\t// function fooClassic(", 
    "\t\t},", 
    "\t\tAutohotkey:{", 
    "\t\t}", 
    "\t};", 
    "\t/** CONSTRUCT", 
    "\t */", 
    "\tfunction CodeMatcher()", 
    "\t{", 
    "", 
    "\t\t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\tvar _this\t= this; // make private functions access to public PROPERTIES and METHODS()", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tvar file_content\t= require(\"ko/editor\").getValue();", 
    "\t\tvar regeex_search\t= {};", 
    "\t\tvar search_for\t= [];", 
    "", 
    "\t\t/*------   PROPERTIES PUBLIC   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\tthis.matches_all\t= {}; // all matches in file, match_object = {'start':1, 'end':99, 'rx_key':'function.private', 'match':function fnName(){...}};", 
    "", 
    "\t\tif( lang=='Node.js' )", 
    "\t\t\tlang='JavaScript';", 
    "", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** language", 
    "\t\t */", 
    "\t\tthis.language = function( language )", 
    "\t\t{", 
    "\t\t\tlang = language;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** search for regExes", 
    "\t\t *", 
    "\t\t * @param string|array dot notated key\\s of regex_definition[language]", 
    "\t\t * \t\tE.G.: 'function' OR ['function.public','function.private']", 
    "\t\t *", 
    "\t\t *\t@return this", 
    "\t\t */", 
    "\t\tthis.searchFor = function(keys)", 
    "\t\t{", 
    "\t\t\tsearch_for = typeof keys !== 'object' ? [keys] : keys;", 
    "\t\t\t//search_for = ['function.public','function.private']; // DEBUG", 
    "\t\t\t//search_for = ['function'];// DEBUG", 
    "\t\t\t//search_for = ['function.prototype'];// DEBUG", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** get found Matches", 
    "\t\t *", 
    "\t\t * @return\tobject\tmatches_all", 
    "\t\t */", 
    "\t\tthis.getMatches = function()", 
    "\t\t{", 
    "\t\t\tsetRegExSearch();", 
    "\t\t\tsetMatchesAll();", 
    "\t\t\t//Logger.info( this.matches_all, 'this.matches_all');", 
    "\t\t\treturn this.matches_all;", 
    "\t\t};", 
    "", 
    "\t\t/*------   PRIVATE METHODS    -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** _getContentAfterCursor", 
    "\t\t * @param string direction 'next|prev' get file file_content BEFORE or AFTER cursor, OR get all file contents if EMPTY", 
    "\t\t */", 
    "\t\tvar getFileContent = function()", 
    "\t\t{", 
    "\t\t\treturn require(\"ko/editor\").getValue();", 
    "\t\t};", 
    "\t\t/** get used Regex objects by options.type", 
    "\t\t *", 
    "\t\t * get key by current Language", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar setRegExSearch = function()", 
    "\t\t{", 
    "\t\t\tvar regex_by_lang = {};", 
    "", 
    "\t\t\t/** Get RegExes by lang and add globals", 
    "\t\t\t */", 
    "\t\t\tvar setRegexByLang = function()", 
    "\t\t\t{", 
    "\t\t\t\tregex_by_lang = regex_definition[lang];", 
    "", 
    "\t\t\t\t/** mergeGlobals", 
    "\t\t\t\t */", 
    "\t\t\t\tvar mergeGlobals = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(var key_global in regex_definition.global)", 
    "\t\t\t\t\t\tif (regex_definition.global.hasOwnProperty(key_global))", 
    "\t\t\t\t\t\t\tregex_by_lang[key_global] = regex_definition.global[key_global];", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\tmergeGlobals();", 
    "", 
    "\t\t\t\tLogger.info(regex_by_lang, 'regex_by_lang');", 
    "", 
    "\t\t\t};", 
    "", 
    "\t\t\t/** get object item via dot notation", 
    "\t\t\t */", 
    "\t\t\tfunction _getRegexItemByDotNotation(dotNot)", 
    "\t\t\t{", 
    "\t\t\t\tobj\t= regex_by_lang;", 
    "\t\t\t\tdotNot\t= dotNot.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties", 
    "\t\t\t\tdotNot = dotNot.replace(/^\\./, '');           // strip a leading dot", 
    "\t\t\t\tvar arr_keys = dotNot.split('.');", 
    "\t\t\t\tfor (var k = 0, n = arr_keys.length; k < n; ++k) {", 
    "\t\t\t\t\tvar key = arr_keys[k];", 
    "\t\t\t\t\tif (key in obj)", 
    "\t\t\t\t\t\tobj = obj[key];", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\treturn;", 
    "\t\t\t\t}", 
    "\t\t\t\treturn obj;", 
    "\t\t\t}", 
    "\t\t\t/**", 
    "\t\t\t */", 
    "\t\t\tvar flattenObject = function(obj)", 
    "\t\t\t{", 
    "\t\t\t\tvar toReturn = {};", 
    "", 
    "\t\t\t\tfor (var i in obj) {", 
    "\t\t\t\t\tif (obj.hasOwnProperty(i))", 
    "\t\t\t\t\t\tif ( typeof obj[i]!=='undefined' && obj[i].constructor.name !== 'RegExp') {", 
    "\t\t\t\t\t\t\tvar flatObject = flattenObject(obj[i]);", 
    "\t\t\t\t\t\t\tfor(var x in flatObject)", 
    "\t\t\t\t\t\t\t\tif (flatObject.hasOwnProperty(x))", 
    "\t\t\t\t\t\t\t\ttoReturn[i + '.' + x] = flatObject[x];", 
    "\t\t\t\t\t\t} else", 
    "\t\t\t\t\t\t\ttoReturn[i] = obj[i];", 
    "\t\t\t\t}", 
    "\t\t\t\treturn toReturn;", 
    "\t\t\t};", 
    "", 
    "\t\t\tsetRegexByLang();", 
    "", 
    "\t\t\tif( search_for.length === 0 )", 
    "\t\t\t\tregeex_search = regex_by_lang;", 
    "\t\t\telse", 
    "\t\t\t\tfor(var s=0; s<search_for.length;s++)", 
    "\t\t\t\t\tregeex_search[search_for[s]] = _getRegexItemByDotNotation(search_for[s]);", 
    "", 
    "\t\t\tregeex_search = flattenObject(regeex_search);", 
    "\t\t\t//Logger.info(regex_by_lang, 'regex_by_lang');", 
    "\t\t\t//Logger.info(regeex_search, 'regeex_search');", 
    "\t\t};", 
    "", 
    "\t\t/** find all matches by given parameters.", 
    "\t\t *", 
    "\t\t * find matches or loop sub object of regex_definition and find multiple types at once", 
    "\t\t *", 
    "\t\t * @param object|RegEx regex is RegEx object or subobject from array regex_definition", 
    "\t\t *", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tvar setMatchesAll = function()", 
    "\t\t{", 
    "", 
    "\t\t\t/** find all matches, loop them and set to match_all object.", 
    "\t\t\t *", 
    "\t\t\t *\t!!! GET REGEX !!! core element, this found each regex", 
    "\t\t\t *", 
    "\t\t\t * @param\tobject\tregex\tis RegExp expression or subobject from array regex_definition", 
    "\t\t\t * @param\tstring\trx_key\tis dot notation key of regex from var regexe E.G: 'function.private'", 
    "\t\t\t */", 
    "\t\t\tfunction _findMatches(regex, search_key='')", 
    "\t\t\t{", 
    "\t\t\t\t/** RegEx match all", 
    "\t\t\t\t\t@return array of all matches", 
    "\t\t\t\t */", 
    "\t\t\t\tvar matchAll = function( string, regEx )", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar matches_all\t= [];", 
    "\t\t\t\t\tvar last_match_end\t= 0;", 
    "", 
    "\t\t\t\t\tvar cloneRegEx = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\t//return RegExp(regEx.source,regEx.flags);", 
    "\t\t\t\t\t\treturn new RegExp(regEx.source, regEx.flags);", 
    "", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t/** Set data of match like it was matched from full content, not from substring in while loop", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar setLastIndex = function(match)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar _match\t= Object.assign({}, match);", 
    "\t\t\t\t\t\t_match.index\t= last_match_end + match.index;", 
    "\t\t\t\t\t\tlast_match_end\t+= match.index + match[0].length;", 
    "\t\t\t\t\t\treturn _match;", 
    "\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\tif( typeof regEx !== 'undefined' )", 
    "\t\t\t\t\t\twhile((match = cloneRegEx().exec(string)) !== null) {", 
    "\t\t\t\t\t\t\tmatches_all.push( setLastIndex(match) );", 
    "\t\t\t\t\t\t\tstring = string.substring(match.index + match[0].length ); //this is not the same as /g", 
    "\t\t\t\t\t\t\t//Logger.info(string, 'substring');", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t//Logger.info(matches_all, 'matches_all');", 
    "\t\t\t\t\treturn matches_all;", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\treturn matchAll( file_content, regex );", 
    "\t\t\t}", 
    "", 
    "\t\t\tfor(var key in regeex_search)", 
    "\t\t\t\tif (regeex_search.hasOwnProperty(key))", 
    "\t\t\t\t\t _this.matches_all[key] = _findMatches( regeex_search[key]) ;", 
    "", 
    "\t\t\t//Logger.info( _this.matches_all, ' _this.matches_all');", 
    "\t\t};", 
    "", 
    "", 
    "\t}", 
    "", 
    "   return CodeMatcher;", 
    "})();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}