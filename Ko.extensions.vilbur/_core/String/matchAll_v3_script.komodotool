{
  "keyboard_shortcut": "", 
  "name": "matchAll_v3", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/* BAKUP OK", 
    "*\tget regex match of all group matches", 
    "*", 
    "*\t@return object of matches", 
    "", 
    "\tvar match_test\t= 'first-match/11111/group-match-A.lastMatchA /22222/group-match-B.lastMatchB'", 
    "\t\t\t\t.matchAll_v3(/(first-match)*\\/(\\d+)\\/(\\S+)\\.(\\w+)/gi);", 
    "", 
    "\trequire('ko/console').info('match_test='+JSON.stringify( match_test, null, 4));", 
    "", 
    "\tmatch_test = {", 
    "\t\t\"0\": {                                                    // INDEX 0 - full regex match", 
    "\t\t\t\"1\": \"first-match/11111/group-match-A.lastMatchA\",", 
    "\t\t\t\"2\": \"/22222/group-match-B.lastMatchB\"", 
    "\t\t},", 
    "\t\t\"1\": {                                                    // INDEX 1~ first matching group", 
    "\t\t\t\"1\": \"first-match\",", 
    "\t\t\t\"2\": null", 
    "\t\t},", 
    "\t\t\"2\": {", 
    "\t\t\t\"1\": \"11111\",", 
    "\t\t\t\"2\": \"22222\"", 
    "\t\t},", 
    "\t\t\"3\": {", 
    "\t\t\t\"1\": \"group-match-A\",", 
    "\t\t\t\"2\": \"group-match-B\"", 
    "\t\t},", 
    "\t\t\"4\": {", 
    "\t\t\t\"1\": \"lastMatchA\",", 
    "\t\t\t\"2\": \"lastMatchB\"", 
    "\t\t}", 
    "\t}", 
    "*/", 
    "", 
    "String.prototype.matchAll_v3 = function(RegEx, remove_full_match=false)", 
    "{", 
    "", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3('matchAll_v3.js').clear(false ).off(true  ) : require('ko/console');", 
    "\tvar _string\t= this;", 
    "", 
    "", 
    "\tfunction getRegExGroups(){", 
    "\t\tvar groups\t= [];", 
    "\t\tvar reg_ex_source\t= RegEx.source;", 
    "\t\tvar open_group_matches\t= getOpenGroupMatches();", 
    "\t\tvar open_group_concacted = concatMatches();", 
    "", 
    "\t\tfor(var m=0; m<open_group_concacted.length;m++) {", 
    "\t\t\tvar group_str\t= open_group_concacted[m];", 
    "\t\t\tvar group\t= '';", 
    "\t\t\tLogger.info(group_str, '\\ngroup_str');", 
    "\t\t\t/* split string by opening bracket except escaped like '\\(' ,filter null values */", 
    "\t\t\tvar bracket_open_match\t= group_str.replace(/\\(/gi, \"~~~(\").replace(/\\\\~~~\\(/gi, '\\\\(').split('~~~')", 
    "\t\t\t\t\t\t\t.filter(function(val) { if(val) return val; });", 
    "", 
    "\t\t\tvar bracket_close_match\t= group_str.replace(/\\)([\\*\\+]*)/gi, \")$1~~~\").replace(/\\\\\\)~~~/gi, '\\\\)').split('~~~')", 
    "\t\t\t\t\t\t\t.filter(function(val) { return val; });", 
    "", 
    "\t\t\tif(bracket_open_match && bracket_close_match){", 
    "\t\t\t\tvar bracket_open_count\t= bracket_open_match.length;", 
    "\t\t\t\tvar bracket_close_count\t= bracket_close_match.length;", 
    "", 
    "\t\t\t\tif(bracket_close_count - bracket_open_count===0)", 
    "\t\t\t\t\tgroup = bracket_close_match.join('');", 
    "\t\t\t\telse if (bracket_open_count==1)", 
    "\t\t\t\t\tgroup = bracket_close_match[0];", 
    "\t\t\t\telse", 
    "\t\t\t\t\tgroup = bracket_close_match.slice(0 ,bracket_close_count - bracket_open_count  ).join('');", 
    "", 
    "\t\t\t\tLogger.info(group, 'group');", 
    "\t\t\t\tif(group)", 
    "\t\t\t\t\tgroups.push(group);", 
    "\t\t\t}", 
    "\t\t}", 
    "", 
    "\t\t/** getOpenGroupMatches", 
    "\t\t*/", 
    "\t\tfunction getOpenGroupMatches(){", 
    "\t\t\t////reg_ex_source.matchAll(/(?:^|[^\\\\])\\((?!\\?)/gi);// only group opening brackets", 
    "\t\t\t/* negatibe looks workarounds */", 
    "\t\t\tvar open_group_str =  reg_ex_source.replace(/\\(/gi, \"~~~(\")", 
    "\t\t\t\t\t\t.replace(/\\\\~~~\\(/gi, '\\\\(')", 
    "\t\t\t\t\t\t.replace( /~~~\\(\\?/gi, '(?')\t// Do not break on non-grouping group '(?:..)'", 
    "", 
    "\t\t\t\t\t\tLogger.info(open_group_str, 'open_group_str');", 
    "\t\t\tvar open_group_matches =  open_group_str.split('~~~')", 
    "\t\t\t\t\t\t.filter(function(val) {", 
    "\t\t\t\t\t\t\t//if(val) return val;", 
    "\t\t\t\t\t\t\tif(val.match(/\\((?!\\?)/gi)) return val; // Do not break on non-grouping group '(?:..)'", 
    "\t\t\t\t\t\t});", 
    "", 
    "", 
    "\t\t\tLogger.info(open_group_matches, 'open_group_matches');", 
    "\t\t\treturn open_group_matches;", 
    "\t\t}", 
    "\t\t/** concatMatches", 
    "\t\t*/", 
    "\t\tfunction concatMatches(){", 
    "", 
    "\t\t\tvar open_group_matches_reverse = open_group_matches.reverse();", 
    "\t\t\tvar concacted\t= [];", 
    "\t\t\tvar concacted_str\t= '';", 
    "\t\t\tfor(var m=0; m<open_group_matches_reverse.length;m++) {", 
    "", 
    "\t\t\t\tvar substring\t= open_group_matches_reverse[m];", 
    "\t\t\t\tconcacted_str\t= open_group_matches_reverse[m]+concacted_str;", 
    "\t\t\t\tconcacted.push(concacted_str);", 
    "\t\t\t}", 
    "\t\t\treturn concacted.reverse();", 
    "\t\t}", 
    "", 
    "\t\treturn groups;", 
    "\t}", 
    "", 
    "\t/** getGroupsMatches", 
    "\t*/", 
    "\tfunction getGroupsMatches(){", 
    "\t\tvar match_full\t= _string.match(RegEx.source);", 
    "\t\tvar groups_matches\t= {};", 
    "", 
    "\t\tif(groups.length>1){", 
    "\t\t\tfor(var g=0; g<groups.length;g++) {", 
    "\t\t\t\tvar group = groups[g];", 
    "\t\t\t\tLogger.info(groups[g], 'groups[g]');", 
    "", 
    "\t\t\t\tvar group_matches_result\t= _string.match( new RegExp(groups[g], \"gi\") );", 
    "\t\t\t\tgroups_matches[g]\t= group_matches_result;", 
    "\t\t\t}", 
    "", 
    "\t\t} else {", 
    "\t\t\tgroups_matches = _string.match( RegEx );", 
    "\t\t}", 
    "", 
    "\t\treturn groups_matches;", 
    "", 
    "\t}", 
    "\tvar groups = getRegExGroups();", 
    "\treturn getGroupsMatches();", 
    "};", 
    "", 
    "", 
    "function matchAll_v3Test(){", 
    "", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3('matchAll_v3.js - global').clear(true  ).off(false).header(false) : require('ko/console');", 
    "\tvar test_sring_A\t= 'folder\\\\subfolder\\\\file\\\\123\\\\456\\\\789';", 
    "", 
    "\tvar regexes_test = {", 
    "", 
    "\t\t'match_all':\t/.*/gi,\t// ['folder\\subfolder\\file\\123\\456\\789']", 
    "\t\t'match_all_groups':\t/([\\w\\d]+)/gi,\t// ['folder','subfolder','file','123','456','789']", 
    "", 
    "\t\t'group_multi':\t/(([^\\W\\d\\(\\)]+)\\\\+)+(?:(\\d+)\\\\)/gi,\t//\t[ ['folder','subfolder','file'],\t[ '123'] ]", 
    "\t\t'group_multi':\t/(([^\\W\\d\\(\\)]+)\\\\+)+(?:(\\d+)\\\\+)+/gi,\t//\t[ ['folder','subfolder','file'],\t[ '123','456'] ]", 
    "\t\t'group_multi_full':\t/(([^\\W\\d\\(\\)]+)\\\\+)+(?:(\\d+)\\\\*)+/gi,\t//\t[ ['folder','subfolder','file'], ['123','456','789'] ]", 
    "", 
    "\t\t'or':\t/(?:([^\\\\]+)\\\\+)|([^\\\\]+$)/gi,\t// [ ['folder','subfolder','file','123','456','789'],\t['789']]", 
    "\t};", 
    "", 
    "\tvar regexes_test_keys = Object.keys(regexes_test);", 
    "\tfor(r=0; r<regexes_test_keys.length;r++) {", 
    "\t\tvar rx_name\t= regexes_test_keys[r];", 
    "\t\tvar RegEx\t= regexes_test[rx_name];", 
    "\t\tvar result\t= test_sring_A.matchAll_v3(RegEx);", 
    "\t\tLogger.info(result, rx_name);", 
    "\t}", 
    "", 
    "}", 
    "", 
    "matchAll_v3Test()", 
    "", 
    "", 
    "//////var result\t= test_sring_A.matchAll_v3(regexes_test.test_alpha);", 
    "//////var result\t= test_sring_A.matchAll_v3(/(?:([^\\W\\d]+)\\\\+)+(?:(\\d+)\\\\+)+/gi);", 
    "//////var result\t= test_sring_A.matchAll_v3(/(?:([^\\W\\d]+)\\\\+)+/gi);", 
    "//////var result\t= test_sring_A.matchAll_v3(/(?:(\\d+)\\\\+)+/gi);", 
    "//////Logger.info(result,'test_alpha');", 
    "//////Logger.info( test_sring_A.match(/(?:([^\\W\\d]+)\\\\+)+/gi)\t );", 
    "//////Logger.info( test_sring_A.match(/(?:([^\\W\\d]+)\\\\+)/gi)\t );"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}