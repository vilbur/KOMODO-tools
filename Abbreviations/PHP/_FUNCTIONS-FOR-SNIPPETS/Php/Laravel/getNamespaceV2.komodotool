{
  "keyboard_shortcut": "", 
  "name": "getNamespaceV2", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "/** Get namespace of current file", 
    " * \tcase 1) file is in app directory, then return E.G: '\\App\\'", 
    " *", 
    " *", 
    " * @return string", 
    " */", 
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "ko.extensions.vilbur.LaravelNamespace = {};", 
    "", 
    "", 
    "/** LaravelNamespace", 
    " */", 
    "var LaravelNamespace = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction LaravelNamespace(){", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\tthis.testvar\t= 'testvar';", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\tvar path\t= '';", 
    "\t\tvar laravel_path\t= '';", 
    "\t\tvar file_dir\t= '';", 
    "\t\tvar file_name\t= '';", 
    "\t\tvar namespace\t= '';", 
    "", 
    "\t\tthis.get = function(_path_)", 
    "\t\t{", 
    "\t\t\tpath = _path_;", 
    "\t\t\tconsole.log('test');", 
    "\t\t\treturn getNamespace();", 
    "\t\t};", 
    "", 
    "\t\t/** getNamespace", 
    "\t\t */", 
    "\t\tvar getNamespace = function(){", 
    "", 
    "\t\t\tconsole.log( path );", 
    "\t\t\tsetFileDir();", 
    "\t\t\tconsole.log( file_dir );", 
    "\t\t\tsetNamespace();", 
    "\t\t\tconsole.log( namespace );", 
    "\t\t\t//capitalizeNamespace();", 
    "\t\t\t//Logger.info(namespace, 'namespace');", 
    "\t\t\treturn namespace ? namespace : false;", 
    "\t\t};", 
    "", 
    "\t\t/** set File Dir by given path or get pat of current file if  path is empty", 
    "\t\t */", 
    "\t\tvar setFileDir = function()", 
    "\t\t{", 
    "\t\t\tfile_dir\t= path.match(/\\.\\w+$/) ? require(\"ko/file\").dirname(path) : path;", 
    "", 
    "\t\t};", 
    "\t\t/** set File Dir by given path or get pat of current file if  path is empty", 
    "\t\t */", 
    "\t\tvar setFileName = function()", 
    "\t\t{", 
    "\t\t\tfile_name\t= path.match(/\\.\\w+$/) ? require(\"ko/file\").dirname(path) : path;", 
    "\t\t};", 
    "\t\t/** set File Dir by given path or get pat of current file if  path is empty", 
    "\t\t */", 
    "\t\tvar setLaravelPath = function()", 
    "\t\t{", 
    "\t\t\t//Logger.info(path, 'path');", 
    "\t\t\tlaravel_path\t= ko.extensions.getLaravelPath(path);", 
    "\t\t\t//Logger.info(laravel_path, 'laravel_path');", 
    "\t\t};", 
    "\t\t/** setNamespace", 
    "\t\t*/", 
    "\t\tfunction setNamespace()", 
    "\t\t{", 
    "\t\t\tif(isFileInTests() || isFileInPackages())", 
    "\t\t\t\tnamespace = isFileInTests() ? getNamespaceFromTestsPath() : getNamespaceFromPackagesPath();", 
    "\t\t\telse", 
    "\t\t\t\tnamespace = getNamespaceFromAppPath();", 
    "\t\t}", 
    "\t\t/** is namespace matching any item from suffixes ?", 
    "\t\t *\tE.G:\t'\\App\\Controllers'\t>>> 'Controller'", 
    "\t\t * @return string", 
    "\t\t*/", 
    "\t\tfunction isFileInTests()", 
    "\t\t{", 
    "\t\t\treturn file_dir.match(/\\\\tests*\\\\/gi) ? true : false;", 
    "\t\t}", 
    "\t\t/** is namespace matching any item from suffixes ?", 
    "\t\t *\tE.G:\t'\\App\\Controllers'\t>>> 'Controller'", 
    "\t\t * @return string", 
    "\t\t*/", 
    "\t\tfunction isFileInPackages()", 
    "\t\t{", 
    "\t\t\treturn file_dir.match(/\\\\packages\\\\[^\\\\\\s]+\\\\/gi) ? true : false;", 
    "\t\t}", 
    "\t\t/** getNamespaceFromAppPath", 
    "\t\t*/", 
    "\t\tfunction getNamespaceFromAppPath()", 
    "\t\t{", 
    "\t\t\treturn file_dir.replace(laravel_path+'\\\\', '');", 
    "\t\t}", 
    "\t\t/** getNamespaceFromPackagesPath", 
    "\t\t*/", 
    "\t\tfunction getNamespaceFromPackagesPath()", 
    "\t\t{", 
    "\t\t\treturn file_dir.split(/\\\\packages\\\\/gi).pop().replace(/\\\\src/gi, '');", 
    "\t\t}", 
    "\t\t/** getNamespaceFromTestsPath", 
    "\t\t*/", 
    "\t\tfunction getNamespaceFromTestsPath()", 
    "\t\t{", 
    "\t\t\t//return file_dir.split(/\\\\tests*\\\\/gi).pop();", 
    "\t\t\treturn file_dir.replace(/.*\\\\(tests*)\\\\/gi, '$1\\\\');", 
    "\t\t}", 
    "\t\t/** capitalizeNamespace", 
    "\t\t*/", 
    "\t\tfunction capitalizeNamespace()", 
    "\t\t{", 
    "\t\t\tnamespace = namespace.replace(/[_-]+/, ' ')", 
    "\t\t\t\t\t\t\t\t .replace(/(?:^|\\\\|\\s)[a-z]/g, function(letter){return letter.toUpperCase();})", 
    "\t\t\t\t\t\t\t\t .replace(/\\s+/, '');", 
    "\t\t}", 
    "\t}", 
    "", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "\treturn LaravelNamespace;", 
    "})()", 
    ".apply(ko.extensions.vilbur.LaravelNamespace);", 
    "", 
    "/** NameSpaceTest", 
    "*/", 
    "function NameSpaceTest(){", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "", 
    "\tvar laravel_path\t= 'c:\\\\wamp64\\\\www\\\\laravel-fresh';", 
    "\tvar path_app\t= laravel_path + '\\\\app';", 
    "\tvar path_commands\t= laravel_path + '\\\\app\\\\Commands\\\\CommandHandler.php';", 
    "\tvar path_controller\t= laravel_path + '\\\\app\\\\Http\\\\Controllers';", 
    "\tvar path_packages\t= laravel_path + '\\\\packages\\\\vilbur\\\\foo-package';", 
    "\tvar path_vendor\t= laravel_path + '\\\\packages\\\\vilbur\\\\foo-package';", 
    "\tvar path_tests\t= laravel_path + '\\\\tests\\\\unit';", 
    "\tvar non_laravel_path\t= 'c:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\Temp';", 
    "", 
    "\t//Logger.info( ko.extensions.vilbur.getNamespaceV2(path_app)\t=== 'App',\t'path_app' );", 
    "\t//Logger.info( ko.extensions.vilbur.getNamespaceV2(path_controller)\t=== 'App\\Http\\\\Controllers',\t'path_controller' );", 
    "", 
    "\t//Logger.info( new ko.extensions.vilbur.LaravelNamespace(path_controller),\t'path_controller' );", 
    "\t//Logger.info(  ko.extensions.vilbur.LaravelNamespace.testvar,\t'path_controller' );", 
    "\tLogger.info(  ko.extensions.vilbur.LaravelNamespace.get(laravel_path + '\\\\app\\\\Commands\\\\CommandHandler.php'),\t'\\\\app\\\\Http\\\\Controllers' );", 
    "", 
    "\t//Logger.info( ko.extensions.vilbur,\t'path_controller' );", 
    "\t//Logger.info( ko.extensions.vilbur.getNamespaceV2(path_commands)\t=== 'App\\\\Commands',\t'path_commands' );", 
    "\t//Logger.info( ko.extensions.vilbur.getNamespaceV2(path_packages)\t=== 'Vilbur\\\\FooPackage',\t'path_packages' );", 
    "\t//Logger.info( ko.extensions.vilbur.getNamespaceV2(path_vendor)\t=== 'Vilbur\\\\FooPackage',\t'path_vendor' );", 
    "\t//Logger.info( ko.extensions.vilbur.getNamespaceV2(path_tests)\t=== 'Tests\\\\Unit',\t'path_tests' );", 
    "\t//Logger.info(\tko.extensions.getNamespaceV2(non_laravel_path)\t=== false,\t'non_laravel_path' );", 
    "", 
    "}", 
    "", 
    "NameSpaceTest()", 
    "", 
    "", 
    "//", 
    "//(function(){", 
    "//", 
    "//\tfunction getNamespaceV2(path){", 
    "//", 
    "//\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(false) : require('ko/console');", 
    "//\t\tvar laravel_path\t= '';", 
    "//\t\tvar file_dir\t= '';", 
    "//\t\tvar file_name\t= '';", 
    "//\t\tvar namespace\t= '';", 
    "//", 
    "//\t\t/** getNamespaceV2", 
    "//\t\t */", 
    "//\t\tvar getNamespaceV2 = function(){", 
    "//\t\t\tsetFileDir();", 
    "//\t\t\tsetNamespace();", 
    "//\t\t\tcapitalizeNamespace();", 
    "//\t\t\t//Logger.info(namespace, 'namespace');", 
    "//\t\t\treturn namespace ? namespace : false;", 
    "//\t\t};", 
    "//", 
    "//\t\t/** set File Dir by given path or get pat of current file if  path is empty", 
    "//\t\t */", 
    "//\t\tvar setFileDir = function()", 
    "//\t\t{", 
    "//\t\t\tfile_dir\t= path.match(/\\.\\w+$/) ? require(\"ko/file\").dirname(path) : path;", 
    "//", 
    "//\t\t};", 
    "//\t\t/** set File Dir by given path or get pat of current file if  path is empty", 
    "//\t\t */", 
    "//\t\tvar setFileName = function()", 
    "//\t\t{", 
    "//\t\t\tfile_name\t= path.match(/\\.\\w+$/) ? require(\"ko/file\").dirname(path) : path;", 
    "//\t\t};", 
    "//\t\t/** set File Dir by given path or get pat of current file if  path is empty", 
    "//\t\t */", 
    "//\t\tvar setLaravelPath = function()", 
    "//\t\t{", 
    "//\t\t\t//Logger.info(path, 'path');", 
    "//\t\t\tlaravel_path\t= ko.extensions.getLaravelPath(path);", 
    "//\t\t\t//Logger.info(laravel_path, 'laravel_path');", 
    "//\t\t};", 
    "//\t\t/** setNamespace", 
    "//\t\t*/", 
    "//\t\tfunction setNamespace()", 
    "//\t\t{", 
    "//\t\t\tif(isFileInTests() || isFileInPackages())", 
    "//\t\t\t\tnamespace = isFileInTests() ? getNamespaceFromTestsPath() : getNamespaceFromPackagesPath();", 
    "//\t\t\telse", 
    "//\t\t\t\tnamespace = getNamespaceFromAppPath();", 
    "//\t\t}", 
    "//\t\t/** is namespace matching any item from suffixes ?", 
    "//\t\t *\tE.G:\t'\\App\\Controllers'\t>>> 'Controller'", 
    "//\t\t * @return string", 
    "//\t\t*/", 
    "//\t\tfunction isFileInTests()", 
    "//\t\t{", 
    "//\t\t\treturn file_dir.match(/\\\\tests*\\\\/gi) ? true : false;", 
    "//\t\t}", 
    "//\t\t/** is namespace matching any item from suffixes ?", 
    "//\t\t *\tE.G:\t'\\App\\Controllers'\t>>> 'Controller'", 
    "//\t\t * @return string", 
    "//\t\t*/", 
    "//\t\tfunction isFileInPackages()", 
    "//\t\t{", 
    "//\t\t\treturn file_dir.match(/\\\\packages\\\\[^\\\\\\s]+\\\\/gi) ? true : false;", 
    "//\t\t}", 
    "//\t\t/** getNamespaceFromAppPath", 
    "//\t\t*/", 
    "//\t\tfunction getNamespaceFromAppPath()", 
    "//\t\t{", 
    "//\t\t\treturn file_dir.replace(laravel_path+'\\\\', '');", 
    "//\t\t}", 
    "//\t\t/** getNamespaceFromPackagesPath", 
    "//\t\t*/", 
    "//\t\tfunction getNamespaceFromPackagesPath()", 
    "//\t\t{", 
    "//\t\t\treturn file_dir.split(/\\\\packages\\\\/gi).pop().replace(/\\\\src/gi, '');", 
    "//\t\t}", 
    "//\t\t/** getNamespaceFromTestsPath", 
    "//\t\t*/", 
    "//\t\tfunction getNamespaceFromTestsPath()", 
    "//\t\t{", 
    "//\t\t\t//return file_dir.split(/\\\\tests*\\\\/gi).pop();", 
    "//\t\t\treturn file_dir.replace(/.*\\\\(tests*)\\\\/gi, '$1\\\\');", 
    "//\t\t}", 
    "//\t\t/** capitalizeNamespace", 
    "//\t\t*/", 
    "//\t\tfunction capitalizeNamespace()", 
    "//\t\t{", 
    "//\t\t\tnamespace = namespace.replace(/[_-]+/, ' ')", 
    "//\t\t\t\t\t\t\t\t .replace(/(?:^|\\\\|\\s)[a-z]/g, function(letter){return letter.toUpperCase();})", 
    "//\t\t\t\t\t\t\t\t .replace(/\\s+/, '');", 
    "//\t\t}", 
    "//", 
    "//\t\t//setLaravelPath();", 
    "//\t\t//Logger.info(getNamespaceV2(), 'result');", 
    "//\t\t//return laravel_path ? getNamespaceV2() : false;", 
    "//\t}", 
    "//\treturn getNamespaceV2;", 
    "//", 
    "//})().apply(ko.extensions.vilbur.LaravelNamespace);"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}