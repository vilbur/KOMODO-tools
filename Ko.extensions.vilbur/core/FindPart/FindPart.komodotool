{
  "keyboard_shortcut": "", 
  "name": "FindPart", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/** find komodotool part object or .folderdata file", 
    " * EXTENDED default function: http://docs.komodoide.com/SDK/macroapi#macroapi_findPart", 
    " *  ", 
    " *\t@param\tstring input absolute OR uri path OR name of komodotool", 
    " *\t@param\tstring type of findPart 'macro|snippet|folder|template'", 
    " *", 
    " *\t@return\tobject\tkomodotool ", 
    " *\t", 
    " *", 
    " * @Example:", 
    " *\t\tko.extensions.FindPart('C:\\\\GoogleDrive\\\\Programs\\\\Core\\\\Komodo\\\\AppData\\\\10.1\\\\tools\\\\Classes\\\\Komodotool');", 
    " *\t\tko.extensions.FindPart('c:/GoogleDrive/Programs/Core/Komodo/AppData/10.1/tools/Classes/Komodotool/findPart.komodotool');\t\t", 
    " *\t\tko.extensions.FindPart('macro2://27028/findPart.js');", 
    " *\t\tko.extensions.FindPart('findPart', 'macro' );", 
    " *\t\tko.extensions.FindPart('snippet2://27028/If.snippet');", 
    " *\t\tko.extensions.FindPart('C:\\\\Users\\\\vilbur\\\\AppData\\\\Local\\\\ActiveState\\\\KomodoIDE\\\\10.1\\\\tools\\\\TestToolboxFolder');", 
    " *\t\tko.extensions.FindPart('If', 'Foo');\t", 
    " *", 
    " *", 
    " *", 
    " */", 
    "", 
    "/* Properties of Komodotool:", 
    "\t\t.hasAttribute", 
    "\t\t.getStringAttribute", 
    "\t\t.getBooleanAttribute", 
    "\t\t.getLongAttribute", 
    "\t\t.id", 
    "\t\t.value", 
    "\t\t.type", 
    "\t\t.name", 
    "\t\t.iconurl", 
    "\t\t.url", 
    "\t\t.path", 
    "\t\t.getFile", 
    "\t\t.setStringAttribute", 
    "\t\t.get_keybinding_description", 
    "\t\t.QueryInterface", 
    "\t\t.observe", 
    "\t\t.prettytype", 
    "\t\t.yaml_url", 
    "\t\t.logic_url", 
    "\t\t.url", 
    "\t\t.project", 
    "\t\t.getAttribute", 
    "\t\t.setAttribute", 
    "\t\t.removeAttribute", 
    "\t\t.setLongAttribute", 
    "\t\t.setBooleanAttribute", 
    "\t\t.prefset", 
    "\t\t.dump", 
    "\t\t.serialize", 
    "\t\t.getDragData", 
    "\t\t.getDragDataByFlavor", 
    "\t\t.getDragFlavors", 
    "\t\t.save", 
    "\t\t.parent", 
    "\t\t.evalAsPython", 
    "\t\t.evalAsPythonObserver", 
    "*/", 
    "/** findPart", 
    " */", 
    "ko.extensions.FindPart = function(input, type=null) {", 
    "", 
    "\t\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this;", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(false).off(true) : require('ko/console');", 
    "\t\tvar koFile\t= require(\"ko/file\");", 
    "\t\t/*--------   PUBLIC PROPERTIES   --------------------------------------------------------------------------------------*/", 
    "\t\tthis.input\t= input;", 
    "\t\tthis.type\t= type;\t\t", 
    "\t\tthis.match\t= null;\t\t", 
    "\t\tthis.part\t= null;", 
    "", 
    "\t\t/*--------   PROTOTYPE PROPERTIES   -----------------------------------------------------------------------------------*/", 
    "\t\t", 
    "\t\t/*--------   PUBLIC METHODS   -----------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t\t/** parseInput", 
    "\t\t*/", 
    "\t\tfunction _parseInput(){", 
    "\t\t\tLogger.info(_this.input, '_parseInput()');", 
    "\t\t\t_this.match_input\t= _getInputMatch();", 
    "\t\t\tLogger.info(_this.match_input, '_this.match_input');", 
    "\t\t\tif(_this.match_input)", 
    "\t\t\t\t_this.part = _this['_getPartBy_'+_this.match_input.key]();", 
    "\t\t\t", 
    "\t\t\tLogger.info(_this.part, '_this.part');", 
    "\t\t\treturn _this.part;", 
    "\t\t}", 
    "\t\t/** _getInputMatch", 
    "\t\t*/", 
    "\t\tfunction _getInputMatch(){", 
    "\t\t\tvar rx_input_types = {", 
    "\t\t\t\t\tpath:\t/^[A-Z]:[\\/\\\\]+(.*?(?=[\\/\\\\]+))[\\/\\\\]+(?:.*?[\\/\\\\]+)*(\\S+)\\.(.*)$/gi,\t\t", 
    "\t\t\t\t\turi:\t/^([^\\d]+)\\d*:\\/\\/(\\d+)\\/(\\S+)(\\.\\w+)$/gi,\t\t\t", 
    "\t\t\t\t\ttype:\t/^([^\\\\\\/]+)(\\.\\S+)*$/gi", 
    "\t\t\t\t};", 
    "\t\t\t\t", 
    "\t\t\tvar rx_input_types_keys = Object.keys(rx_input_types);", 
    "\t\t\tfor(t=0; t<rx_input_types_keys.length;t++) {", 
    "\t\t\t\tvar input_type \t= rx_input_types_keys[t];\t\t\t\t", 
    "\t\t\t\tvar match_input = rx_input_types[input_type].exec(_this.input);", 
    "\t\t\t\tif (match_input) ", 
    "\t\t\t\t\treturn {'key':input_type, match:match_input};", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t/** _getPartBy_path", 
    "\t\t * get komodotool .type and .name properties from file", 
    "\t\t*/", 
    "\t\tthis._getPartBy_path = function(){", 
    "\t\t\t", 
    "\t\t\tvar path\t= this.match_input.match[0].replace(/\\//gi, '\\\\\\\\');", 
    "\t\t\tvar ext\t= path.split('.').pop();", 
    "\t\t\tLogger.info(ext, 'ext');", 
    "", 
    "\t\t\tif( !ext.match(/komodotool|folderdata/gi) || !koFile.exists(path)) return false;", 
    "\t\t\tvar komodotool_json\t= _getKomodotoolJSON(koFile.isFile(path) ? path : path+'\\\\.folderdata');", 
    "\t\t\tLogger.info(komodotool_json, 'komodotool_json');", 
    "\t\t\tif(komodotool_json)", 
    "\t\t\t\treturn komodo.findPart(komodotool_json.type, komodotool_json.name);", 
    "\t\t};", 
    "\t\t", 
    "\t\t", 
    "\t\t/** _getPartBy_uri", 
    "\t\t*/", 
    "\t\tthis._getPartBy_uri = function(){", 
    "\t\t\treturn komodo.findPart(this.match_input.match[1], this.match_input.match[3]);", 
    "\t\t};\t\t", 
    "\t\t/** _getKomodotoolJSON", 
    "\t\t*/", 
    "\t\tfunction _getKomodotoolJSON(path){", 
    "\t\t\tif(koFile.exists(path))", 
    "\t\t\t\treturn JSON.parse(koFile.read(path));\t\t\t", 
    "\t\t}", 
    "\t\t/** _getPartBy_type", 
    "\t\t*/", 
    "\t\tthis._getPartBy_type = function(){", 
    "\t\t\tif(!this.type) return;", 
    "\t\t\t\treturn komodo.findPart(this.type, this.match_input.match[0]);", 
    "\t\t};", 
    "\t\t", 
    "\t\t/*--------   INIT   ------------------------------------------------------------------------------------*/\t\t", 
    "\t\treturn _parseInput();", 
    "\t\t\t", 
    "\t/*--------   PROTOTYPE METHODS  -------------------------------------------------------------------------------------------*/", 
    "\t", 
    "\t/*--------   RETURN THIS CLASS  -------------------------------------------------------------------------------------------*/", 
    "", 
    "};", 
    "", 
    "", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "/*\tTEST for findPart\t*/", 
    "/*\tProperties test for object\t*/", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "ko.extensions.FindPartTest = (function() {", 
    "\tko.extensions.ConsoleClear();", 
    "\tvar find_parameters = {", 
    "\t\t\t\t", 
    "\t\t'find~folder-data':\t['c:\\\\GoogleDrive\\\\Programs\\\\Core\\\\Komodo\\\\AppData\\\\10.1\\\\tools\\\\ko_extensions\\\\findPart\\\\.folderdata'],\t\t", 
    "\t\t'find~path_tool':\t['c:/GoogleDrive/Programs/Core/Komodo/AppData/10.1/tools/ko_extensions/findPart/findPart.komodotool'],", 
    "\t\t'find~macro_by_uri':\t['macro2://27028/findPart.js'],", 
    "\t\t'find~macro_by_type':\t['findPart', 'macro' ],", 
    "\t\t", 
    "\t\t'find~snippet_by_uri':\t['snippet2://27028/If.snippet'],", 
    "\t\t//", 
    "\t\t'find~this error is OK - Test of nonexisting type':\t['If', 'FooX'],", 
    "\t};", 
    "", 
    "\tvar find_tests_keys = Object.keys(find_parameters);", 
    "\tfor(k=0; k<find_tests_keys.length;k++) {", 
    "\t\tvar key = find_tests_keys[k];", 
    "\t\tvar parameters\t= find_parameters[key];", 
    "\t\tvar part = ko.extensions.FindPart.apply(this, parameters );", 
    "\t\t//if(part){}", 
    "\t\tvar message\t= part ? 'OK: ' : 'X ';", 
    "\t\tvar log_type\t= part ? 'info' : 'warn';", 
    "\t\tvar result\t= part ? 'PART PATH: '+part.path : '';", 
    "", 
    "\t\trequire('ko/console')[log_type](message + ' { '+key+' : ' +parameters.map(function(value){return \"\\\"\"+value+\"\\\"\";}).join(', ')+ ' } \\n'+result );", 
    "\t}", 
    "", 
    "});", 
    "/* RUN TEST */", 
    "//ko.extensions.FindPartTest();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/wrench-screwdriver.png"
}