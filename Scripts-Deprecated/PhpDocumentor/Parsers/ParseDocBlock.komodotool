{
  "keyboard_shortcut": "", 
  "name": "ParseDocBlock", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " * ", 
    " *", 
    " */ ", 
    "ko.extensions.ParseDocBlock = (function() {", 
    "\t", 
    "\t/* CONSTRUCT */\t ", 
    "\tfunction ParseDocBlock(){", 
    "\t\t/*----   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar _this = this;", 
    "", 
    "\t\t//var scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('ParseDocBlock.js').clear(true).off(false).header(true);", 
    "\t\t/*----   PUBLIC PROPERTIES   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.DocBlock\t= new ko.extensions.DocBlock();", 
    "\t\tthis.input_docblock\t= '';  ", 
    "\t\tthis.parsed_block\t= []; ", 
    "\t\tthis.parsed_tags\t= {};\t", 
    "\t\t//this.input_docblock\t= scimoz.selText;\t\t// DEBUG GET SELECTED TEXT FROM OTHER PANE\t\t", 
    "\t\t//ko.commands.doCommand('cmd_switchpane'); // DEBUG", 
    "\t\t", 
    "\t\t/** parse", 
    "\t\t *", 
    "\t\t * @return\tobject\tDocBlock.tags", 
    "\t\t */", 
    "\t\tthis.parse = function(input_docblock){", 
    "\t\t\tif(!input_docblock)return;", 
    "\t\t\t", 
    "\t\t\tthis.input_docblock\t= _inputStringCleanUp(input_docblock);", 
    "\t\t\tthis.parsed_block\t= _parseDocBlockString();", 
    "\t\t\t//_setParsedTags();", 
    "\t\t\t//this.DocBlock.setDockBlockTags(this.parsed_tags);", 
    "\t\t\t//Logger.info(this.DocBlock.tags,\t'ParseDocBlock.DocBlock.tags').force();", 
    "\t\t\t//return this.DocBlock;", 
    "\t\t};", 
    "\t\t ", 
    "\t\t/** REMOVE star characters on line start of comment block", 
    "\t\t */", 
    "\t\tfunction _inputStringCleanUp(input_docblock){", 
    "\t\t\tLogger.info(input_docblock, 'ParseDocBlock.parsed_tags');", 
    "\t\t\tvar input_string_clean = input_docblock", 
    "\t\t\t\t\t\t.replace(/(^\\s*\\/\\*+\\s*|\\s*\\*+\\/$)/gi, '')\t// remove comment block start and end E.G: '/** */'", 
    "\t\t\t\t\t\t//.replace(/(^|\\n)\\s*\\*\\s*?(?=[\\S\\n])/gi, '\\n')\t// remove stars every line start", 
    "\t\t\t\t\t\t.replace(/\\n\\s*\\*/gi,    '\\n')\t// remove asterisk and leading whitespace on every line start\tE.G: '   *'", 
    "\t\t\t\t\t\t.replace(/(\\n\\s*\\n)+/gi, '\\n\\n')\t// replace multiple empty lines with single empty", 
    "\t\t\t\t\t\t.replace(/\\n(?!\\n)\\s*@/gi, '\\n@')\t// replace leading whitespace before '   @fooTag'", 
    "\t\t\t\t\t\t.replace(/^[\\s\\n\\t]+|[\\s\\n\\t]+$/gi, ''); \t// remove empty space on START and END of input_docblock", 
    "\t\t\t\t\t", 
    "\t\t\t\t\t\t//.replace(/\\*\\s*(\\n|$)/gi, '*\\n')\t// remove tabspace on empty lines\t\t\t\t\t\t", 
    "\t\t\tLogger.info(input_string_clean, '@var input_string_clean');", 
    "\t\t\treturn input_string_clean;", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** parse DocBlock", 
    "\t\t *", 
    "\t\t * Split blocks by line end with dot ending '.' OR empty line OR by '@' character", 
    "\t\t *", 
    "\t\t * @return\tarray\tE.G: [", 
    "\t\t * \t\t\t\t'Summary broken dot on end.', ", 
    "\t\t * \t\t\t\t'Description first line\\n second line broken by dot or next empty line',", 
    "\t\t * \t\t\t\t'@param string param1',", 
    "\t\t * \t\t\t\t'@param string param2',", 
    "\t\t * \t\t\t\t'@return string", 
    "\t\t * \t\t\t ]", 
    "\t\t */", 
    "\t\tfunction _parseDocBlockString(){", 
    "\t\t\tvar input_string_replaced = _this.input_docblock.replace(/\\.\\n(?:\\s*\\n)*/gi, '.~~~\\n')\t// REPLACE dot line ends with '.~~~'", 
    "\t\t\t//var input_string_replaced = _this.input_docblock.replace(/(\\.)*\\n(?:\\s*\\n)*/gi, '$1~~~\\n')\t// REPLACE dot line ends with '.~~~'\t\t\t", 
    "\t\t\t                         .replace(/\\n(?:\\s*\\n)+(?=@)/gi, '\\n')\t// REMOVE empty line with before '@'", 
    "\t\t\t                         .replace(/\\n(\\s*\\n)+/gi, '#*#\\n');\t// REPLACE empty line with '#*#'\t\t\t\t\t\t\t\t\t ", 
    "\t\t\t                         //.replace(/\\n/gi, '~~~\\n')", 
    "\t\t\tvar input_string_parsed = input_string_replaced.split(/\\n(?=@)|~~~\\n|#\\*#\\n/);\t// split string by empty line, dot on line end OR with tag identifies '@'\t", 
    "\t\t\t ", 
    "\t\t\tLogger.info(input_string_parsed, 'ParseDocBlock.parsed_block');", 
    "\t\t\treturn input_string_parsed;\t// split string by empty line, dot on line end OR with tag identifies '@'\t", 
    "\t\t}", 
    "\t\t", 
    "\t\t/** parse line of dock block and get tag element parts", 
    "\t\t * @return\tarray\ttag elements of parsed line E.G: ['@param', 'string', 'varName', 'Foo description' ]", 
    "\t\t */", 
    "\t\tfunction _parseTag( line ){", 
    "\t\t\tvar regexes = [ ", 
    "\t\t\t\t///(@param|@property|@property_read|@property_write|@global|@var)[\\t\\s]+(\\S+)[\\t\\s]+(\\S+)[\\t\\s]*((?:.|[\\r\\n])+)*/gi,", 
    "\t\t\t\t///((?:.*|[\\r\\n])+)/gi // match all multiline\t\t\t", 
    "\t\t\t\t/(@(?:see|subpackage|api|filesource|package|category|copyright|ignore|internal|todo|uses))[\\t\\s]*((?:.|[\\r\\n])+)*/gi,\t// 1 groups", 
    "\t\t\t\t/(@(?:author|license|link|return|throws|deprecated|since|version|example))[\\t\\s]+(\\S+)[\\t\\s]*((?:.|[\\r\\n])+)*/gi,\t// 2 groups", 
    "\t\t\t\t/(@(?:param|property|property_read|property_write|global|var|method|source))[\\t\\s]+(\\S+)[\\t\\s]+(\\S+)[\\t\\s]*((?:.|[\\r\\n])+)*/gi,\t// 3 groups\t\t\t\t\t\t\t", 
    "\t\t\t\t///(@return|@throws)[\\t\\s]+(\\S+)[\\t\\s]+((?:.|[\\r\\n])+)/gi,", 
    "\t\t\t];", 
    "\t\t\t/* LOOP regexes */", 
    "\t\t\tfor(var r=0; r<regexes.length;r++){", 
    "\t\t\t\t/* FIND regEx matching line */", 
    "\t\t\t\tif(line.match(regexes[r]) !== null ){", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tvar matches = line.matchAll(regexes[r]).pop();", 
    "\t\t\t\t\tmatches.shift(); // remove first fullmatch element", 
    "\t\t\t\t\tmatches = matches.filter(function(val) {if(val) return val;}); // remove null values", 
    "\t\t\t\t\t//Logger.info(matches, 'matches');", 
    "\t\t\t\t\t/* SPLIT tag if is multiline, typically 'description' ca */", 
    "\t\t\t\t\tmatches = matches.map(function(tag_part){", 
    "\t\t\t\t\t\tvar tag_part_splied = tag_part.split(/\\n/);", 
    "\t\t\t\t\t\treturn tag_part_splied.length  > 1 ? tag_part_splied : tag_part;", 
    "\t\t\t\t\t//\treturn tag_part.split(/\\n/);", 
    "\t\t\t\t\t});", 
    "\t\t\t\t\treturn matches;", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t\t/* return summary or description, taf nust NOT start with '@' */", 
    "\t\t\treturn line.match(/^@/gi) === null ? line.split('\\n') : null;", 
    "\t\t}", 
    "\t", 
    "\t\t/** _parseTag", 
    "\t\t *", 
    "\t\t * ", 
    "\t\t */", 
    "\t\tfunction _setParsedTags(){  ", 
    "\t\t\tfor(var l=0; l<_this.parsed_block.length;l++) {", 
    "\t\t\t\tvar tag_line\t= _this.parsed_block[l];\t\t\t\t", 
    "\t\t\t\tvar parsed_tag\t= _parseTag( _this.parsed_block[l] );", 
    "\t\t\t\t//if(parsed_tag){", 
    "\t\t\t\t//\tvar tag_name\t= getTagName(parsed_tag, l);", 
    "\t\t\t\t//\t//Logger.info(parsed_tag, '_setParsedTags() parsed_tag');", 
    "\t\t\t\t//\tif(tag_name) ", 
    "\t\t\t\t//\t\tsetTag( tag_name, parsed_tag);", 
    "\t\t\t\t//\t else", 
    "\t\t\t\t//\t\talert( 'ERROR:\\nParseDocBlock._parseTag()\\nvar tag_name = '+tag_name );", 
    "\t\t\t\t//}", 
    "\t\t\t}", 
    "\t\t\tLogger.info(_this.parsed_tags, 'ParseDocBlock.parsed_tags');", 
    "\t\t}", 
    "\t\t/** set parsed tag data to object parsed_tags", 
    "\t\t *", 
    "\t\t * @return object ", 
    "\t\t*/", 
    "\t\tfunction setTag( tag, parsed_tag ){", 
    "\t\t\tLogger.info( [tag, parsed_tag ], 'setTag()');", 
    "\t\t\ttag = tag.replace(/^@/, '');", 
    "", 
    "\t\t\tif (tag.match(/summary|description/gi) !== null )", 
    "\t\t\t\t_this.parsed_tags[tag] = parsed_tag;", 
    "\t\t\telse ", 
    "\t\t\t\t/* ADD new object by @tag name E.G: _this.parsed_tags{@param:[]} */", 
    "\t\t\t\tif( typeof _this.parsed_tags[tag] === 'undefined')", 
    "\t\t\t\t\t_this.parsed_tags[tag] = parsed_tag;", 
    "\t\t\t\t/* ADD second @tag - put to array */", 
    "\t\t\t\telse if ( typeof _this.parsed_tags[tag][0] !== 'object')", 
    "\t\t\t\t\t_this.parsed_tags[tag] = [_this.parsed_tags[tag], parsed_tag];", 
    "\t\t\t\t/* ADD Other @tags, more then 2 elements */", 
    "\t\t\t\telse", 
    "\t\t\t\t\t_this.parsed_tags[tag].push(parsed_tag);", 
    "\t\t}", 
    "\t\t ", 
    "\t\t/**\tGet tag name from line E.G: '@param'", 
    "\t\t * ", 
    "\t\t *   @tag name is first element of match array,", 
    "\t\t * \tBUT 'summary' AND 'description' HAS NOT @tag AND HAS ONLY ONE MATCH ELEMENT", 
    "\t\t*/", 
    "\t\tfunction getTagName(parsed_tag, index){", 
    "\t\t\t//Logger.fn('getTagName', arguments);", 
    "\t\t", 
    "\t\t\tif( (parsed_tag.length > 0 && parsed_tag[0].match(/@/gi)===null)\t&& index === 0 ) return 'summary';", 
    "\t\t\tif( (parsed_tag.length > 0 && parsed_tag[0].match(/@/gi)===null)\t&& index === 1 ) return 'description';", 
    "\t\t\t//if( (parsed_tag.length > 1 && parsed_tag[0].match(/@/gi)===null)\t&& index > 0 ) return 'description';\t\t\t", 
    "\t\t\t", 
    "\t\t\treturn parsed_tag[0];", 
    "\t\t}", 
    "", 
    "\t\t/** GET tag of this.DocBlock", 
    "\t\t *", 
    "\t\t * First\ttags is summary ", 
    "\t\t * Second\ttags is description", 
    "\t\t * Oher\ttags starts with '@'", 
    "\t\t */", 
    "\t\t//ParseDocBlock.prototype._getTagKey = function(match_part, index){", 
    "\t\t//\tvar match_tag\t= match_part.match(/^@\\w+/gi);", 
    "\t\t//\treturn !match_tag ? ( index===0 ? 'summary' : 'description') : match_tag[0];", 
    "\t\t//};", 
    "\t}", 
    "\treturn ParseDocBlock; ", 
    "})();", 
    "", 
    "", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "/*\tParseDocBlock TEST\t*/", 
    "/*\tProperties test for object\t*/", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "ko.extensions.ParseDocBlockTest = (function() {;", 
    "\tvar\tTestObject\t= new ko.extensions.ParseDocBlock();", 
    "\tvar\ttest_properties\t= ['DocBlock.tags'];", 
    "\tvar\ttest_methods\t= {", 
    "\t\t'parse': [", 
    "\t\t\t'\t/** Summary Lorem ipsum luctus habitasse ac aenean donec ultrices maecenas arcu'+\t\t\t", 
    "\t\t\t//'\\n\t* Second line of summary.'+", 
    "\t\t\t//'\\n\t*       '+ ", 
    "\t\t\t'\\n\t*       '+\t\t\t", 
    "\t\t\t'\\n\t* A Description Lorem ipsum luctus habitasse ac aenean,'+ ", 
    "\t\t\t'\\n\t*\tB donec ultrices maecenas arcu, risus primis sodales,'+", 
    "\t\t\t'\\n\t*\tC urna feugiat platea ultrices maecenas arcu.'+", 
    "\t\t\t'\\n\t* \t'+", 
    "\t\t\t'\\n\t* \t'+\t\t\t\t\t\t", 
    "\t\t\t'\\n\t* @version\t1.2\tversion description'+\t\t\t", 
    "\t\t\t'\\n\t* \t'+", 
    "\t\t\t'\\n\t* @param\tstring\t$param1\tFULL param description '+", 
    "\t\t\t'\\n\t* @param\tboolean\t$param2'+", 
    "\t\t\t//'\\n\t* @param\tfalse\t'+\t\t\t", 
    "\t\t\t'\\n\t*\t\t\t'+", 
    "\t\t\t'\\n\t* @return string returned value description'+", 
    "\t\t\t'\\n\t* \t\t  second line description'+\t\t\t", 
    "\t\t\t'\\n\t*'+", 
    "\t\t\t//'\\n\t* @example ko.extensions.TestPhpDoc(\"foo@String\", true)'+", 
    "\t\t\t'\\n\t* '+", 
    "\t\t\t'\\n\t*/' ", 
    "\t\t],", 
    "\t\t//'parse~var': [", 
    "\t\t//\t'\t/** @var object tag_keys for this.tags = {},'+", 
    "\t\t//\t'\\n\t*\t\tValues are parsed via ParseDocBlock.parse() or ParseDocBlock.parse()'+", 
    "\t\t//\t'\\n\t*\t\tonline reference: https://www.phpdoc.org/docs/latest/references/phpdoc/tags/method.html'+\t\t\t", 
    "\t\t//\t'\\n\t* '+", 
    "\t\t//\t'\\n\t*/' ", 
    "\t\t//],", 
    "\t\t", 
    "\t\t", 
    "\t};\t", 
    "\tif(ko.extensions.TestObejctProperties)", 
    "\t\t(new ko.extensions.TestObejctProperties(method_toggle=false, properties_toggle=true))", 
    "\t\t\t.test(TestObject, test_methods, test_properties);", 
    "}); ", 
    "/* RUN TEST */", 
    "//ko.extensions.ParseDocBlockTest();", 
    " "
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}