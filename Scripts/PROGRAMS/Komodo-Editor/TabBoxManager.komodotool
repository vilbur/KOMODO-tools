{
  "keyboard_shortcut": "", 
  "name": "TabBoxManager", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "indent_relative": "true", 
  "set_selection": "true", 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " *\tvar _VilTabBox\t= new ko.extensions.VilTabBox();", 
    " *\talert( '_VilTabBox=\\n'+JSON.stringify( _VilTabBox, null, 2) );", 
    "", 
    " *\t_VilTabBox.getTabsOfActivePane();", 
    " *\t_VilTabBox.FileListSave();", 
    " *\t_VilTabBox._getTabsSaved();", 
    " *\t_VilTabBox.openPanes();", 
    " *\talert( '_VilTabBox=\\n'+JSON.stringify( _VilTabBox, null, 2) );", 
    " *", 
    " *", 
    " *", 
    " */", 
    "", 
    "ko.extensions.VilTabBox = (function() {", 
    "", 
    "\tfunction VilTabBox(){", 
    "\t\t//alert( \"VilTabBox:MOVE THIS CLASS TO SCRIPTS OR TO ko_extensions, IF THIS CLASS IS USED\" );", 
    "", 
    "", 
    "\t\tthis.timeout\t= 0;", 
    "\t\tthis.koFile\t= require(\"ko/file\");", 
    "\t\tthis.env_key\t= 'opened_files';", 
    "\t\tthis.tabs\t= {\"opened\":{},\"saved\":{},\"nonopened\":{}};", 
    "\t\tthis.panes\t= {\"active\":{},\"count\":{}};", 
    "", 
    "\t\tthis.tabs.opened\t= this._getTabsFromEditor();", 
    "\t\tthis.tabs.saved\t= this._getTabsSaved();", 
    "\t\tthis.tabs.nonopened\t= this._getNonOpenedFiles();", 
    "", 
    "\t\tthis.panes.count\t= this.tabs.opened[2].length > 0 ? 2 : 1;", 
    "\t\t//alert( 'this=\\n'+JSON.stringify( this, null, 2) );", 
    "", 
    "", 
    "\t}", 
    "", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype._getTabsFromEditor = function(){", 
    "", 
    "\t\tpanes\t= { \"1\":[], \"2\":[] };", 
    "", 
    "\t\t/* get main panes */", 
    "\t\tvar tabs_all\t= this.getTabsAll();", 
    "\t\tvar tabs_active\t= this.getTabsOfActivePane();", 
    "\t\tvar tabs_nonactive\t= this._arrayDifference(tabs_all, tabs_active);", 
    "", 
    "\t\tthis.panes.active\t= this.getActivePane(tabs_all, tabs_active, tabs_nonactive);", 
    "", 
    "\t\treturn{", 
    "\t\t\t\"1\": this.panes.active == 1 ? tabs_active : tabs_nonactive,", 
    "\t\t\t\"2\": this.panes.active == 2 ? tabs_active : tabs_nonactive,", 
    "\t\t};", 
    "", 
    "\t};", 
    "", 
    "\t/** openPanes", 
    "\t */", 
    "\tVilTabBox.prototype.openPanes = function(){", 
    "\t\t//ko.extensions.ConsoleClear();", 
    "\t\t//this._getTabsSaved();", 
    "\t\t//require('ko/console').info('---VilTabBox.openPanes()'+JSON.stringify( this.tabs.saved, null, 2));", 
    "", 
    "\t\t//for ( var pane = 1;  pane <= 2; pane++ ) {", 
    "\t\t\t//alert( 'this.tabs.saved=\\n'+JSON.stringify( this.tabs.saved, null, 2) );", 
    "\t\t//\tvar timeout\t= pane==1 ? 0 : 1000;", 
    "\t\t//\tsetTimeout( function(){", 
    "\t\t//\t\tthis._openTabs(this.tabs.saved[pane],pane);", 
    "\t\t//\t},timeout );", 
    "\t\t//}", 
    "\t\t////", 
    "\t\t//\talert( \"VilTabBox:\" );", 
    "\t\t//setTimeout( function(){", 
    "", 
    "", 
    "", 
    "\t\tthis._setPaneActive(1);", 
    "\t\t//require('ko/console').info('---PANE 1 '+ JSON.stringify( this.tabs.nonopened[1], null, 2));", 
    "", 
    "\t\tthis._openTabs(this.tabs.nonopened[1],1);", 
    "", 
    "\t\t//require('ko/console').info('---PANE 2 '+ JSON.stringify( this.tabs.nonopened[2], null, 2));", 
    "", 
    "\t\t//alert( \"VilTabBox:\" );", 
    "\t\tthis._openTabs(this.tabs.nonopened[2],2);", 
    "", 
    "\t};", 
    "\t/** _getNonOpenedFiles", 
    "\t */", 
    "\tVilTabBox.prototype._getNonOpenedFiles = function(){", 
    "\t\treturn {", 
    "\t\t\t\"1\":this._arrayDifference(this.tabs.opened[1], this.tabs.saved[1]),", 
    "\t\t\t\"2\":this._arrayDifference(this.tabs.opened[2], this.tabs.saved[2])", 
    "\t\t};", 
    "\t};", 
    "", 
    "\t/** _openTabs", 
    "\t */", 
    "\tVilTabBox.prototype._openTabs = function(tabs,pane){", 
    "", 
    "\t\tif(tabs.length > 0 )", 
    "\t\t\tfor ( var tab = 0;  tab < tabs.length; tab++ ) {", 
    "", 
    "\t\t\t\tvar file_path = tabs[tab];", 
    "", 
    "\t\t\t\tif( this.tabs.opened[pane].indexOf(file_path) < 0)", 
    "\t\t\t\t\tif(this._openfile(file_path))", 
    "\t\t\t\t\t\tthis._moveTabToPane(pane);", 
    "", 
    "\t\t\t}", 
    "\t};", 
    "\t/** _moveTabToPane", 
    "\t */", 
    "\tVilTabBox.prototype._moveTabToPane = function(pane){", 
    "", 
    "\t\tif(pane==this.panes.active)", 
    "\t\t\treturn;", 
    "", 
    "\t\t//if(pane==2 && this.panes.count==1){", 
    "\t\tko.commands.doCommand('cmd_movetab');", 
    "\t\tthis.wait();", 
    "", 
    "\t\t//require('ko/console').info('---TAB MOVED');", 
    "", 
    "\t\t//\talert( \"open new pane\" );", 
    "\t\t//}", 
    "\t\t//else", 
    "\t\t//\tko.commands.doCommand('cmd_switchpane');", 
    "\t\t//if( (pane==this.panes.active) || (pane==2 && this.panes.count==1) )", 
    "\t\t//\treturn;", 
    "\t\t//", 
    "\t\tthis.panes.active = pane;", 
    "\t};", 
    "\t/** select 1st or 2nd split view if opened", 
    "\t */", 
    "\tVilTabBox.prototype._setPaneActive = function(pane){", 
    "", 
    "\t\tif( (pane==this.panes.active) || (pane==2 && this.panes.count==1) )", 
    "\t\t\treturn;", 
    "", 
    "\t\tko.commands.doCommand('cmd_switchpane');", 
    "", 
    "\t\t//require('ko/console').info('---SET PANE ' + pane);", 
    "\t\tthis.wait();", 
    "\t\tthis.panes.active = pane;", 
    "\t};", 
    "", 
    "\t/** _openfile", 
    "\t */", 
    "\tVilTabBox.prototype._openfile = function(path){", 
    "", 
    "\t\tvar _Komodotool_path\t= (new ko.extensions.Komodotool(path)).uri;", 
    "", 
    "\t\tif(_Komodotool_path)", 
    "\t\t\tpath = _Komodotool_path;", 
    "\t\t//\t//require('ko/console').info('OPEN:'+path);", 
    "\t\ttry {", 
    "\t\t//\tif(this._ifFileExists(path))", 
    "", 
    "\t\t\tif(path!=''){", 
    "\t\t\t\tko.open.URI(path);", 
    "\t\t\t\tthis.wait();", 
    "\t\t\t\t//require('ko/console').info('OPEN:'+path);", 
    "\t\t\t\treturn true;", 
    "", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\tcatch(e) {", 
    "\t\t\t//require('ko/console').warn(e);", 
    "\t\t\t//require('ko/console').warn(JSON.stringify( _Komodotool_path, null, 2));", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t\treturn false;", 
    "", 
    "\t};", 
    "\t/** _ifFileExists", 
    "\t */", 
    "\tVilTabBox.prototype._ifFileExists = function(filepath){", 
    "\t\t//alert('filepath:\\n'+filepath);", 
    "\t\t//return true", 
    "\t\tvar match_uri\t= filepath.matchAll(/^(macro|snippet)\\d:\\/\\/(\\d+)\\/(\\w+)\\.(\\w+)$/gi);", 
    "\t\tif(match_uri){", 
    "\t\t\tvar _Komodotool_path\t= (new ko.extensions.Komodotool()).path;", 
    "\t\t\tif(_Komodotool_path)", 
    "\t\t\t\tfilepath\t= _Komodotool_path;", 
    "\t\t}", 
    "", 
    "\t\treturn this.koFile.exists(filepath);", 
    "\t};", 
    "", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tGET TABS\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype.getTabsOfActivePane = function(){", 
    "", 
    "\t\tvar view = ko.views.manager.currentView;", 
    "\t\tvar tabbox = view.parentNode;", 
    "\t\twhile ( tabbox && tabbox.nodeName != \"tabbox\" && tabbox.nodeName != \"xul:tabbox\"){ tabbox= tabbox.parentNode;}", 
    "\t\tvar childNodes = tabbox._tabs.childNodes;", 
    "\t\tvar opened_files = [];", 
    "", 
    "\t\t/*\tLOOP OPEN FILES\t*/", 
    "\t\tfor ( var i = 0;  i < childNodes.length; i++ )", 
    "\t\t{", 
    "\t\t\topened_files.push(childNodes[ i ].tooltipText );", 
    "", 
    "\t\t}", 
    "\t\treturn opened_files;", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype.getTabsAll = function(){", 
    "\t\tvar views = ko.views.manager.topView.getDocumentViews(true);", 
    "\t\tvar opened_files_all = [];", 
    "", 
    "\t\tfor (var i = 0; i < views.length; i++) {", 
    "\t\t\tview = views[i];", 
    "\t\t\tif (view.koDoc && view.koDoc.file) {", 
    "\t\t\t\tvar filepath = view.koDoc.file.URI;", 
    "\t\t\t\tif (filepath.match(/^file/g) !== null )", 
    "\t\t\t\t\tfilepath = filepath.substring(8).replace(/\\//gi, \"\\\\\").replace(/%20/gi, \" \"); // format path to same as in this.tabs.opened.active", 
    "\t\t\t\topened_files_all.push(filepath);", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\treturn opened_files_all;", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype._arrayDifference = function(array1, array2) {", 
    "", 
    "", 
    "\t\tvar array = [], diff = [];", 
    "", 
    "\t\tfor (var a1 = 0; a1 < array1.length; a1++) {", 
    "\t\t\tarray[array1[a1]] = true;", 
    "\t\t}", 
    "", 
    "\t\tfor (var a2 = 0; a2 < array2.length; a2++) {", 
    "\t\t\tif (array[array2[a2]]) {", 
    "\t\t\t\tdelete array[array2[a2]];", 
    "\t\t\t} else {", 
    "\t\t\t\tarray[array2[a2]] = true;", 
    "\t\t\t}", 
    "\t\t}", 
    "", 
    "\t\tfor (var k in array) {", 
    "\t\t\tdiff.push(k);", 
    "\t\t}", 
    "", 
    "\t\treturn diff;", 
    "", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype.getActivePane = function(tabs_all, tabs_active, tabs_nonactive){", 
    "\t\treturn tabs_active[0] === tabs_all[0] || tabs_nonactive.length <= 1  ? 1 : 2;", 
    "\t};", 
    "", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "\t/*\tENV VARIABLE\t*/", 
    "\t/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "\t/** FileListSave", 
    "\t */", 
    "\tVilTabBox.prototype.FileListSave = function(){", 
    "\t\tthis._setKomodoEnvVariable(this.env_key, JSON.stringify(this.tabs.opened));", 
    "\t};", 
    "\t/** _getTabsSaved", 
    "\t */", 
    "\tVilTabBox.prototype._getTabsSaved = function(){", 
    "\t\treturn\tJSON.parse(this._getKomodoEnvVariable(this.env_key));", 
    "\t\t//alert( 'this.tabs.opened=\\n'+JSON.stringify( this.tabs.opened, null, 2) )", 
    "\t};", 
    "", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype._setKomodoEnvVariable = function(key,value){", 
    "", 
    "\t\tvar allValues\t= this._getKomodoEnvVariable();", 
    "\t\tvar values_array\t= [];", 
    "", 
    "", 
    "\t\tif ( typeof value == 'undefined' )", 
    "\t\t\tdelete allValues[key];", 
    "\t\telse", 
    "\t\t\tallValues[key] = value;", 
    "", 
    "", 
    "\t\tfor\t(var k in allValues){", 
    "\t\t\t//var value = allValues[k]", 
    "\t\t\tif( typeof allValues[k] != \"undefined\")", 
    "\t\t\t\tvalues_array.push(k +'=' + allValues[k]);", 
    "\t\t}", 
    "", 
    "\t\tvar values_String\t= values_array.length > 0 ? values_array.join('\\n') : '';", 
    "\t\tvar prefs\t= Components.classes['@activestate.com/koPrefService;1'].getService(Components.interfaces.koIPrefService).prefs;", 
    "", 
    "\t\t////prefs.setStringPref(\"userEnvironmentStartupOverride\", '');\t// CLEAR KOMODO ENV VARIABLES", 
    "\t\tprefs.setStringPref(\"userEnvironmentStartupOverride\", values_String);", 
    "", 
    "\t};", 
    "\t/**", 
    "\t */", 
    "\tVilTabBox.prototype._getKomodoEnvVariable = function(key=null,_default=null){", 
    "\t\t//alert('_getKomodoEnvVariable()');", 
    "\t\tvar prefs\t= Components.classes['@activestate.com/koPrefService;1'].getService(Components.interfaces.koIPrefService).prefs;", 
    "\t\tvar values_string\t= prefs.getStringPref(\"userEnvironmentStartupOverride\");", 
    "\t\tvar values_split\t= values_string.split('\\n');", 
    "", 
    "\t\t/* string to object */", 
    "\t\tvar values = {};", 
    "\t\tfor(var i=0; i<values_split.length;i++) {", 
    "\t\t\tvar pair_split =  values_split[i].split('=');", 
    "\t\t\tvalues[pair_split[0]] = pair_split[1];", 
    "\t\t}", 
    "", 
    "\t\tvar variable = key===null ? values : values[key];", 
    "", 
    "\t\tif( isNaN(variable)===false )", 
    "\t\t\tvariable = Number(variable);", 
    "", 
    "\t\tif(!variable)", 
    "\t\t\treturn _default;", 
    "", 
    "\t\treturn variable;", 
    "", 
    "", 
    "\t};", 
    "\t/** dump", 
    "\t */", 
    "\tVilTabBox.prototype.dump = function(){", 
    "\t\talert( 'VilTabBox=\\n'+JSON.stringify( this, null, 2) );", 
    "\t};", 
    "\t/** wait", 
    "\t */", 
    "\tVilTabBox.prototype.wait = function(max=100){", 
    "\t\t//var max = 10", 
    "\t\tfor(var i=0; i<=max; i++){", 
    "\t\t\t//if(i==max)", 
    "\t\t\t//require('ko/console').info(i);", 
    "\t\t\t//require('ko/console').info('wait '+max);", 
    "\t\t}", 
    "\t};", 
    "", 
    "", 
    "\treturn VilTabBox;", 
    "})();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "icon": "chrome://fugue/skin/icons/blue-folder-open.png", 
  "type": "macro", 
  "treat_as_ejs": "false", 
  "auto_abbreviation": "true"
}