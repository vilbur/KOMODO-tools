{
  "keyboard_shortcut": "", 
  "name": "ExtensionsBuilder", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "", 
    "/** Allow create instances of object", 
    " * @return\tobject copy of ExtensionsBuilderContainer\t ", 
    " */", 
    "ko.extensions.vilbur.ExtensionsBuilder = (function()", 
    "{", 
    "\tfunction ExtensionsBuilder()", 
    "\t{", 
    "\t\tvar new_instance;", 
    "\t\t//return Object.assign({}, ko.extensions.vilbur.ExtensionsBuilderContainer);", 
    "\t\tfunction setNewInstance()", 
    "\t\t{", 
    "\t\t\tnew_instance = clone(ko.extensions.vilbur.ExtensionsBuilderContainer);", 
    "\t\t}", 
    "\t\t", 
    "\t\tfunction clone(item)", 
    "\t\t{", 
    "\t\t\tif (!item) { return item; } // null, undefined values check", 
    "\t\t", 
    "\t\t\tvar types = [ Number, String, Boolean ], ", 
    "\t\t\t\tresult;", 
    "\t\t", 
    "\t\t\t// normalizing primitives if someone did new String('aaa'), or new Number('444');", 
    "\t\t\ttypes.forEach(function(type)", 
    "\t\t\t{", 
    "\t\t\t\tif (item instanceof type)", 
    "\t\t\t\t\tresult = type( item );", 
    "\t\t\t});", 
    "\t\t", 
    "\t\t\tif (typeof result == \"undefined\")", 
    "\t\t\t{", 
    "\t\t\t\tif (Object.prototype.toString.call( item ) === \"[object Array]\")", 
    "\t\t\t\t{", 
    "\t\t\t\t\tresult = [];", 
    "\t\t\t\t\titem.forEach(function(child, index)", 
    "\t\t\t\t\t{ ", 
    "\t\t\t\t\t\tresult[index] = clone( child );", 
    "\t\t\t\t\t});", 
    "\t\t\t\t}", 
    "\t\t\t\telse if (typeof item == \"object\")", 
    "\t\t\t\t{", 
    "\t\t\t\t\t// testing that this is DOM", 
    "\t\t\t\t\tif (item.nodeType && typeof item.cloneNode == \"function\") {", 
    "\t\t\t\t\t\tresult = item.cloneNode( true );    ", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\telse if (!item.prototype)", 
    "\t\t\t\t\t{ // check that this is a literal", 
    "\t\t\t\t\t\tif (item instanceof Date)", 
    "\t\t\t\t\t\t\tresult = new Date(item);", 
    "\t\t\t\t\t\telse", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\t// it is an object literal", 
    "\t\t\t\t\t\t\tresult = {};", 
    "\t\t\t\t\t\t\tfor(var i in item)", 
    "\t\t\t\t\t\t\t\tif (item.hasOwnProperty(i))", 
    "\t\t\t\t\t\t\t\t\tresult[i] = clone( item[i] );", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t} else {", 
    "\t\t\t\t\t\t// depending what you would like here,", 
    "\t\t\t\t\t\t// just keep the reference, or create new object", 
    "\t\t\t\t\t\tif (false && item.constructor)", 
    "\t\t\t\t\t\t\tresult = new item.constructor(); // would not advice to do that, reason? Read below", 
    "\t\t\t\t\t\telse", 
    "\t\t\t\t\t\t\tresult = item;", 
    "\t\t\t\t\t}", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tresult = item;", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t", 
    "\t\t\treturn result;", 
    "", 
    "\t\t}", 
    "\t\tfunction setParentReference( )", 
    "\t\t{", 
    "\t\t\tnew_instance.Sync.parent = new_instance;", 
    "\t\t}", 
    "\t\t", 
    "\t\tsetNewInstance();", 
    "\t\tsetParentReference();", 
    "\t\t", 
    "\t\treturn new_instance;", 
    "\t}", 
    "\treturn ExtensionsBuilder;", 
    "})();", 
    "", 
    "/** Setup hierarchy of objects where scripts are applied", 
    " */", 
    "ko.extensions.vilbur.ExtensionsBuilderContainer =", 
    "{", 
    "\tProject:\t{},", 
    "\tSync:\t{},", 
    "\tBuild:\t{},", 
    "\tInstall:\t{},", 
    "};", 
    "", 
    "/** ExtensionsBuilderContainer", 
    " * ", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction ExtensionsBuilderContainer()", 
    "\t{", 
    "\t\tthis.test_var = 'Default';", 
    "\t\t", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'ExtensionsBuilderContainer' );", 
    "\t\t};", 
    "\t}", 
    "\treturn ExtensionsBuilderContainer;", 
    "", 
    "})().apply(ko.extensions.vilbur.ExtensionsBuilderContainer);", 
    "", 
    "/** Project", 
    " * ", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction Project()", 
    "\t{", 
    "\t\t//var prefs\t= Components.classes['@activestate.com/koPrefService;1'].getService(Components.interfaces.koIPrefService).prefs;", 
    "\t\tvar project;", 
    "\t\tthis.test_var = 'Project test var';", 
    "\t\t", 
    "\t\t/** Get current opened project", 
    "\t\t */", 
    "\t\tvar setProject = (function()", 
    "\t\t{", 
    "\t\t\tproject = ko.projects.manager.currentProject ? ko.projects.manager.currentProject : undefined;", 
    "\t\t});", 
    "\t\t/** Path of project", 
    "\t\t */", 
    "\t\tvar setPath = (function()", 
    "\t\t{", 
    "\t\t\tpath\t= project ? project.liveDirectory : undefined; ", 
    "\t\t});", 
    "\t\t/** Name of project ", 
    "\t\t */", 
    "\t\tvar setName = (function()", 
    "\t\t{", 
    "\t\t\tname\t= project ? project.url.match(/([^\\/]+)\\.komodoproject$/).pop() : undefined; ", 
    "\t\t});", 
    "\t\t/** Get Path of project", 
    "\t\t */", 
    "\t\tthis.path = (function()", 
    "\t\t{", 
    "\t\t\treturn path;", 
    "\t\t});", 
    "\t\t/** Get Name of project", 
    "\t\t */", 
    "\t\tthis.name = (function()", 
    "\t\t{", 
    "\t\t\treturn name;", 
    "\t\t});", 
    "\t\t/** TEMP NAME OF METHOD", 
    "\t\t */", 
    "\t\tthis.getCurrent = function()", 
    "\t\t{", 
    "\t\t\tif( ! ko.projects.manager.currentProject )", 
    "\t\t\t\treturn;", 
    "\t\t\t", 
    "\t\t\tsetProject();", 
    "\t\t\tsetPath();", 
    "\t\t\tsetName();", 
    "\t\t\t//console.log(  'name: ' + name );", 
    "\t\t};", 
    "\t}", 
    "\treturn Project;", 
    "", 
    "})().apply( ko.extensions.vilbur.ExtensionsBuilderContainer.Project );", 
    " ", 
    "/** Sync", 
    " * ", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction Sync()", 
    "\t{", 
    "\t\tthis.parent;", 
    "\t\t/** Search file or dir", 
    "\t\t * Default serach is not case sensitive", 
    "\t\t * @example\tfileSearch( 'c:\\\\Foo\\\\Dir', 'file.js' );", 
    "\t\t * \tfileSearch( 'c:\\\\Foo\\\\Dir', /.*\\.js/ );", 
    "\t\t *", 
    "\t\t * @param\tstring\tpath\tPath where to search", 
    "\t\t * @param\tstring|RegExp\tsearch\tSearch mask", 
    "\t\t * ", 
    "\t\t * @return\tarray|null\tFull paths of found files or dirs", 
    "\t\t */", 
    "\t\tvar fileSearch = function( path, search )", 
    "\t\t{", 
    "\t\t\tvar found\t= [];", 
    "\t\t\tvar mask\t= new RegExp( search, 'gi');", 
    "", 
    "\t\t\t/** Search in dir", 
    "\t\t\t */", 
    "\t\t\tvar searchInDir = function(dir_path)", 
    "\t\t\t{", 
    "\t\t\t\tvar items = koFile.list(dir_path);", 
    "", 
    "\t\t\t\tfor(let i=0; i<items.length;i++)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar path_full = dir_path +'\\\\'+ items[i];", 
    "", 
    "\t\t\t\t\tif( items[i].match(mask) )", 
    "\t\t\t\t\t\treturn found.push(path_full);", 
    "", 
    "\t\t\t\t\tif( ! koFile.isFile(path_full) )", 
    "\t\t\t\t\t\tsearchInDir(path_full);", 
    "\t\t\t\t}", 
    "\t\t\t}; ", 
    "\t\t\tsearchInDir(path);", 
    "\t\t\t", 
    "\t\t\treturn found.length ? found.pop() : null; ", 
    "\t\t};", 
    "\t\t", 
    "\t\t/** Get all opened macro files & js files", 
    "\t\t *", 
    "\t\t * @return object\topened_js_files = {", 
    "\t\t * \t\tfile:\t['C:\\fooScript.js'],", 
    "\t\t * \t\tmacro:\t['/userScriptFile.js'],", 
    "\t\t *  \t}", 
    "\t\t *", 
    "\t\t*/", 
    "\t\tvar opened_js_files = (function()", 
    "\t\t{", 
    "\t\t\t/** Add to files if *.s file", 
    "\t\t\t */", 
    "\t\t\tvar addToFiles = function(ko_file)", 
    "\t\t\t{", 
    "\t\t\t\tif( ! ko_file.URI.match(/\\.js$/gi) )", 
    "\t\t\t\t\treturn;", 
    "\t\t\t\t", 
    "\t\t\t\tvar type = /^(macro|file)/.exec( ko_file.URI );", 
    "", 
    "\t\t\t\tif( type )", 
    "\t\t\t\t\tfiles[type.pop()].push(ko_file.path);", 
    "\t\t\t}; ", 
    "\t\t\t", 
    "\t\t\tvar files\t= {file:[], macro:[]};", 
    "\t\t\tvar file_views\t= ko.views.manager.topView.getDocumentViews(true);", 
    "\t\t\t", 
    "\t\t\tfor (let i = 0; i < file_views.length; i++)", 
    "\t\t\t\tif (file_views[i].koDoc )", 
    "\t\t\t\t\taddToFiles( file_views[i].koDoc.file );", 
    "\t\t\t", 
    "\t\t\treturn files;", 
    "\t\t});", 
    "\t", 
    "\t\t/** Get all opened komodotool which are in extensions dir", 
    "\t\t// */", 
    "\t\t//var extensions_komodotool_files = opened_js_files.macro.map(function(macro_name)", 
    "\t\t//{", 
    "\t\t//\tvar macro_path\t= fileSearch(extension_dir, '^' + macro_name.replace('/', '').replace(/js$/, 'komodotool')  );", 
    "\t\t//", 
    "\t\t//\treturn macro_path ? macro_path : null;", 
    "\t\t//", 
    "\t\t//}).filter(function(macro_path){return macro_path ? macro_path : null;});", 
    "\t\t", 
    "\t\t/** Get project files", 
    "\t\t *", 
    "\t\t */", 
    "\t\tthis.getProjectFiles = function(project_path)", 
    "\t\t{", 
    "\t\t\tconsole.log('Sync.getProjectFiles()'); ", 
    "\t\t\t//console.log( JSON.stringify(opened_js_files(), null, 4)  );", 
    "\t\t\t//console.log(opened_js_files());", 
    "\t\t\t//alert( JSON.stringify(opened_js_files, null, 4)  ); ", 
    "\t\t\t//alert( JSON.stringify(extensions_komodotool_files, null, 4)  );", 
    "\t\t\t//console.log(  'project_path: ' + project_path );", 
    "\t\t\tconsole.log( this.parent.Project.name() );", 
    "\t\t\t", 
    "\t\t\t/** Search file or dir", 
    "\t\t\t * Default serach is not case sensitive", 
    "\t\t\t * @example\tfileSearch( 'c:\\\\Foo\\\\Dir', 'file.js' );", 
    "\t\t\t * \tfileSearch( 'c:\\\\Foo\\\\Dir', /.*\\.js/ );", 
    "\t\t\t *", 
    "\t\t\t * @param\tstring\tpath\tPath where to search", 
    "\t\t\t * @param\tstring|RegExp\tsearch\tSearch mask", 
    "\t\t\t * ", 
    "\t\t\t * @return\tarray|null\tFull paths of found files or dirs", 
    "\t\t\t */", 
    "\t\t\t//var fileSearch = function( path, search )", 
    "\t\t\t//{", 
    "\t\t\t//\tvar koFile\t= require(\"ko/file\"); ", 
    "\t\t\t//\tconsole.log(  'search: ' + search );", 
    "\t\t\t//\tvar found_paths\t= [];", 
    "\t\t\t//\tvar mask\t= typeof search === 'object'  ? search : new RegExp( search, 'gi');", 
    "\t\t\t//\t", 
    "\t\t\t//\t/** Search in dir", 
    "\t\t\t//\t */", 
    "\t\t\t//\tvar searchInDir = function(dir_path)", 
    "\t\t\t//\t{", 
    "\t\t\t//\t\tvar items = koFile.list(dir_path);", 
    "\t\t\t//", 
    "\t\t\t//\t\tfor(let i=0; i<items.length;i++)", 
    "\t\t\t//\t\t{", 
    "\t\t\t//\t\t\tvar path_full = dir_path +'\\\\'+ items[i];", 
    "\t\t\t//\t\t\t", 
    "\t\t\t//\t\t\tif( items[i].match(mask) )", 
    "\t\t\t//\t\t\t\tfound_paths.push(path_full);", 
    "\t\t\t//\t\t\t", 
    "\t\t\t//\t\t\tif( ! koFile.isFile(path_full) )", 
    "\t\t\t//\t\t\t\tsearchInDir(path_full);", 
    "\t\t\t//\t\t}", 
    "\t\t\t//\t}; ", 
    "\t\t\t//\tsearchInDir(path);", 
    "\t\t\t//\t ", 
    "\t\t\t//\treturn found_paths.length ? found_paths : null;", 
    "\t\t\t//};", 
    "\t\t\t//", 
    "\t\t\t//console.log( fileSearch(project_path, /.*.komodotool/gi) );", 
    "\t\t\t", 
    "\t\t\t", 
    "\t\t};", 
    "", 
    "\t\t/** Sync All Files of extension project ", 
    "\t\t */", 
    "\t\tthis.syncAllFiles = function()", 
    "\t\t{", 
    "\t\t\talert( 'syncAllFiles' );", 
    "\t\t};", 
    "\t\t/** Sync only Opened Files of extension project", 
    "\t\t */", 
    "\t\tthis.syncOpenedFiles = function()", 
    "\t\t{", 
    "\t\t\tconsole.log( 'syncOpenedFiles' );", 
    "\t\t};\t\t", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'Sync' );", 
    "\t\t\t//return new ko.extensions.TemplateExtension.Sync();", 
    "\t\t};", 
    "", 
    "\t}", 
    "\treturn Sync;", 
    "", 
    "})().apply( ko.extensions.vilbur.ExtensionsBuilderContainer.Sync );", 
    " ", 
    " "
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}