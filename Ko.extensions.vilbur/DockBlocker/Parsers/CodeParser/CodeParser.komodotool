{
  "keyboard_shortcut": "", 
  "name": "CodeParser", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/** Parse given snippet of code", 
    " * Find function in code and parse it", 
    " *", 
    " * Return object ready to pass to DockBlock class", 
    " *", 
    " */", 
    "ko.extensions.vilbur.CodeParser = (function()", 
    "{", 
    "", 
    "\t/**   Constructor", 
    "\t */", 
    "\tfunction CodeParser(code_snippet)", 
    "\t{", 
    "\t\t//var _this\t= this;", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('CodeParser.js').clear(false).off(false);", 
    "", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;; // lang  of code_snippet", 
    "\t\tvar regex_code\t= new ko.extensions.vilbur.regex_code;", 
    "\t\tvar regex_fn;", 
    "", 
    "\t\tvar match_fn;", 
    "\t\tvar match_params;", 
    "\t\tvar match_return;", 
    "", 
    "\t\tvar doc_block_input\t= [];", 
    "", 
    "\t\tcode_snippet = code_snippet.trim();", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.lang = function(_lang)", 
    "\t\t{", 
    "\t\t\tlang = _lang;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tthis.parse = function()", 
    "\t\t{", 
    "\t\t\tsetRegexFn();", 
    "\t\t\tLogger.info(code_snippet, 'CodeParser-input: '+'code_snippet'); ", 
    "\t\t\t//Logger.info(code_snippet, 'code_snippet');", 
    "\t\t\t//Logger.info(regex_code, 'regex_code');", 
    "\t\t\t//Logger.info(regex_fn, 'regex_fn');", 
    "", 
    "\t\t\t/** Find matching regEx and get matches", 
    "\t\t\t */", 
    "\t\t\tmatch_fn = (function()", 
    "\t\t\t{", 
    "\t\t\t\tfor(var rx_name in regex_fn)", 
    "\t\t\t\t\tif (regex_fn.hasOwnProperty(rx_name))", 
    "\t\t\t\t\t\tif (code_snippet.match(regex_fn[rx_name]))", 
    "\t\t\t\t\t\t\treturn regex_fn[rx_name].exec(code_snippet);", 
    "\t\t\t})();", 
    "", 
    "\t\t\t//var match_return\t= /(.*)/gi.exec(code_snippet);\t\t\t", 
    "", 
    "\t\t\tvar setDocBlockInput = function()", 
    "\t\t\t{", 
    "\t\t\t\tif( typeof match_fn === 'undefined'  )", 
    "\t\t\t\t\treturn null;", 
    "", 
    "\t\t\t\t/* find datatype of given value.", 
    "\t\t\t\t *", 
    "\t\t\t\t * Example value='foo' >>> return 'string'\t| value='['A','B']' >>> return 'array'\t| value='true' >>> return 'boolean'", 
    "\t\t\t\t *", 
    "\t\t\t\t * @param\tstring\tvalue\tstringified variable value", 
    "\t\t\t\t * @return string datatypes 'boolean|null|array|object|float|integer|string'", 
    "\t\t\t\t */", 
    "\t\t\t\tvar getDataType = function(value)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar dataTypeMatches = {", 
    "\t\t\t\t\t\t\"boolean\":\t'true|false',", 
    "\t\t\t\t\t\t\"null\":\t'null',", 
    "\t\t\t\t\t\t\"array\":\t'[\\\\[\\\\]]',", 
    "\t\t\t\t\t\t\"object\":\t'[\\{\\}]',", 
    "\t\t\t\t\t\t\"float\":\t'[\\\\d]+\\\\.[\\\\d]+',", 
    "\t\t\t\t\t\t\"integer\":\t'\\\\d+',", 
    "\t\t\t\t\t\t\"string\":\t'[\\'\"].*[\\'\"]',", 
    "\t\t\t\t\t\t\"self\":\t'this',\t\t\t\t\t\t\t", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif(value)", 
    "\t\t\t\t\t\tfor ( var key in dataTypeMatches )", 
    "\t\t\t\t\t\t\tif ( value.trim().match(dataTypeMatches[key]) !== null )", 
    "\t\t\t\t\t\t\t\treturn key;", 
    "", 
    "\t\t\t\t\treturn 'void';", 
    "\t\t\t\t};\t", 
    "\t\t\t\t\t", 
    "\t\t\t\t/* Set summary tag", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setSummary = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tdoc_block_input.push([ match_fn[1].replace(/([A-Z])/g, ' $1').trim() ]);", 
    "\t\t\t\t})();", 
    "\t\t\t\t/* Set @function pseudo tag", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setFnName = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tdoc_block_input.push([ '@function', match_fn[1] ]);", 
    "\t\t\t\t})();", 
    "\t\t\t\t/* set @param tag for all params", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setParameters = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\t/* set single @param tag", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar setParameter = function(parameter)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tvar param_split = parameter.split(/\\s*:*=\\s*/g);", 
    "\t\t\t\t\t\t//Logger.info(param_split, 'CodeParser: '+'param_split');", 
    "\t\t\t\t\t\tdoc_block_input.push([", 
    "\t\t\t\t\t\t\t\t\t\t\t\t'@param',\t// tag", 
    "\t\t\t\t\t\t\t\t\t\t\t\tgetDataType(param_split[1]),\t// type", 
    "\t\t\t\t\t\t\t\t\t\t\t\tparam_split[0],\t// name", 
    "\t\t\t\t\t\t\t\t\t\t\t\t'',\t// description", 
    "\t\t\t\t\t\t\t\t\t\t\t\tparam_split[1]\t// default", 
    "\t\t\t\t\t\t\t\t\t\t\t]);", 
    "\t\t\t\t\t};", 
    "\t\t\t\t\t/** split parameters by ',' E.G.:  '$param1, $param2'", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar splitParameters = function()", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\tmatch_fn[2].replace(/,\\s*(\\$*[A-Z]+)/gi, ',~~~$1').split(/,~~~/gi).map(function(parameter){", 
    "\t\t\t\t\t\t   setParameter(parameter.trim());", 
    "\t\t\t\t\t   });", 
    "\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\tif( typeof match_fn[2] !== 'undefined' && ! match_fn[2].match(/^\\s*$/gi) )", 
    "\t\t\t\t\t\tsplitParameters();", 
    "", 
    "\t\t\t\t})();", 
    "\t\t\t\tvar setReturn = (function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\t//Logger.info(match_return, 'CodeParser: '+'match_return');", 
    "\t\t\t\t\tvar match_return\t= /return\\s+([^\\s}]+)\\s*}/gi.exec(code_snippet);", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( match_return )", 
    "\t\t\t\t\t\tdoc_block_input.push([ '@return', getDataType(match_return.pop().trim()) ]);", 
    "\t\t\t\t})();", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tsetDocBlockInput();", 
    "\t\t\tLogger.info(doc_block_input, 'CodeParser-output: '+'doc_block_input'); ", 
    "\t\t\treturn doc_block_input;", 
    "\t\t};", 
    "", 
    "\t\t/** set", 
    "\t\t */", 
    "\t\tvar setRegexFn = function()", 
    "\t\t{", 
    "\t\t\tregex_fn = flattenObject(regex_code[lang]['function']);", 
    "\t\t};", 
    "", 
    "\t\t/**", 
    "\t\t */", 
    "\t\tvar flattenObject = function(obj)", 
    "\t\t{", 
    "\t\t\tvar toReturn = {};", 
    "", 
    "\t\t\tfor (var i in obj) {", 
    "\t\t\t\tif (obj.hasOwnProperty(i))", 
    "\t\t\t\t\tif ( typeof obj[i]!=='undefined' && obj[i].constructor.name !== 'RegExp') {", 
    "\t\t\t\t\t\tvar flatObject = flattenObject(obj[i]);", 
    "\t\t\t\t\t\tfor(var x in flatObject)", 
    "\t\t\t\t\t\t\tif (flatObject.hasOwnProperty(x))", 
    "\t\t\t\t\t\t\ttoReturn[i + '.' + x] = flatObject[x];", 
    "\t\t\t\t\t} else", 
    "\t\t\t\t\t\ttoReturn[i] = obj[i];", 
    "\t\t\t}", 
    "\t\t\treturn toReturn;", 
    "\t\t};", 
    "", 
    "", 
    "\t}", 
    "", 
    "\treturn CodeParser;", 
    "})();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}