{
  "keyboard_shortcut": "", 
  "name": "DockBlockParser", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined'  )", 
    "\tko.extensions.vilbur = {};", 
    "", 
    "/** Parse doc block to arrays", 
    " * \tresult to data ready for DocBlock class", 
    " *", 
    " */", 
    "ko.extensions.vilbur.DockBlockParser = (function() {", 
    "", 
    "\t/* CONSTRUCT */", 
    "\tfunction DockBlockParser(dock_block_string){", 
    "", 
    "\t\tvar Logger\t= new ko.extensions.Logger_v3('DockBlockParser.js').clear(true).off(false).header(false);", 
    "", 
    "\t\tvar parsed_block\t= [];", 
    "\t\tvar parsed_tags\t= [];", 
    "", 
    "\t\t/** RegExes for matchi line\\s to array", 
    "\t\t */", 
    "\t\tvar rx_tag_types = [", 
    "\t\t\t///(@param|@property|@property_read|@property_write|@global|@var)[\\t\\s]+(\\S+)[\\t\\s]+(\\S+)[\\t\\s]*((?:.|[\\r\\n])+)*/gi,", 
    "\t\t\t///((?:.*|[\\r\\n])+)/gi // match all multiline", 
    "\t\t\t/(@(?:see|subpackage|api|filesource|package|category|copyright|ignore|internal|todo|uses))[\\t\\s]*((?:.|[\\r\\n])+)*/gi,\t// 1 groups", 
    "\t\t\t/(@(?:author|license|link|return|throws|deprecated|since|version|example))[\\t\\s]+(\\S+)[\\t\\s]*((?:.|[\\r\\n])+)*/gi,\t// 2 groups", 
    "\t\t\t/(@(?:param|property|property_read|property_write|global|var|method|source))[\\t\\s]+(\\S+)[\\t\\s]+(\\S+)[\\t\\s]*((?:.|[\\r\\n])+)*/gi,\t// 3 groups", 
    "\t\t\t///(@return|@throws)[\\t\\s]+(\\S+)[\\t\\s]+((?:.|[\\r\\n])+)/gi,", 
    "\t\t];", 
    "", 
    "\t\t/** parse dockblock", 
    "\t\t *", 
    "\t\t * @return\tarray\tparsed_tags", 
    "\t\t */", 
    "\t\tvar parse = function(){", 
    "", 
    "\t\t\t/** REMOVE star characters on line start of comment block", 
    "\t\t\t */", 
    "\t\t\tfunction cleanUpInputString()", 
    "\t\t\t{", 
    "\t\t\t\tLogger.info(dock_block_string, 'dock_block_string');", 
    "\t\t\t\tdock_block_string = dock_block_string", 
    "\t\t\t\t\t\t\t\t\t\t.replace(/(^\\s*\\/\\*+\\s*|\\s*\\*+\\/$)/gi, '')\t// remove comment block start and end E.G: '/** */'", 
    "\t\t\t\t\t\t\t\t\t\t//.replace(/(^|\\n)\\s*\\*\\s*?(?=[\\S\\n])/gi, '\\n')\t// remove stars every line start", 
    "\t\t\t\t\t\t\t\t\t\t.replace(/\\n\\s*\\*/gi,    '\\n')\t// remove asterisk and leading whitespace on every line start\tE.G: '   *'", 
    "\t\t\t\t\t\t\t\t\t\t.replace(/(\\n\\s*\\n)+/gi, '\\n\\n')\t// replace multiple empty lines with single empty", 
    "\t\t\t\t\t\t\t\t\t\t.replace(/\\n(?!\\n)\\s*@/gi, '\\n@')\t// replace leading whitespace before '   @fooTag'", 
    "\t\t\t\t\t\t\t\t\t\t.replace(/^[\\s\\n\\t]+|[\\s\\n\\t]+$/gi, ''); \t// remove empty space on START and END of dock_block_string", 
    "\t\t\t\t//Logger.info(dock_block_string, 'dock_block_string clean');", 
    "\t\t\t}", 
    "", 
    "\t\t\t/** parse DocBlock", 
    "\t\t\t *", 
    "\t\t\t * Split blocks by line end with dot ending '.' OR empty line OR by '@' character", 
    "\t\t\t *", 
    "\t\t\t * @return\tarray\tE.G: [", 
    "\t\t\t * \t\t\t\t'Summary broken dot on end.',", 
    "\t\t\t * \t\t\t\t'Description first line\\n second line broken by dot or next empty line',", 
    "\t\t\t * \t\t\t\t'@param string param1',", 
    "\t\t\t * \t\t\t\t'@param string param2',", 
    "\t\t\t * \t\t\t\t'@return string", 
    "\t\t\t * \t\t\t ]", 
    "\t\t\t */", 
    "\t\t\tvar parseDocBlock = function()", 
    "\t\t\t{", 
    "\t\t\t\tparsed_block = dock_block_string", 
    "\t\t\t\t\t\t\t\t\t.replace(/\\.\\n(?:\\s*\\n)*/gi, '.###\\n')\t// REPLACE dot line ends with '.~~~'", 
    "\t\t\t\t\t\t\t\t\t.replace(/\\n@/gi, '###@')\t// mark tags", 
    "\t\t\t\t\t\t\t\t\t.split(/###/gi)", 
    "\t\t\t\t\t\t\t\t\t.filter(function(val) {if(val) return val;});\t// remove null values", 
    "\t\t\t\t//Logger.info(parsed_block, 'parsed_block');", 
    "\t\t\t};", 
    "\t\t\t/** parseTag", 
    "\t\t\t */", 
    "\t\t\tfunction parseTags()", 
    "\t\t\t{", 
    "\t\t\t\t/** parse line of dock block and get tag element parts", 
    "\t\t\t\t * @return\tarray\ttag elements of parsed line E.G: ['@param', 'string', 'varName', 'Foo description' ]", 
    "\t\t\t\t */", 
    "\t\t\t\tfunction parseTag( line )", 
    "\t\t\t\t{", 
    "", 
    "\t\t\t\t\t/** getMatches", 
    "\t\t\t\t\t */", 
    "\t\t\t\t\tvar getMatches = function(regex)", 
    "\t\t\t\t\t{", 
    "\t\t\t\t\t\t/** SPLIT tag has multiline description", 
    "\t\t\t\t\t\t */", 
    "\t\t\t\t\t\tvar splitMultiLines = function()", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\treturn\tmatches.map(function(tag_part)", 
    "\t\t\t\t\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\t\t\t\t\tvar tag_part_splied = tag_part.split(/\\n\\s*/); // split by line, remove leading whitespace", 
    "\t\t\t\t\t\t\t\t\t\t\treturn tag_part_splied.length  > 1 ? tag_part_splied : tag_part;", 
    "\t\t\t\t\t\t\t\t\t\t});", 
    "\t\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\t\tvar matches = regex.exec(line);                                 // get matches", 
    "\t\t\t\t\t\tmatches.shift();\t// remove full match", 
    "\t\t\t\t\t\tmatches = matches.filter(function(val) {if(val) return val;});\t// remove null values", 
    "", 
    "\t\t\t\t\t\treturn splitMultiLines();", 
    "\t\t\t\t\t};", 
    "", 
    "\t\t\t\t\t/* LOOP rx_tag_types */", 
    "\t\t\t\t\tfor(var r=0; r<rx_tag_types.length;r++)", 
    "\t\t\t\t\t\tif(line.match(rx_tag_types[r]) !== null )", 
    "\t\t\t\t\t\t\treturn getMatches(rx_tag_types[r]);", 
    "", 
    "\t\t\t\t\t/* return SUMMARY or DESCRIPTION, tag must NOT start with '@' */", 
    "\t\t\t\t\treturn line.match(/^@/gi) === null ? line.split('\\n') : null;", 
    "\t\t\t\t}", 
    "", 
    "\t\t\t\tfor(var l=0; l<parsed_block.length;l++)", 
    "\t\t\t\t\tparsed_tags.push( parseTag(parsed_block[l].trim()) );", 
    "", 
    "\t\t\t\tLogger.info(parsed_tags, 'parsed_tags');", 
    "\t\t\t}", 
    "", 
    "\t\t\tcleanUpInputString();", 
    "\t\t\tparseDocBlock();", 
    "\t\t\tparseTags();", 
    "", 
    "\t\t\treturn parsed_tags;", 
    "", 
    "\t\t};", 
    "", 
    "\t\treturn dock_block_string ? parse() : null;", 
    "", 
    "\t}", 
    "\treturn DockBlockParser;", 
    "", 
    "})();", 
    "", 
    "", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "/*\tDockBlockParser TEST\t*/", 
    "/*\tProperties test for object\t*/", 
    "/*\t-------------------------------------------------------------------------------------------------------------\t*/", 
    "", 
    "", 
    "var\ttest_docblock =", 
    "\t'\t/** Summary Lorem ipsum luctus habitasse ac aenean donec ultrices maecenas arcu'+", 
    "\t'\\n\t* Second line of summary.'+", 
    "\t'\\n\t*       '+", 
    "\t'\\n\t*       '+", 
    "\t'\\n\t* A Description Lorem ipsum luctus habitasse ac aenean,'+", 
    "\t'\\n\t*\tB donec ultrices maecenas arcu, risus primis sodales,'+", 
    "\t'\\n\t*\tC urna feugiat platea ultrices maecenas arcu.'+", 
    "\t'\\n\t* \t'+", 
    "\t'\\n\t* \t'+", 
    "\t'\\n\t* @version\t1.2\tversion description'+", 
    "\t'\\n\t* \t'+", 
    "\t'\\n\t* @param\tstring\t$param1\tFULL param description '+", 
    "\t'\\n\t* @param\tboolean\t$param2'+", 
    "\t//'\\n\t* @param\tfalse\t'+", 
    "\t'\\n\t*\t\t\t'+", 
    "\t'\\n\t* @return string returned value description'+", 
    "\t'\\n\t* \t\t  second line description'+", 
    "\t'\\n\t*'+", 
    "\t'\\n\t* @example ko.extensions.TestPhpDoc(\"foo@String\", true)'+", 
    "\t'\\n\t* '+", 
    "\t'\\n\t*/';", 
    "//", 
    "//var test_docblock =", 
    "//\t'\t/** @var object tag_keys for this.tags = {},'+", 
    "//\t'\\n\t*\t\tValues are parsed via DockBlockParser.parse() or DockBlockParser.parse()'+", 
    "//\t'\\n\t*\t\tonline reference: https://www.phpdoc.org/docs/latest/references/phpdoc/tags/method.html'+", 
    "//\t'\\n\t* '+", 
    "//\t'\\n\t*/';", 
    "", 
    "var\tDockBlockParser\t= new ko.extensions.vilbur.DockBlockParser(test_docblock);"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}