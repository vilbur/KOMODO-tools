{
  "keyboard_shortcut": "", 
  "name": "prop", 
  "value": [
    "<%", 
    "/* Generate parameter to function with object assign and property definition", 
    " *", 
    " * Generate strings:", 
    " * \t1) method parameter", 
    " *\t2) property setter", 
    " *\t3) property definition", 
    " *", 
    " *\tE.G:", 
    " *\t\t$property", 
    " *\t\t$this->property\t= $property;", 
    " *\t\tprivate property;", 
    " *", 
    "*/", 
    "function generateProperty(){", 
    "\t/*--------   PRIVATE PROPERTIES   -------------------------------------------------------------------------------------*/", 
    "\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\tvar koEditor\t= require(\"ko/editor\");", 
    "\tvar position_start\t= scimoz.currentPos;", 
    "\tvar position_new\t= position_start;", 
    "\tvar file_content\t= koEditor.getValue();", 
    "", 
    "\tvar prop_name\t= '';", 
    "\tvar prop_setter\t= ''; // E.G: $this->protected\t= $protected;", 
    "\tvar prop_definition\t= ''; // E.G: protected $property;", 
    "\tvar prop_visibility\t= '';", 
    "\tvar data\t= []", 
    "", 
    "\t/*--------   PRIVATE METHODS   ----------------------------------------------------------------------------------------*/", 
    "\t/** askParameterName", 
    "\t */", 
    "\tvar askParameterName = function()", 
    "\t{", 
    "\t\tdata = ko.interpolate.interpolateString([", 
    "\t\t\t'%(ask1:Property:)',", 
    "\t\t\t'%(ask2:Visibility:protected)',", 
    "\t\t]).split(',');", 
    "", 
    "\t\tprop_name\t= data[0].charAt(0).toLowerCase() + data[0].slice(1).trim();", 
    "\t\tprop_visibility\t= data[1];", 
    "\t};", 
    "\t/** is Cursor In Parameters Brackets E.G: fooMethod(|)", 
    "\t *  serach for ')' or '}'", 
    "\t */", 
    "\tvar isCursorInDefinition = function()", 
    "\t{", 
    "\t\tlet match = /(\\)|})/gi.exec(file_content.slice(position_start));", 
    "\t\treturn match.pop()==')';", 
    "\t};", 
    "\t/** findMethodName", 
    "\t */", 
    "\tvar findMethodName = function()", 
    "\t{", 
    "\t\tlet content_to_pos\t= file_content.slice(0, position_start);", 
    "\t\tlet reg_ex\t= /function\\s+([^\\s\\(]+)?/gim;", 
    "\t\tlet match;", 
    "\t\twhile ((match = reg_ex.exec(content_to_pos)) != null)", 
    "\t\t\tmethod_name = match.pop();", 
    "\t\t//Logger.info(method_name, 'method_name');", 
    "\t};", 
    "\t/** propertyDefinitionExists", 
    "\t */", 
    "\tvar setPropertyDefinition = function()", 
    "\t{", 
    "\t\tif(prop_visibility && !new RegExp( prop_visibility+'\\\\s+\\\\$'+prop_name ).exec(file_content))", 
    "\t\t\tprop_definition = prop_visibility+' $'+prop_name;", 
    "\t};", 
    "\t/** addToNewPosition", 
    "\t */", 
    "\tvar addToNewPosition = function(value)", 
    "\t{", 
    "\t\tposition_new += value;", 
    "\t};", 
    "\t/** replaceInFileContent", 
    "\t */", 
    "\tvar addToFileContent = function()", 
    "\t{", 
    "\t\t/** insertToFileContent", 
    "\t\t */", 
    "\t\tvar insertToFileContent = function(insert_string, position)", 
    "\t\t{", 
    "\t\t\tif(position)", 
    "\t\t\t\tfile_content = [file_content.slice(0, position), insert_string, file_content.slice(position)].join('');", 
    "\t\t};", 
    "\t\t/** getPostionOfMethodBlock", 
    "\t\t */", 
    "\t\tvar getPostionOfMethodBlock = function()", 
    "\t\t{", 
    "\t\t\treturn /{/gi.exec(file_content.slice(position_start)).index+position_start +1;", 
    "\t\t};", 
    "\t\t/** add 'ClassName $className'", 
    "\t\t*/", 
    "\t\tfunction addParam(){", 
    "\t\t\tif(!isCursorInDefinition())", 
    "\t\t\t\treturn;", 
    "\t\t\tinsertToFileContent('$'+prop_name, position_start)", 
    "\t\t\taddToNewPosition(prop_name.length + 1);", 
    "", 
    "\t\t}", 
    "\t\t/** add $this->ClassName\t= $className;", 
    "\t\t */", 
    "\t\tvar addPropertySetter = function()", 
    "\t\t{", 
    "\t\t\tprop_setter\t= '$this->'+prop_name+'\\t= $'+prop_name+';'", 
    "\t\t\tlet setter_position\t= isCursorInDefinition() ? getPostionOfMethodBlock() : position_start;", 
    "", 
    "\t\t\tinsertToFileContent((setter_position!==position_start?'\\r\\n\\t\\t':'')+ prop_setter , setter_position);", 
    "\t\t\taddToNewPosition(prop_setter.length);", 
    "\t\t};", 
    "\t\t/** add protected $className;", 
    "\t\t */", 
    "\t\tvar addPropertyDefinition = function()", 
    "\t\t{", 
    "\t\t\tif(!prop_definition)", 
    "\t\t\t\treturn;", 
    "", 
    "\t\t\tlet class_pos\t= /(class|interface|trait|abstract)[^{]+/gi.exec(file_content)", 
    "", 
    "\t\t\tinsertToFileContent( '\\r\\n\\t'+prop_definition+';\\r\\n', class_pos.index + class_pos[0].length +1)", 
    "\t\t\taddToNewPosition(prop_definition.length);", 
    "\t\t};", 
    "", 
    "\t\taddParam();", 
    "\t\taddPropertySetter();", 
    "\t\taddPropertyDefinition();", 
    "\t};", 
    "", 
    "\t/** revertPosition", 
    "\t */", 
    "\tvar revertPosition = function()", 
    "\t{", 
    "\t\t//var position_new \t= position_start + prop_name.length + prop_setter.length + 1 + (prop_definition ? prop_definition.length :0);", 
    "\t\tscimoz.currentPos\t= scimoz.anchor =  scimoz.getLineEndPosition(scimoz.lineFromPosition(position_new));", 
    "\t};", 
    "", 
    "\t/*--------   CONSTRUCT METHODS  ---------------------------------------------------------------------------------------*/", 
    "\taskParameterName();", 
    "\tif(!prop_name)", 
    "\t\treturn;", 
    "\tfindMethodName();", 
    "\tsetPropertyDefinition();", 
    "\taddToFileContent();", 
    "\tkoEditor.setValue(file_content);", 
    "\trevertPosition();", 
    "}", 
    "", 
    "", 
    "", 
    "setTimeout( function(){", 
    "\tgenerateProperty()", 
    "}, 100);", 
    "", 
    "%>", 
    "!@#_currentPos!@#_anchor"
  ], 
  "set_selection": "false", 
  "version": "1.0.12", 
  "indent_relative": "true", 
  "type": "snippet", 
  "treat_as_ejs": "true", 
  "auto_abbreviation": "true"
}