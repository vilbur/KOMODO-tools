{
  "keyboard_shortcut": "", 
  "name": "Importer", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "if( typeof ko.extensions.vilbur === 'undefined' )", 
    "\tko.extensions.vilbur = {};", 
    "\t", 
    "if( typeof ko.extensions.vilbur.markdown === 'undefined' )", 
    "\tko.extensions.vilbur.markdown = {};", 
    "", 
    "/**", 
    " *", 
    " * ", 
    " */", 
    "ko.extensions.vilbur.markdown.Importer = (function()", 
    "{", 
    "\tfunction Importer()", 
    "\t{", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "\t\t", 
    "\t\tvar koFile\t= require(\"ko/file\");", 
    "\t\tvar current_file\t= ko.views.manager.currentView.koDoc.file.path;", 
    "\t\tvar current_dir\t= koFile.dirname(current_file);", 
    "\t\t", 
    "\t\tvar sub_classes\t= {};\t\t\t", 
    "\t\tvar snippet_lines\t= [];", 
    "\t\tvar indentation\t= 0;", 
    "\t\tvar file_types\t= /\\.(php|ahk|js)$/;", 
    "\t\tvar file_type\t= '';\t\t", 
    "\t\t", 
    "", 
    "\t\t", 
    "\t\t/** Get direcory names in path", 
    "\t\t */", 
    "\t\tvar getSubDirs = function(path)", 
    "\t\t{", 
    "\t\t\treturn koFile", 
    "\t\t\t\t\t.list(path)", 
    "\t\t\t\t\t\t.filter(function(dir){", 
    "\t\t\t\t\t\t\treturn ! koFile.isFile(path+'\\\\'+dir);", 
    "\t\t\t\t\t\t});", 
    "\t\t};", 
    "\t\t/** Get directory tree", 
    "\t\t */", 
    "\t\tvar dirTree = function(path)", 
    "\t\t{", 
    "\t\t\tvar subdirs\t= getSubDirs(path);", 
    "\t\t\tvar dir_subdirs\t= {};", 
    "\t\t\t", 
    "\t\t\tif( subdirs.length  )", 
    "\t\t\t\tfor(var d=0; d<subdirs.length;d++)", 
    "\t\t\t\t\tdir_subdirs[subdirs[d]] = dirTree(path+'\\\\'+subdirs[d]); ", 
    "\t\t", 
    "\t\t\treturn subdirs.length ? dir_subdirs : null;", 
    "\t\t};", 
    "\t\t/** Get direcotries which contain file with same name", 
    "\t\t */", 
    "\t\tvar getSubClasses = function(dir_path, dir_tree)", 
    "\t\t{", 
    "\t\t\tvar sub_classes = [];", 
    "\t\t\t", 
    "\t\t\t/** fileNamedAsDirectoryExists", 
    "\t\t\t */", 
    "\t\t\tvar fileNamedAsDirectoryExists = function(dir_path)", 
    "\t\t\t{", 
    "\t\t\t\t/** fileType", 
    "\t\t\t\t */", 
    "\t\t\t\tvar setFileType = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tkoFile.list(dir_path).map(function(file){", 
    "\t\t\t\t\t\tvar file_match = file_types.exec(dir_path+'\\\\'+file); ", 
    "\t\t\t\t\t\tif (file_match)", 
    "\t\t\t\t\t\t\tfile_type = file_match.pop();", 
    "\t\t\t\t\t}); ", 
    "\t\t\t\t}; ", 
    "\t\t\t\t", 
    "\t\t\t\tif( ! file_type )", 
    "\t\t\t\t\tsetFileType();", 
    "\t\t\t\t//Logger.info(file_type, 'Importer: '+'file_type'); ", 
    "\t\t\t\tif( file_type )", 
    "\t\t\t\t\treturn koFile.exists( dir_path+'\\\\'+koFile.basename(dir_path)+'.'+file_type );\t\t\t\t\t", 
    "\t\t\t};", 
    "\t\t\t", 
    "\t\t\tfor(var key in dir_tree)", 
    "\t\t\t\tif (dir_tree.hasOwnProperty(key))", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar subdirs \t= dir_tree[key];", 
    "\t\t\t\t\tvar subdir_path\t= dir_path+'\\\\'+key;", 
    "\t\t\t", 
    "\t\t\t\t\tif( fileNamedAsDirectoryExists(subdir_path) )", 
    "\t\t\t\t\t\tsub_classes.push(subdir_path);", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( subdirs )", 
    "\t\t\t\t\t\tsub_classes.push(getSubClasses(subdir_path, subdirs));", 
    "\t\t\t\t\t", 
    "\t\t\t\t}", 
    "\t\t\t\t", 
    "\t\t\treturn sub_classes.filter(function(dir){", 
    "\t\t\t\treturn dir.length;", 
    "\t\t\t});", 
    "\t\t};", 
    "\t\t", 
    "", 
    "\t\t/** setSubClassesToSnippetLines", 
    "\t\t */", 
    "\t\tvar setSubClassesToSnippetLines = function(sub_tree, indentation)", 
    "\t\t{", 
    "\t\t\tvar indentation_added = false;", 
    "", 
    "\t\t\t/** setLine", 
    "\t\t\t */", 
    "\t\t\tvar setLine = function(path)", 
    "\t\t\t{", 
    "\t\t\t\tvar link\t= '__['+koFile.basename(path)+'](' + getRelativePath(current_dir, path)+')__';\t", 
    "\t\t\t\tsnippet_lines.push( Array(indentation).join('\\t') + '* ' + link );", 
    "\t\t\t};", 
    "", 
    "\t\t\tfor(var c=0; c<sub_tree.length;c++)", 
    "\t\t\t\tif( typeof sub_tree[c] === 'string'  ){", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tif( indentation_added===false )", 
    "\t\t\t\t\t\tindentation_added=indentation++;", 
    "\t\t\t\t\t", 
    "\t\t\t\t\tsetLine(sub_tree[c]);  ", 
    "\t\t\t\t}else", 
    "\t\t\t\t\tsetSubClassesToSnippetLines(sub_tree[c], indentation); ", 
    "\t\t};", 
    "\t\t/**", 
    "\t\t *", 
    "\t\t */", 
    "\t\tvar getRelativePath = function(fromPath, toPath)", 
    "\t\t{", 
    "\t\t\tvar nsFileFrom = Components.classes[\"@mozilla.org/file/local;1\"]", 
    "\t\t\t\t\t\t\t\t  .createInstance(Components.interfaces.nsILocalFile);", 
    "\t\t\tnsFileFrom.initWithPath(fromPath);", 
    "\t\t\tvar nsFileTo = Components.classes[\"@mozilla.org/file/local;1\"]", 
    "\t\t\t\t\t\t\t\t  .createInstance(Components.interfaces.nsILocalFile);", 
    "\t\t\tnsFileTo.initWithPath(toPath);", 
    "\t\t\treturn nsFileTo.getRelativeDescriptor(nsFileFrom);", 
    "\t\t};", 
    "", 
    "\t\tvar sub_classes = getSubClasses(current_dir, dirTree(current_dir));", 
    "\t\t//Logger.info(sub_classes, 'Importer: '+'sub_classes');", 
    "\t\tsetSubClassesToSnippetLines(sub_classes, 0);", 
    "\t\t", 
    "\t\tkomodo.view.selection = snippet_lines.join('\\n');", 
    "\t\t", 
    "\t}", 
    "\treturn Importer;", 
    "", 
    "})();", 
    "", 
    "/** Test", 
    " */", 
    "new ko.extensions.vilbur.markdown.Importer();", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": false, 
  "type": "macro", 
  "trigger": "trigger_postopen"
}