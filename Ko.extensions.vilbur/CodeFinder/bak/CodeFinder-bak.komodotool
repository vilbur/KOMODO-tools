{
  "keyboard_shortcut": "", 
  "name": "CodeFinder-bak", 
  "language": "JavaScript", 
  "trigger_enabled": 0, 
  "rank": 100, 
  "trigger": "trigger_startup", 
  "value": [
    "/**", 
    " *", 
    " *", 
    " *", 
    " */", 
    "", 
    "ko.extensions.CodeFinder = (function() {", 
    "", 
    "   \t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t//var Logger\t= new ko.extensions.Logger('CodeFinder.js');", 
    "\t//var Logger;", 
    "\t//var type;", 
    "\t//var file_content;", 
    "\t//var match_found;", 
    "\t/* THESE regExes will be searched in code, first occurrence will be taken", 
    "\t\tGROUP IS TAKEN IF PRESENTED,", 
    "\t\tit is because negative lookbehind doesn't work in JavaScript E.G: SELECT 'return' AND DO NOT SELECT '@return'", 
    "\t*/", 
    "\tvar regex_definition={", 
    "\t\tglobal:{", 
    "\t\t\t'comment':{", 
    "\t\t\t\t'dockblock':\t/\\/\\*\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/)/gi,\t// match multiline docBlock with 2 stars on start E.G: '/**'", 
    "\t\t\t\t'block':\t/\\/\\*(?:.?(?!\\*\\/))+[\\r\\n](?:.|[\\r\\n])*?(?:\\*\\/)/gi,\t// match any multiline", 
    "\t\t\t}", 
    "\t\t},", 
    "\t\tJavaScript:{", 
    "\t\t\t//'function':\t/(?:function\\s+(\\w+)|\\S+\\.prototype\\.(\\w+)|this\\.(\\w+)\\s*=\\s*\\(*function).*[\\r\\n\\s]*?{/gi,", 
    "", 
    "\t\t\t'function':{", 
    "\t\t\t\t'simple':\t/function\\s+(\\w+)\\s*\\(([^\\)]*)\\)[\\r\\n\\s]*?{/gmi,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t\t'private':\t/var\\s+(\\w+)\\s*=\\s*\\(*\\s*function\\s*\\(([^\\)]*)\\).*[\\r\\n\\s]*?{/gi,\t// match fn in variable\tE.G: 'this.fnName = (function (parameters){' OR 'var fnName = function (parameters){' etc...", 
    "\t\t\t\t'public':\t/this\\.(\\w+)\\s*=\\s*\\(*\\s*function\\s*\\(([^\\)]*)\\).*[\\r\\n\\s]*?{/gi,\t// match fn in variable\tE.G: 'this.fnName = (function (parameters){' OR 'var fnName = function (parameters){' etc...", 
    "\t\t\t\t'prototype':\t/(\\w+\\.prototype\\.(\\w+)\\s*=\\s*function\\s*\\(([^\\)]*)\\).*[\\r\\n\\s]*?{)/gi,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t},", 
    "", 
    "\t\t\t//'test':{", 
    "\t\t\t//\t'test1':\t/test1/i,\t// match function\tE.G: 'function fnName(parameters){'", 
    "\t\t\t//\t'test2':\t/test2/i,\t// match fn prototype\tE.G: 'fooClass.prototye.fnName = function (parameters){'", 
    "\t\t\t//},", 
    "\t\t\t'return':\t/[\\s](return\\s+.*)/gi,", 
    "\t\t\t//'return':\t/[\\s](return\\s+.*?(?=[\\r\\n\\t;]))/gi, // clean match, remove unwanted characters on end", 
    "\t\t\t'variable':\t/[\\s](var\\s*\\w+\\s*=\\s*.*)/gi,", 
    "\t\t},", 
    "\t\tPHP:{", 
    "\t\t\t\t///(function\\s+\\S+.*[\\r\\n]?{)/gi,\t// function fooClassic(", 
    "\t\t},", 
    "\t\tAutohotkey:{", 
    "\t\t}", 
    "\t};", 
    "\t/** CONSTRUCT", 
    "\t */", 
    "\tfunction CodeFinder(){", 
    "", 
    "\t\t/*------   PROPERTIES PRIVATE   -------------------------------------------------------------------------------------------------*/", 
    "\t\tvar _this\t= this; // make private functions access to public PROPERTIES and METHODS()", 
    "\t\tvar Logger\t= ko.extensions.Logger_v3 ? new ko.extensions.Logger_v3(this).clear(true).off(false) : require('ko/console');", 
    "", 
    "\t\tvar scimoz\t= ko.views.manager.currentView.scimoz;", 
    "\t\tvar lang\t= ko.views.manager.currentView.languageObj.name;", 
    "\t\tvar currentPos\t= scimoz.currentPos;", 
    "\t\tvar file_content\t= _getFileContent();", 
    "\t\tvar regeex_search\t= {};", 
    "\t\tvar searh_for\t= [];", 
    "", 
    "\t\t/*------   PROPERTIES PUBLIC   -------------------------------------------------------------------------------------------------*/", 
    "\t\tthis.options\t= { type:'', occurence:'' }; // DELETE THIS", 
    "", 
    "\t\tthis.match_found\t= {};", 
    "\t\tthis.matches_all\t= {}; // all matches in file, match_object = {'start':1, 'end':99, 'rx_key':'function.private', 'match':function fnName(){...}};", 
    "", 
    "\t\tif( lang=='Node.js' )", 
    "\t\t\tlang='JavaScript';", 
    "", 
    "\t\t/*------   PUBLIC METHODS   -------------------------------------------------------------------------------------------------*/", 
    "\t\t/** language", 
    "\t\t */", 
    "\t\tthis.language = function( language )", 
    "\t\t{", 
    "\t\t\tlang = language;", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** searchFor", 
    "\t\t */", 
    "\t\tthis.searchFor = function(keys)", 
    "\t\t{", 
    "\t\t\tsearh_for = typeof keys !== 'object' ? [keys] : keys;", 
    "", 
    "\t\t\t//searh_for = ['function.public','function.private']; // DEBUG", 
    "\t\t\tsearh_for = ['function'];// DEBUG", 
    "\t\t\t//searh_for = ['function.prototype'];// DEBUG", 
    "", 
    "", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "\t\t/** findCode", 
    "\t\t *", 
    "\t\t * @param\tstring\ttype\tof searched code, dot notated key from array regex_definition\tE.G: 'function.private'", 
    "\t\t * @param\tstring\toccurence\t'void|first|last|prev|next' find occurence of given type", 
    "\t\t * @param\tstring\tdirection\t'void|next|prev' search in whole file, after ('next'), or before ('prev') cursor", 
    "\t\t *", 
    "\t\t * @return\tobject\tmatch_found", 
    "\t\t */", 
    "\t\tthis.findCode = function()", 
    "\t\t{", 
    "\t\t\t_setRegExSearch();", 
    "\t\t\t_setMatchesAll();", 
    "\t\t\t//_matchesAllSort();", 
    "\t\t\t//_setMatchFound();", 
    "\t\t\t//_restoreInitPosition();", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/** getFirstMatchContent", 
    "\t\t */", 
    "\t\tthis.getMatchContent = function()", 
    "\t\t{", 
    "\t\t\t//if(this.match_found)", 
    "\t\t\t\tvar match_found_content = this.match_found ? scimoz.getTextRange(this.match_found.start, this.match_found.end ) : null;", 
    "\t\t\tLogger.info(match_found_content, this.options.type.split('.').pop()).force();", 
    "\t\t\t//Logger.info('match_found_content').force();", 
    "\t\t\treturn match_found_content;", 
    "\t\t};", 
    "", 
    "\t\t///** getMatchType", 
    "\t\t// */", 
    "\t\t//this.getMatchType = function(){", 
    "\t\t//\treturn this.match_found;", 
    "\t\t//};", 
    "\t\t/** getMatchFound", 
    "\t\t */", 
    "\t\tthis.getMatchFound = function()", 
    "\t\t{", 
    "\t\t\tLogger.info(this.match_found, 'getMatchFound.match_found');", 
    "\t\t\t\t\t//.force()", 
    "\t\t\treturn this.match_found;", 
    "\t\t};", 
    "", 
    "\t\t/** selectFirstMatch", 
    "\t\t */", 
    "\t\tthis.selectMatch = function()", 
    "\t\t{", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus(); }", 
    "\t\t\tif(this.match_found)", 
    "\t\t\t\tscimoz.setSel( this.match_found.end, this.match_found.start );", 
    "\t\t\t\t//scimoz.setSel(this.match_found.start, this.match_found.end );", 
    "", 
    "\t\t\t//else", 
    "\t\t\t//\tLogger.warn('CodeFinder.this.match_found').variable('');", 
    "\t\t\treturn this;", 
    "\t\t};", 
    "", 
    "\t\t/*------   PRIVATE METHODS    -------------------------------------------------------------------------------------------------*/", 
    "", 
    "\t\t/** get used Regex objects by options.type", 
    "\t\t *", 
    "\t\t * get key by current Language", 
    "\t\t *", 
    "\t\t */", 
    "\t\tfunction _setRegExSearch()", 
    "\t\t{", 
    "\t\t\tvar regex_by_lang = {};", 
    "", 
    "\t\t\t/** Get RegExes by lang and add globals", 
    "\t\t\t */", 
    "\t\t\tvar setRegexByLang = function()", 
    "\t\t\t{", 
    "\t\t\t\tregex_by_lang = regex_definition[lang];", 
    "", 
    "\t\t\t\t/** mergeGlobals", 
    "\t\t\t\t */", 
    "\t\t\t\tvar mergeGlobals = function()", 
    "\t\t\t\t{", 
    "\t\t\t\t\tfor(var key_global in regex_definition.global)", 
    "\t\t\t\t\t\tif (regex_definition.global.hasOwnProperty(key_global))", 
    "\t\t\t\t\t\t\tregex_by_lang[key_global] = regex_definition.global[key_global];", 
    "\t\t\t\t};", 
    "\t\t\t\tmergeGlobals();", 
    "\t\t\t};", 
    "", 
    "\t\t\t/** get object item via dot notation", 
    "\t\t\t */", 
    "\t\t\tfunction _getRegexItemByDotNotation(dotNot)", 
    "\t\t\t{", 
    "\t\t\t\tobj\t= regex_by_lang;", 
    "\t\t\t\tdotNot\t= dotNot.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties", 
    "\t\t\t\tdotNot = dotNot.replace(/^\\./, '');           // strip a leading dot", 
    "\t\t\t\tvar arr_keys = dotNot.split('.');", 
    "\t\t\t\tfor (var k = 0, n = arr_keys.length; k < n; ++k) {", 
    "\t\t\t\t\tvar key = arr_keys[k];", 
    "\t\t\t\t\tif (key in obj)", 
    "\t\t\t\t\t\tobj = obj[key];", 
    "\t\t\t\t\telse", 
    "\t\t\t\t\t\treturn;", 
    "\t\t\t\t}", 
    "\t\t\t\treturn obj;", 
    "\t\t\t}", 
    "\t\t\tvar flattenObject = function(obj)", 
    "\t\t\t{", 
    "\t\t\t\tvar toReturn = {};", 
    "", 
    "\t\t\t\tfor (var i in obj) {", 
    "\t\t\t\t\tif (obj.hasOwnProperty(i))", 
    "\t\t\t\t\t\tif ( obj[i].constructor.name !== 'RegExp') {", 
    "\t\t\t\t\t\t\tvar flatObject = flattenObject(obj[i]);", 
    "\t\t\t\t\t\t\tfor(var x in flatObject)", 
    "\t\t\t\t\t\t\t\tif (flatObject.hasOwnProperty(x))", 
    "\t\t\t\t\t\t\t\ttoReturn[i + '.' + x] = flatObject[x];", 
    "\t\t\t\t\t\t} else", 
    "\t\t\t\t\t\t\ttoReturn[i] = obj[i];", 
    "\t\t\t\t}", 
    "\t\t\t\treturn toReturn;", 
    "\t\t\t};", 
    "", 
    "", 
    "\t\t\tsetRegexByLang();", 
    "", 
    "\t\t\tif( searh_for.length === 0 )", 
    "\t\t\t\tregeex_search = regex_by_lang;", 
    "\t\t\telse", 
    "\t\t\t\tfor(var s=0; s<searh_for.length;s++)", 
    "\t\t\t\t\tregeex_search[searh_for[s]] = _getRegexItemByDotNotation(searh_for[s]);", 
    "", 
    "\t\t\tregeex_search = flattenObject(regeex_search);", 
    "\t\t\t//Logger.info(regex_by_lang, 'regex_by_lang');", 
    "\t\t\t//Logger.info(regeex_search, 'regeex_search');", 
    "\t\t}", 
    "", 
    "\t\t/** find all matches by given parameters.", 
    "\t\t *", 
    "\t\t * find matches or loop sub object of regex_definition and find multiple types at once", 
    "\t\t *", 
    "\t\t * @param object|RegEx regex is RegEx object or subobject from array regex_definition", 
    "\t\t *", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tfunction _setMatchesAll()", 
    "\t\t{", 
    "", 
    "\t\t\t/** find all matches, loop them and set to match_all object.", 
    "\t\t\t *", 
    "\t\t\t *\t!!! GET REGEX !!! core element, this found each regex", 
    "\t\t\t *", 
    "\t\t\t * @param\tobject\tregex\tis RegExp expression or subobject from array regex_definition", 
    "\t\t\t * @param\tstring\trx_key\tis dot notation key of regex from var regexe E.G: 'function.private'", 
    "\t\t\t */", 
    "\t\t\tfunction _findMatches(regex, search_key='')", 
    "\t\t\t{", 
    "\t\t\t\t/** RegEx match all", 
    "\t\t\t\t\t@return array of all matches", 
    "\t\t\t\t */", 
    "\t\t\t\tvar matchAll = function( string, regEx )", 
    "\t\t\t\t{", 
    "\t\t\t\t\tvar matches_all = [];", 
    "\t\t\t\t\twhile((match = regEx.exec(string)) !== null) {", 
    "\t\t\t\t\t\t//Logger.info(match, 'match'\t);", 
    "\t\t\t\t\t\tmatches_all.push(match);", 
    "\t\t\t\t\t\t//string = string.substring(match.index+1); //this is not the same as /g", 
    "\t\t\t\t\t\tstring = string.substring(match.index +match[0].length ); //this is not the same as /g", 
    "", 
    "\t\t\t\t\t\tregEx=RegExp(regEx.source,regEx.flags);", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\treturn matches_all;", 
    "\t\t\t\t};", 
    "", 
    "\t\t\t\treturn matchAll( file_content, regex );", 
    "\t\t\t}", 
    "", 
    "\t\t\tfor(var key in regeex_search)", 
    "\t\t\t\tif (regeex_search.hasOwnProperty(key))", 
    "\t\t\t\t\t _this.matches_all[key] = _findMatches( regeex_search[key]) ;", 
    "", 
    "\t\t\tLogger.info( _this.matches_all, ' _this.matches_all');", 
    "\t\t}", 
    "", 
    "\t\t/** get first item from this.matches_all", 
    "\t\t * @return null", 
    "\t\t */", 
    "\t\tfunction _setMatchFound()", 
    "\t\t{", 
    "\t\t\tvar matches_all_keys\t= Object.keys(_this.matches_all);", 
    "\t\t\t////Logger.info(matches_all_keys);", 
    "\t\t\tswitch (_this.options.occurence) {", 
    "\t\t\t\tcase 'first':", 
    "\t\t\t\t\tkey_used = matches_all_keys[0];break;", 
    "\t\t\t\tcase 'last':", 
    "\t\t\t\t\tkey_used = matches_all_keys.pop();break;", 
    "\t\t\t\tcase 'prev':", 
    "\t\t\t\t\tkey_used = _getClosestKey(matches_all_keys, currentPos, 'down');break;", 
    "\t\t\t\tcase 'next':", 
    "\t\t\t\t\tkey_used = _getClosestKey(matches_all_keys, currentPos, 'up');break;", 
    "\t\t\t\tdefault:", 
    "\t\t\t\t\tkey_used = _getClosestKey(matches_all_keys, currentPos);", 
    "\t\t\t}", 
    "\t\t\t_this.match_found =  _this.matches_all[key_used];", 
    "\t\t}", 
    "", 
    "\t\t/** set single match object to var match_all.", 
    "\t\t *", 
    "\t\t * @param\tarray\tmatch result object of RegEx match: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match#Return_value", 
    "\t\t * @param\tstring\trx_key\tis dot notation key of regex from var regexe E.G: 'function.private'", 
    "\t\t*/", 
    "\t\tfunction _setMatch(match, rx_key)", 
    "\t\t{", 
    "", 
    "\t\t\tvar match_full\t= match[0];", 
    "\t\t\tvar match_group\t= match.pop();", 
    "\t\t\t//var index_start\t= currentPos + match.index + ( match_full.length - match_group.length ); // correct group start position", 
    "\t\t\tvar index_start\t= match.index + ( match_full.length - match_group.length ); // correct group start position", 
    "\t\t\tvar index_end\t= _getMatchEndPosition(match);", 
    "\t\t\t_this.matches_all[index_start] = {'start':index_start, 'end':index_end, 'rx_key':rx_key, 'match':match_group};", 
    "\t\t}", 
    "", 
    "\t\t/**", 
    "\t\t * FIND CLOSEST NUMBER IN ARRAY", 
    "\t\t *", 
    "\t\t * @param\tarray\tnumbers\tSORTED array for searching", 
    "\t\t * @param\tnumber\tnum\tvalue for search", 
    "\t\t * @param\tmode\tstring\t'void|down|up'\tfind ABSOLUTE closest, 'down' find closest but lower number, 'up' find closest but higher number", 
    "\t\t *", 
    "\t\t\tvar numbers\t= [2, 5, 12, 13];", 
    "\t\t\tvar closest_absolute\t= getClosestNumber(arr, 7);", 
    "\t\t\tvar closest_lower\t= getClosestNumber(arr, 7, 'down');", 
    "\t\t\tvar closest_upper\t= getClosestNumber(arr, 7, 'up');", 
    "\t\t */", 
    "\t\tfunction _getClosestKey(matches_all_keys, num, mode=''){", 
    "", 
    "\t\t\tvar diff=1000;", 
    "\t\t\tvar result;", 
    "\t\t\tfor(var k=0; k<matches_all_keys.length;k++) {", 
    "", 
    "\t\t\t\tvar m;", 
    "\t\t\t\t/* GET ABSOLUTE CLOSEST NUMBER*/", 
    "\t\t\t\tif(mode ===''){", 
    "\t\t\t\t\tm = Math.abs(num-matches_all_keys[k]);", 
    "\t\t\t\t\tif(m<diff){", 
    "\t\t\t\t\t\tdiff=m;", 
    "\t\t\t\t\t\tresult=matches_all_keys[k];", 
    "\t\t\t\t\t}", 
    "", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tm = num-matches_all_keys[k];", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER LOWER */", 
    "\t\t\t\t\tif( mode ==='down' && m>0 )", 
    "\t\t\t\t\t\tresult=matches_all_keys[k];", 
    "", 
    "\t\t\t\t\t/* GET CLOSEST NUMBER HIGHER */", 
    "\t\t\t\t\telse if( mode ==='up' && m<0 )", 
    "\t\t\t\t\t\treturn matches_all_keys[k];", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t\treturn result;", 
    "\t\t}", 
    "", 
    "\t\t/** FIND CLOSING BRACKET if opening bracket is find on the end of string", 
    "\t\t *", 
    "\t\t * @param\tstring\tfile_content\tpart of file file_content", 
    "\t\t * @param\tint\tstart_pos\tstart position of param file_content", 
    "\t\t *", 
    "\t\t * @return\tinteger\tend position of closing bracket OR end postion of given file_content", 
    "\t\t */", 
    "\t\tfunction _getMatchEndPosition(match_obj)", 
    "\t\t{", 
    "", 
    "\t\t\tvar match_content\t= match_obj[0];", 
    "", 
    "\t\t\tif ( match_content.match(/[{\\(\\[]\\s*$/gi) !== null ) {", 
    "", 
    "\t\t\t\t/* GO TO OPEN BRACKET ON THE END OF MATCH */", 
    "\t\t\t\tscimoz.currentPos = match_obj.index + match_content.length;", 
    "\t\t\t\t//scimoz.currentPos = match_obj.index + match_content.length + 1;", 
    "\t\t\t\tko.commands.doCommand('cmd_jumpToMatchingBrace');", 
    "", 
    "\t\t\t\treturn _getEndingCharacter(match_content, scimoz.currentPos + 1);\t// Add 1 to position, because of position AFTER bracket\tis needed", 
    "\t\t\t\t//return scimoz.currentPos + 1;", 
    "\t\t\t}", 
    "\t\t\treturn match_obj.index + match_content.length;", 
    "\t\t}", 
    "", 
    "\t\t/** FIND EOL character after bracket // try to find ';' OR ');'", 
    "\t\t *", 
    "\t\t * @return\tinteger\tposition of closing bracket and EOL character if presented", 
    "\t\t*/", 
    "\t\tfunction _getEndingCharacter(match_content, end_pos)", 
    "\t\t{", 
    "", 
    "\t\t\tif (lang.match(/JavaScript|PHP/gi)) {", 
    "\t\t\t\t/* exception if javascript function declaration wrapped in '()' E.G: 'var fnName = (function() {' */", 
    "\t\t\t\tvar rx_ending_character\t= match_content.match(/\\(\\s*function/gi) ? /^[\\r\\n\\s]*\\)[\\r\\n\\s]*;*/ : /^[\\r\\n\\s]*;/;", 
    "\t\t\t\tvar match_ending_char\t= scimoz.getTextRange( end_pos, scimoz.textLength).match(rx_ending_character);", 
    "", 
    "\t\t\t\tif (match_ending_char)", 
    "\t\t\t\t\treturn end_pos + match_ending_char.index + match_ending_char[0].replace(/\\s+$/gi, '').length; // remove WhiteSpace on end of selection", 
    "\t\t\t}", 
    "\t\t\treturn end_pos;", 
    "\t\t}", 
    "", 
    "\t\t/** _getContentAfterCursor", 
    "\t\t * @param string direction 'next|prev' get file file_content BEFORE or AFTER cursor, OR get all file contents if EMPTY", 
    "\t\t */", 
    "\t\tfunction _getFileContent()", 
    "\t\t{", 
    "\t\t\treturn require(\"ko/editor\").getValue();", 
    "\t\t}", 
    "\t\t/** _matchesAllSort", 
    "\t\t */", 
    "\t\tfunction _matchesAllSort()", 
    "\t\t{", 
    "\t\t\tvar matches_sorted = {};", 
    "\t\t\tvar keys_all = Object.keys(_this.matches_all).sort(function(e1, e2) { return e1 - e2; });", 
    "", 
    "\t\t\tfor(var k=0; k<keys_all.length;k++) {", 
    "\t\t\t\tmatches_sorted[keys_all[k]] = _this.matches_all[keys_all[k]];", 
    "\t\t\t}", 
    "", 
    "\t\t\t_this.matches_all = matches_sorted;", 
    "\t\t}", 
    "", 
    "\t\t/** _restoreInitPosition", 
    "\t\t */", 
    "\t\tfunction _restoreInitPosition()", 
    "\t\t{", 
    "\t\t\tscimoz.currentPos\t= currentPos;", 
    "\t\t\tscimoz.anchor\t= currentPos;", 
    "\t\t\tscimoz.scrollCaret();", 
    "\t\t}", 
    "", 
    "\t}/*------ END OF CONSTRUCTOR -------------------------------------------------------------------------------------------------*/", 
    "", 
    "", 
    "", 
    "\t///** _getRegExMatch", 
    "\t// */", 
    "\t//CodeFinder.prototype._getRegExMatch = function(key, regex){", 
    "\t//\tvar match_string = this.file_content.after.match(regex);", 
    "\t//\tif (match_string)", 
    "\t//\t\tthis.matches_all[key] = match_string[0];", 
    "\t//};", 
    "\t/*------   END   -------------------------------------------------------------------------------------------------*/", 
    "   return CodeFinder;", 
    "})();", 
    "", 
    "", 
    "", 
    "var current_filename = ko.views.manager.currentView.koDoc.file.path.split(/\\/+/g).pop();", 
    "if(current_filename === 'TestPhpDoc.js'){", 
    "", 
    "", 
    "\t\tvar _CodeFinder\t= new ko.extensions.CodeFinder();", 
    "", 
    "\t\t//_CodeFinder.findCode('function','next')", 
    "\t\t_CodeFinder", 
    "\t\t.searchFor('function')", 
    "\t\t.findCode();", 
    "", 
    "\t\t//.selectMatch();", 
    "\t\t//_CodeFinder.findCode('','next').selectMatch();", 
    "", 
    "//\t//_CodeFinder.findCode();", 
    "//\t//_CodeFinder.findCode('function','');", 
    "//\t//_CodeFinder.findCode('function','next');", 
    "//\t//_CodeFinder.findCode('function','prev');", 
    "//\t//_CodeFinder.findCode('function','first');", 
    "//\t//_CodeFinder.findCode('function','last');", 
    "//", 
    "//\t//_CodeFinder.findCode('','next');", 
    "//\t//_CodeFinder.findCode('function','next');", 
    "//\t//_CodeFinder.findCode('return','next');", 
    "//\t//_CodeFinder.findCode('function.private','next');", 
    "//", 
    "//\t//var match_comment = _CodeFinder.findCode('global.comment.dockblock','next');", 
    "//\tvar match_comment = _CodeFinder.findCode('global.comment','next');", 
    "//", 
    "//", 
    "//\t_CodeFinder.selectMatch();", 
    "//\t//var Logger\t= new ko.extensions.Logger('CodeFinder.js');", 
    "//\t//var modes = ['', 'next','prev','first','last'];", 
    "//", 
    "//\t//for(var m=1; m<=modes.length;m++) {", 
    "//\t//\tvar mode = modes[m-1];", 
    "//\t//\tsetTimeout( function(){", 
    "//\t//\t\t_CodeFinder.findCode('function',mode);", 
    "//\t//\t\t_CodeFinder.selectMatch();", 
    "//\t//\t\t//Logger.info(mode).log();", 
    "//\t//\t}, (m*1500));", 
    "//\t//}", 
    "}", 
    "//var _CodeFinder\t= new ko.extensions.CodeFinder();"
  ], 
  "version": "1.0.12", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/tick.png"
}