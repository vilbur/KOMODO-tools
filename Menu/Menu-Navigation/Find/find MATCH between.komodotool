{
  "keyboard_shortcut": "Ctrl+Shift+W", 
  "name": "find MATCH between", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "/**", 
    "*\tfind MATCH between", 
    "*", 
    "*    select string text between {} or [] or () or '' or \"\"", 
    "*    or select 'namespacestring' e.g:  \\App\\Services\\Database\\CollectionLinkzzzzzzzz", 
    "*", 
    "*", 
    "*", 
    "*", 
    "**/", 
    "var match;", 
    "", 
    "var regexes = {", 
    "\t//string:\"['\\\\\\\"][^'\\\\\\\"]+['\\\\\\\"]\",", 
    "\twhitespace:\"\\\\s+\",", 
    "\tstring    :\"['\\\\\\\"][^'\\\\\\\"]+['\\\\\\\"]\",   // SELECT between quotes E.G. SELECT foo IN 'foo' OR \"foo\"", 
    "\tvariable  :\"\\\\$\\\\w+\",                   // $variable", 
    "\tvar_batch :\"%\\\\S+%\",                    // %variable%", 
    "\tbrackets  :\"^\\\\(\\\\s*(\\\\S\\\\s*)+\\\\)\",     // text between all bracket types E.G.: ( foo) OR [ foo,bar ] OR {foo, bar}", 
    "\tget       :\"get(\\\\S+)\",\t\t\t\t\t// SELECT \"get\" IN \"getFoo\"", 
    "\tset       :\"set(\\\\S+)\",\t\t\t\t\t// SELECT \"set\" IN \"setFoo\"", 
    "", 
    "};", 
    "", 
    "", 
    "komodo.assertMacroVersion(3);", 
    "ko.views.manager.currentView.scimoz.beginUndoAction()", 
    "try {", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\tvar selectedText = scimoz.selText;", 
    "\tvar wordCursor   = ko.interpolate.getWordUnderCursor(scimoz);", 
    "\tif ( selectedText != ''){", 
    "\t\tvar start = scimoz.anchor;", 
    "\t\tvar end   = scimoz.currentPos;", 
    "\t}", 
    "", 
    "\tif ( selectedText == '' && wordCursor != '' ) {", 
    "\t\t/*\tSELECT WORD UNDER CURSOR\t*/", 
    "\t\t//alert('SELECT WORD UNDER CURSOR');", 
    "\t\tselectWordUnderCursor(\"start\")", 
    "\t\tvar selectedText = scimoz.selText;", 
    "\t}", 
    "", 
    "\tif (selectedText!=\"\") {", 
    "\t\tvar seletionType = findSelectionType(selectedText.trim())", 
    "\t\t//alert('seletionType: '+seletionType);", 
    "", 
    "\t\tif (seletionType==\"variable\") {", 
    "\t\t\tselectOffset( 1 , 0);", 
    "", 
    "\t\t}", 
    "\t\telse if ( seletionType==\"brackets\" ) {", 
    "\t\t\t//alert('brackets');", 
    "\t\t\t//selectOffset( 1, -1 );", 
    "\t\t\tfindInSelection('[\\\\$\\\\w\\\\d]+')", 
    "", 
    "\t\t} else if ( seletionType==\"string\" ) {", 
    "\t\t\t//alert('string');", 
    "\t\t\tselectOffset( 1, -1 );", 
    "\t\t}", 
    "\t\telse if ( seletionType==\"var_batch\" ) {", 
    "\t\t\t//alert('var_batch');", 
    "\t\t\tselectOffset( 1, -1 );", 
    "\t\t}", 
    "\t\telse if ( seletionType==\"set\" || seletionType==\"get\"  ) {", 
    "\t\t\t//alert('TEST');", 
    "\t\t\t//alert(' selectedText.lenght: '+ selectedText.length );", 
    "\t\t\tselectOffset( 0,   - selectedText.length + 3 );", 
    "\t\t}", 
    "", 
    "\t}", 
    "\telse if ( wordCursor == '' ) {", 
    "\t\t/*\tif empty SPACE\t*/", 
    "\t\tko.commands.doCommand('cmd_wordLeft')", 
    "\t\t//ko.find.findNextInMacro(window, 0, '\\\\s+', 2, 0, false, false, find, false, true);", 
    "\t\tfindInSelection('\\\\s+')", 
    "\t}", 
    "", 
    "", 
    "", 
    "}", 
    "", 
    "finally { ko.views.manager.currentView.scimoz.endUndoAction()}", 
    "", 
    "function findInSelection(string) {", 
    "\tko.find.findNextInMacro(window, 0, string, 2, 0, false, false, find, false, true);", 
    "}", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function selectOffset( offsetStart, offsetEnd ) {", 
    "", 
    "\tvar selectedText = scimoz.selText;", 
    "\tvar start = scimoz.anchor;", 
    "\tvar end   = scimoz.currentPos;", 
    "", 
    "", 
    "\t/*\tSWITCH variable start & variable end , IF start is more then end\t*/", 
    "\tif (start>end)  end = [start, start = end][0];", 
    "", 
    "", 
    "\tvar left_whitespace = selectedText.length - selectedText.trimLeft().length;", 
    "\tvar right_whitespace = selectedText.length - selectedText.trimRight().length;", 
    "", 
    "", 
    "", 
    "\tscimoz.anchor     = (start + left_whitespace )  + offsetStart;", 
    "\tscimoz.currentPos = (end   - right_whitespace ) + offsetEnd;", 
    "", 
    "\t/*    ADD TO CLIPBOARD    */", 
    "\tko.run.output.endSession();", 
    "\tko.run.runEncodedCommand( window, \"set /p=\\\"\"+scimoz.selText+\"\\\"<nul|clip\")", 
    "", 
    "}", 
    "", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function findSelectionType(selectedText) {", 
    "\t//alert( 'findSelectionType' );", 
    "\tscimoz = ko.views.manager.currentView.scimoz;", 
    "\tif( typeof selectedText == 'undefined' ) var selectedText = scimoz.selText;", 
    "", 
    "\t//alert('selectedText: '+selectedText);", 
    "\tfor (var key in regexes) {", 
    "", 
    "\t\tvar regex_regex = new RegExp( \"^\"+regexes[key]+\"$\", \"gi\");", 
    "\t\t//var regex_regex = /(.*)/gi;", 
    "\t\t    match =  regex_regex.exec(selectedText);", 
    "\t\tif (match) {", 
    "\t\t\t//alert ( \"TEST \\n\" + match + '\\nKEY: '+ key )", 
    "\t\t\treturn  key", 
    "\t\t}", 
    "\t}", 
    "}", 
    "", 
    "", 
    "/**", 
    "*", 
    "**/", 
    "function selectWordUnderCursor( cursor_position=\"start\") {", 
    "\tvar scimoz = ko.views.manager.currentView.scimoz;", 
    "\tvar start = scimoz.wordStartPosition( scimoz.currentPos, true );", 
    "\tvar end = scimoz.wordEndPosition( scimoz.currentPos, true );", 
    "\tif ( cursor_position==\"start\") {", 
    "\t\tscimoz.anchor = end;", 
    "\t\tscimoz.currentPos = start;", 
    "", 
    "\t}else {", 
    "\t\tscimoz.anchor = start;", 
    "\t\tscimoz.currentPos = end;", 
    "\t}", 
    "}", 
    "", 
    "", 
    "", 
    "\t//{", 
    "\t\t//if ( selectedText.match(/^\\$\\S+/g) != null ) {", 
    "\t\t//\t/*\tIF variabl \"$fooVar\" is selected\t*/", 
    "\t\t//\talert('$fooVar');", 
    "\t\t//\tscimoz.anchor = end;", 
    "\t\t//\tscimoz.currentPos = start + 1;", 
    "\t\t//", 
    "\t\t//}else {", 
    "", 
    "", 
    "\t\t\t//var regex_string = /\\(.*\\)/gi;", 
    "\t\t\t//var match =  regex_string.exec(selectedText);", 
    "\t\t\t//if (match) {", 
    "\t\t\t//\tscimoz.anchor = start - 1;", 
    "\t\t\t//\tscimoz.currentPos = end + 1;", 
    "", 
    "\t\t\t//}else {", 
    "\t\t\t//\t/* GO AND FIND CHARACTER */", 
    "\t\t\t//\tvar findNextCharacters = [", 
    "\t\t\t//\t\t'\\'',", 
    "\t\t\t//\t\t'\"',", 
    "\t\t\t//\t\t'\\\\\\)',", 
    "\t\t\t//\t\t'\\\\\\]',", 
    "\t\t\t//\t\t'}',", 
    "\t\t\t//\t\t'%',", 
    "\t\t\t//\t];", 
    "\t\t\t//\t/* CHECK CURRENT CHARACTER if to findNextCharacters */", 
    "\t\t\t//\tvar currentChar = scimoz.selText;", 
    "\t\t\t//\talert('currentChar: '+currentChar );", 
    "\t\t\t//\tvar regex_string = new RegExp('\\\\S['+findNextCharacters.join('')+']', \"gi\");", 
    "\t\t\t//\tvar currentCharacter_match =  regex_string.exec(currentChar);", 
    "\t\t\t//\tif ( currentCharacter_match ) {", 
    "\t\t\t//\t\tko.commands.doCommand('cmd_right')", 
    "\t\t\t//\t}", 
    "\t\t\t//\t/*    FIND NEXT OCCURENCE    */", 
    "\t\t\t//\tko.find.findNextInMacro( window, 0, '['+findNextCharacters.join('')+']', 2, 0, false, false, find, false, true );", 
    "\t\t\t//\t/*    go left until whitespace or quote or bracket    */", 
    "\t\t\t//\tvar foundedChar = scimoz.selText;", 
    "\t\t\t//\t/* GO AND FIND NEXT OPPOSITE CHARACTER */", 
    "\t\t\t//\tswitch (foundedChar) {", 
    "\t\t\t//\t\tcase '\\'':prevChar = '\\'';break;", 
    "\t\t\t//\t\tcase '\"' :prevChar = '\"';break;", 
    "\t\t\t//\t\tcase ')' :prevChar = '(';break;", 
    "\t\t\t//\t\tcase ']' :prevChar = '[';break;", 
    "\t\t\t//\t\tcase '}' :prevChar = '{';break;", 
    "\t\t\t//\t\tcase '%' :prevChar = '%';break;", 
    "\t\t\t//\t\tdefault:", 
    "\t\t\t//\t\tprevChar =  null;", 
    "\t\t\t//\t}", 
    "\t\t\t//", 
    "\t\t\t//\tif (prevChar) {", 
    "\t\t\t//\t\tif ( foundedChar==')' || foundedChar=='}' || foundedChar=='}') {", 
    "\t\t\t//", 
    "\t\t\t//\t\t\t/*    SELECT MATCHING BRACE IF BRACE FOUNDED    */", 
    "\t\t\t//\t\t\tko.commands.doCommand('cmd_selectToMatchingBrace')", 
    "\t\t\t//", 
    "\t\t\t//\t\t}else {", 
    "\t\t\t//\t\t\t/*    FIND OPPOSITE CHARACTER mANUALY    */", 
    "\t\t\t//\t\t\tvar matchFound = false;", 
    "\t\t\t//\t\t\tr = 0;", 
    "\t\t\t//\t\t\twhile ( !matchFound && r<200 ) {", 
    "\t\t\t//\t\t\t\tko.commands.doCommand('cmd_selectCharPrevious')", 
    "\t\t\t//\t\t\t\tvar selectedText = scimoz.selText;", 
    "\t\t\t//\t\t\t\tvar matchFound = selectedText[0]==prevChar;", 
    "\t\t\t//\t\t\t\tr++", 
    "\t\t\t//\t\t\t}", 
    "\t\t\t//\t\t\t/* SELECT SELECTIO BACKWORD< SO CURSOR WILL STAY LEFT*/", 
    "\t\t\t//\t\t\tvar foundedSelection = scimoz.selText;", 
    "\t\t\t//\t\t\tko.commands.doCommand('cmd_left')", 
    "\t\t\t//\t\t\tfor(var i=0; i<=foundedSelection.length;i++) {", 
    "\t\t\t//\t\t\t\tko.commands.doCommand('cmd_selectCharNext')", 
    "\t\t\t//\t\t\t}", 
    "\t\t\t//\t\t}", 
    "\t\t\t//\t}", 
    "\t\t\t//}", 
    "\t\t//}", 
    "\t//}"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": false, 
  "type": "macro"
}