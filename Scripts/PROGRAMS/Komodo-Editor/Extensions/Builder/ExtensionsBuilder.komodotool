{
  "keyboard_shortcut": "", 
  "name": "ExtensionsBuilder", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "/** Include namespace.js", 
    " * Setup hierarchy of objects where scripts are applied", 
    " */", 
    "if( typeof ko.extensions.vilbur.ExtensionsBuilderContainer === 'undefined'  )", 
    "\tko.extensions.vilbur.ExtensionsBuilderContainer =", 
    "\t{", 
    "\t\tProject:\t{},", 
    "\t\tSync:\t{},", 
    "\t\tBuild:\t{},", 
    "\t\tInstall:\t{},", 
    "\t};", 
    "", 
    "/** Allow create instances of object", 
    " * @return\tobject copy of ExtensionsBuilderContainer\t ", 
    " */", 
    "ko.extensions.vilbur.ExtensionsBuilder = (function()", 
    "{", 
    "\tfunction ExtensionsBuilder()", 
    "\t{", 
    "\t\tvar new_instance;", 
    "\t\t//return Object.assign({}, ko.extensions.vilbur.ExtensionsBuilderContainer);", 
    "\t\tfunction setNewInstance()", 
    "\t\t{", 
    "\t\t\tnew_instance = clone(ko.extensions.vilbur.ExtensionsBuilderContainer);", 
    "\t\t}", 
    "\t\t", 
    "\t\tfunction clone(item)", 
    "\t\t{", 
    "\t\t\tif (!item) { return item; } // null, undefined values check", 
    "\t\t", 
    "\t\t\tvar types = [ Number, String, Boolean ], ", 
    "\t\t\t\tresult;", 
    "\t\t", 
    "\t\t\t// normalizing primitives if someone did new String('aaa'), or new Number('444');", 
    "\t\t\ttypes.forEach(function(type)", 
    "\t\t\t{", 
    "\t\t\t\tif (item instanceof type)", 
    "\t\t\t\t\tresult = type( item );", 
    "\t\t\t});", 
    "\t\t", 
    "\t\t\tif (typeof result == \"undefined\")", 
    "\t\t\t{", 
    "\t\t\t\tif (Object.prototype.toString.call( item ) === \"[object Array]\")", 
    "\t\t\t\t{", 
    "\t\t\t\t\tresult = [];", 
    "\t\t\t\t\titem.forEach(function(child, index)", 
    "\t\t\t\t\t{ ", 
    "\t\t\t\t\t\tresult[index] = clone( child );", 
    "\t\t\t\t\t});", 
    "\t\t\t\t}", 
    "\t\t\t\telse if (typeof item == \"object\")", 
    "\t\t\t\t{", 
    "\t\t\t\t\t// testing that this is DOM", 
    "\t\t\t\t\tif (item.nodeType && typeof item.cloneNode == \"function\") {", 
    "\t\t\t\t\t\tresult = item.cloneNode( true );    ", 
    "\t\t\t\t\t}", 
    "\t\t\t\t\telse if (!item.prototype)", 
    "\t\t\t\t\t{ // check that this is a literal", 
    "\t\t\t\t\t\tif (item instanceof Date)", 
    "\t\t\t\t\t\t\tresult = new Date(item);", 
    "\t\t\t\t\t\telse", 
    "\t\t\t\t\t\t{", 
    "\t\t\t\t\t\t\t// it is an object literal", 
    "\t\t\t\t\t\t\tresult = {};", 
    "\t\t\t\t\t\t\tfor(var i in item)", 
    "\t\t\t\t\t\t\t\tif (item.hasOwnProperty(i))", 
    "\t\t\t\t\t\t\t\t\tresult[i] = clone( item[i] );", 
    "\t\t\t\t\t\t}", 
    "\t\t\t\t\t} else {", 
    "\t\t\t\t\t\t// depending what you would like here,", 
    "\t\t\t\t\t\t// just keep the reference, or create new object", 
    "\t\t\t\t\t\tif (false && item.constructor)", 
    "\t\t\t\t\t\t\tresult = new item.constructor(); // would not advice to do that, reason? Read below", 
    "\t\t\t\t\t\telse", 
    "\t\t\t\t\t\t\tresult = item;", 
    "\t\t\t\t\t}", 
    "\t\t\t\t} else {", 
    "\t\t\t\t\tresult = item;", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t", 
    "\t\t\treturn result;", 
    "", 
    "\t\t}", 
    "\t\tfunction setParentReference( )", 
    "\t\t{", 
    "\t\t\tnew_instance.Sync.parent = new_instance;", 
    "\t\t}", 
    "\t\t", 
    "\t\tsetNewInstance();", 
    "\t\tsetParentReference();", 
    "\t\t", 
    "\t\treturn new_instance;", 
    "\t}", 
    "\treturn ExtensionsBuilder;", 
    "})();", 
    "", 
    "", 
    "/** ExtensionsBuilderContainer", 
    " * ", 
    " */", 
    "(function()", 
    "{", 
    "\tfunction ExtensionsBuilderContainer()", 
    "\t{", 
    "\t\tthis.test_var = 'Default';", 
    "\t\t", 
    "\t\t/** test", 
    "\t\t */", 
    "\t\tthis.test = function()", 
    "\t\t{", 
    "\t\t\talert( 'ExtensionsBuilderContainer' );", 
    "\t\t};", 
    "\t}", 
    "\treturn ExtensionsBuilderContainer;", 
    "", 
    "})().apply(ko.extensions.vilbur.ExtensionsBuilderContainer);"
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "async": 1, 
  "type": "macro", 
  "trigger": "trigger_startup"
}