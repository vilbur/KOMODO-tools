{
  "keyboard_shortcut": "", 
  "name": "Build and Install Extension", 
  "language": "JavaScript", 
  "trigger": "trigger_postopen", 
  "value": [
    "/* Path to file which can click on dialog", 
    " *", 
    " *", 
    " */", 
    "var click_on_restart_dialolg_path\t= '\\\\tools\\\\Toolbars\\\\Toolbar_71-Extension\\\\click-on-restart-dialog.exe';", 
    "", 
    "/* Full path to click on dialog file", 
    " */", 
    "var click_on_restart_dialog = ko.interpolate.interpolateString('%(path:userDataDir)') + click_on_restart_dialolg_path;", 
    "", 
    "/** clikckOnDialogPAthExists", 
    " */", 
    "var clikckOnDialogPathExists = function()", 
    "{", 
    "\tif( ! require(\"ko/file\").exists(click_on_restart_dialog) ){", 
    "\t\talert( \"ERROR: Wrong path to 'click-on-restart-dialog.exe'\\n\\nPlease set right path in variable click_on_restart_dialolg_path\\n\\nin 'Build_and_Install.komodotool'\" ); ", 
    "\t\treturn false;", 
    "\t}", 
    "\treturn true;", 
    "};", 
    "/** Search file or dir in path backwards", 
    " */", 
    "var fileSearch = function( path, search )", 
    "{", 
    "\tvar koFile\t= require(\"ko/file\"); ", 
    "\tvar path_split\t= path.split('\\\\');", 
    "\tvar found_path\t= null;", 
    "\t", 
    "\tif( search.constructor.name !== 'RegExp' )", 
    "\t\tsearch = new RegExp(search, 'gi');", 
    "\t", 
    "\t/** fileExists", 
    "\t*/", 
    "\tfunction fileExists()", 
    "\t{", 
    "\t\tvar dir_path\t= path_split.join('\\\\') + '\\\\';", 
    "\t\tvar list\t= koFile.list(dir_path);", 
    "\t\t", 
    "\t\tfor(var i=0; i<list.length;i++)", 
    "\t\t\tif( list[i].match(  search ) && ! found_path )", 
    "\t\t\t\tfound_path = dir_path + list[i];", 
    "", 
    "\t\treturn  found_path !== null;", 
    "\t}", 
    "\t", 
    "\twhile ( ! fileExists() && path_split.length > 1 )", 
    "\t\tpath_split.pop();", 
    "", 
    "\treturn found_path ? found_path : null;", 
    "\t", 
    "};", 
    "/** RunClikOnRestartDialog", 
    " */", 
    "var RunClikOnRestartDialog = function()", 
    "{", 
    "\tko.run.output.endSession();", 
    "", 
    "\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t.RunAndNotify( 'start \"\" \"\"'+click_on_restart_dialog +'\"\"', \"\", \"\" , \"\" );", 
    "};", 
    "/** RunClikOnRestartDialog", 
    " */", 
    "var RunClikOnRestartDialog = function()", 
    "{", 
    "\tko.run.output.endSession();", 
    "", 
    "\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t.RunAndNotify( 'start \"\" \"\"'+click_on_restart_dialog +'\"\"', \"\", \"\" , \"\" );", 
    "};", 
    "/** ", 
    " *", 
    " */", 
    "var BuildExtension = function(chrome_manifest_dir)", 
    "{", 
    "\tvar python_exe =  ko.interpolate.interpolateString('%(path:installDir)') + \"\\\\lib\\\\python\\\\python.exe\";", 
    "\t", 
    "\tvar python_koext\t=  ko.interpolate.interpolateString('%(path:sdkDir)') + \"\\\\bin\\\\koext.py\";", 
    "\t", 
    "\tvar command\t= '\"' + python_exe + '\" \"'+python_koext + '\" build -i chrome.manifest -d \"' + chrome_manifest_dir + '\"';\t", 
    "", 
    "\tko.run.output.endSession();", 
    "", 
    "\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t.RunAndNotify(command, '', '' , '' );", 
    "};", 
    "", 
    "/** ", 
    " */", 
    "var InstallExtension = function(xpi_path)", 
    "{", 
    "", 
    "\tvar command\t= 'ping 127.0.0.1 -n 2 > nul  &start \"\" komodo.exe \"' + xpi_path + '\"';", 
    "\tko.run.output.endSession();", 
    "\tComponents.classes[\"@activestate.com/koRunService;1\"]", 
    "\t\t\t\t\t.createInstance(Components.interfaces.koIRunService)", 
    "\t\t\t\t\t.RunAndNotify(command, \"\", \"\" , \"\" );", 
    "};", 
    "", 
    "", 
    "///** BuildAndInstallExtension", 
    "// */", 
    "//var BuildAndInstallExtension = function()", 
    "//{", 
    "//\t//alert( 'BuildAndInstallExtension' ); ", 
    "//\t/**", 
    "//\t * Script to build an xpi, running koext build in the current project root and", 
    "//\t * then install it into the currently running Komodo.", 
    "//\t */", 
    "//\tvar project = ko.macros.current.project;", 
    "//\t", 
    "//\tif( ! project ){", 
    "//\t\talert( 'No active project of extension' ); ", 
    "//\t\treturn; ", 
    "//\t}", 
    "//\t", 
    "//\tvar projectDir = ko.interpolate.interpolateString('%p');", 
    "//\tvar callback = function() {", 
    "//\t  require(\"notify/notify\").interact(\"Build complete\", \"projects\");", 
    "//\t  ko.projects.manager.saveProject(project);", 
    "//\t  var os = Components.classes[\"@activestate.com/koOs;1\"].", 
    "//\t\t\t\t\t  getService(Components.interfaces.koIOs);", 
    "//\t  var entries = os.listdir(projectDir, {});", 
    "//\t  var xpi_entries = entries.filter(function(name) { return /.xpi$/.test(name); } );", 
    "//\t  if (xpi_entries.length == 0) {", 
    "//\t\tko.dialogs.alert(\"No xpi file found in project dir: \" + projectDir);", 
    "//\t  } else if (xpi_entries.length == 1) {", 
    "//\t\tko.open.URI(os.path.join(projectDir, xpi_entries[0]));", 
    "//\t  } else {", 
    "//\t\tvar result = ko.dialogs.selectFromList(\"Extension Installation\",", 
    "//\t\t\t\t\t\t\t\t  \"Pick the xpi to install: \",", 
    "//\t\t\t\t\t\t\t\t  xpi_entries,", 
    "//\t\t\t\t\t\t\t\t  \"one\");", 
    "//\t\tif (result) {", 
    "//\t\t  ko.open.URI(os.path.join(projectDir, result));", 
    "//\t\t}", 
    "//\t  }", 
    "//\t};", 
    "//\tvar osPath = Components.classes[\"@activestate.com/koOsPath;1\"].", 
    "//\t\t\t\t\tgetService(Components.interfaces.koIOsPath);", 
    "//\tvar preprocessedChromePath = osPath.join(projectDir, \"chrome.p.manifest\");", 
    "//\tif (osPath.exists(preprocessedChromePath)) {", 
    "//\t  ko.koextgen.extensionLib.command('build -i chrome.manifest -i chrome.p.manifest ' +", 
    "//\t\t\t\t\t\t\t\t\t   '-d \"' + projectDir + '\"',", 
    "//\t\t\t\t\t\t\t\t\t   callback);", 
    "//\t} else {", 
    "//\t  ko.koextgen.extensionLib.command('build -i chrome.manifest ' +", 
    "//\t\t\t\t\t\t\t\t\t   '-d \"' + projectDir + '\"',", 
    "//\t\t\t\t\t\t\t\t\t   callback);", 
    "//\t}", 
    "//\t\t", 
    "//};", 
    "", 
    "", 
    "if( ! ko.macros.current.project ){", 
    "\talert( 'No active project of extension' ); ", 
    "\treturn; ", 
    "}", 
    "", 
    "var project_dir\t= ko.projects.manager.currentProject.liveDirectory;", 
    "var chrome_manifest_path\t= fileSearch( project_dir, 'chrome.manifest$' ); ", 
    "var chrome_manifest_dir\t= chrome_manifest_path ? require(\"ko/file\").dirname(chrome_manifest_path) : null;", 
    "", 
    "if( clikckOnDialogPathExists() )", 
    "{", 
    "\tRunClikOnRestartDialog();", 
    "\tBuildExtension(chrome_manifest_dir);", 
    "\tInstallExtension( fileSearch( chrome_manifest_dir, /.xpi/gi ) );", 
    "}", 
    "", 
    "", 
    "", 
    "", 
    "", 
    "", 
    ""
  ], 
  "version": "1.0.12", 
  "rank": 100, 
  "trigger_enabled": false, 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://famfamfamsilk/skin/icons/build.png"
}